<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>NanYin的博客</title>
  
  <subtitle>记录生活点滴</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://nanyiniu.github.io/"/>
  <updated>2019-06-19T02:49:21.219Z</updated>
  <id>https://nanyiniu.github.io/</id>
  
  <author>
    <name>NanYin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>设计模式之桥接模式</title>
    <link href="https://nanyiniu.github.io/2019/06/03/2019-06-03-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>https://nanyiniu.github.io/2019/06/03/2019-06-03-设计模式之桥接模式/</id>
    <published>2019-06-03T12:00:00.000Z</published>
    <updated>2019-06-19T02:49:21.219Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式之桥接模式"><a href="#设计模式之桥接模式" class="headerlink" title="设计模式之桥接模式"></a>设计模式之桥接模式</h1><p>目的在于将抽象与其实现分离，以便两者可以独立变化。独立变化的同时能够根据抽象类的对象关联从而能够将两个继承结构联动起来。就像在两个结构之间建立个桥梁一样进行通信，所以叫桥接模式。</p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ol><li>如果想避免抽象类与实现的永久绑定，可以在运行时间选择和切换实现类。</li><li>抽象类和接口都应该通过子类来进行拓展，在桥接模式中，可以使用子类来进行组合的同时能够独立拓展他们。</li><li>接口的实现的变化对客户端无影响。</li><li>如果想要在多个对象类中共享实现，并且避免让客户端感知到。</li></ol><h2 id="桥接模式结构图"><a href="#桥接模式结构图" class="headerlink" title="桥接模式结构图"></a>桥接模式结构图</h2><p><img src="https://raw.githubusercontent.com/NanYinIU/PicRoom/master/img/20190603220348.png" alt="桥接模式"></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>主要分为四部分，1.抽象类 2.抽象实现类 3.接口类 4.接口实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 抽象类与抽象实现类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Colors colors;</span><br><span class="line"></span><br><span class="line">    Shape(Colors colors) &#123;</span><br><span class="line">        <span class="keyword">this</span>.colors = colors;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildShape</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 圆形实现类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShapeCircle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ShapeCircle</span><span class="params">(Colors colors)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(colors);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildShape</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"\n first step : build circle\n and second step:"</span>);</span><br><span class="line">        colors.paint();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//方形实现类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShapeSquare</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ShapeSquare</span> <span class="params">(Colors colors)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(colors);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildShape</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"\n first step : build Square\n and second step:"</span>);</span><br><span class="line">        colors.paint();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>抽象方法中引用了Colors类变量，使用实现类中的buildShape方法实现具体功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Colors</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paint</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ColorBlue</span> <span class="keyword">implements</span> <span class="title">Colors</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paint</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">" print blue !!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ColorRed</span> <span class="keyword">implements</span> <span class="title">Colors</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paint</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">" paint inner with red !!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过使用Color接口，实现类实现Colors中的paint方法实现Color</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Shape circle = <span class="keyword">new</span> ShapeCircle(<span class="keyword">new</span> ColorBlue());</span><br><span class="line">        circle.buildShape();</span><br><span class="line">        Shape square = <span class="keyword">new</span> ShapeSquare(<span class="keyword">new</span> ColorRed());</span><br><span class="line">        square.buildShape();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">结果：</span><br><span class="line"></span><br><span class="line"> first step : build circle</span><br><span class="line"> and second step:</span><br><span class="line"> print blue !!</span><br><span class="line"></span><br><span class="line"> first step : build Square</span><br><span class="line"> and second step:</span><br><span class="line"> paint red !!</span><br></pre></td></tr></table></figure><p>上面的例子中，颜色和图形是两个独立不同的维度，两个可以分别变化。将两个维度设计为两个不同的继承的结构，在两个结构之间使用在抽象类中的关联来达到链接的目的，这个链接成为两个继承结构通信的桥梁。所以为桥接模式。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;设计模式之桥接模式&quot;&gt;&lt;a href=&quot;#设计模式之桥接模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式之桥接模式&quot;&gt;&lt;/a&gt;设计模式之桥接模式&lt;/h1&gt;&lt;p&gt;目的在于将抽象与其实现分离，以便两者可以独立变化。独立变化的同时能够根据抽象类的对象
      
    
    </summary>
    
    
      <category term="Java" scheme="https://nanyiniu.github.io/tags/Java/"/>
    
      <category term="设计模式" scheme="https://nanyiniu.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
</feed>
