<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>NanYin的博客</title>
  
  <subtitle>记录生活点滴</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://nanyiniu.github.io/"/>
  <updated>2019-07-07T14:26:03.281Z</updated>
  <id>https://nanyiniu.github.io/</id>
  
  <author>
    <name>NanYin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SpringBoot中使用配置</title>
    <link href="https://nanyiniu.github.io/2019/07/09/2019-07-06-SpringBoot%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    <id>https://nanyiniu.github.io/2019/07/09/2019-07-06-SpringBoot的配置文件/</id>
    <published>2019-07-09T12:00:00.000Z</published>
    <updated>2019-07-07T14:26:03.281Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot中使用配置"><a href="#SpringBoot中使用配置" class="headerlink" title="SpringBoot中使用配置"></a>SpringBoot中使用配置</h1><h2 id="一、配置文件"><a href="#一、配置文件" class="headerlink" title="一、配置文件"></a>一、配置文件</h2><p>SpringBoot使用全局的配置文件，配置文件名是固定的</p><ul><li>application.properties</li><li>application.yml</li></ul><p>使用配置文件可以更改系统自动配置的默认值，比如端口号等信息。</p><h3 id="YAML"><a href="#YAML" class="headerlink" title="YAML"></a>YAML</h3><p>yaml以数据为中心，比xml，json更适合做配置文件。</p><h4 id="YAML与properties对比"><a href="#YAML与properties对比" class="headerlink" title="YAML与properties对比"></a>YAML与properties对比</h4><p>YAML:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure><p>properties:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server.port: 8080</span><br></pre></td></tr></table></figure><h4 id="YAML语法"><a href="#YAML语法" class="headerlink" title="YAML语法"></a>YAML语法</h4><ol><li>基本语法</li></ol><p>k : v 表示一对键值对 「中间需要有空格」，以空格的缩紧来表示层级关系，使用左对其的数据都是一个层级的。</p><p>例如下面代码中的port和path是一个层级的。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">      port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">      path:</span> <span class="string">/hello</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>值的写法</p><ul><li><p>字面量</p><p>key : value 字面量直接写，并且字符串不需要添加引号，类似properties。如果添加引号会有特殊的意义。</p><p>双引号： 不会转义特殊字符<br>单引号： 会转义特殊字符，最终会转义成普通的字符串输出</p></li><li><p>对象</p><ol><li>非行内写法 -&gt;  key : value 对象一样按照key，value来写</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line"><span class="attr">       firstName:</span> <span class="string">zhang</span></span><br><span class="line"><span class="attr">       lastName:</span> <span class="string">san</span></span><br></pre></td></tr></table></figure><ol start="2"><li>行内写法</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">person:</span><span class="string">&#123;firstName:</span> <span class="string">zhang,lastName:</span> <span class="string">san&#125;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>数组（list，set）</li></ol><p>使用 - 来表示数组中的一个元素</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">person</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">zhangsan</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">lisi</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">wangwu</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><h4 id="使用yml配置文件进行配置"><a href="#使用yml配置文件进行配置" class="headerlink" title="使用yml配置文件进行配置"></a>使用yml配置文件进行配置</h4><h5 id="编写bean对象"><a href="#编写bean对象" class="headerlink" title="编写bean对象"></a>编写bean对象</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 如果需要使用ConfigurationProperties 这个注解需要添加</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;dependency&gt;</span></span><br><span class="line"><span class="comment"> * &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment"> * &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment"> * &lt;optional&gt;true&lt;/optional&gt;</span></span><br><span class="line"><span class="comment"> * &lt;/dependency&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> nanyin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 16:29 2019-07-07</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 使用Lombok的data注解可以自动的配置 setter，getter，toString属性，</span></span><br><span class="line"><span class="comment"> * 但是需要IDE的Lombok插件</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(value = <span class="string">"person"</span>)</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="使用configurationPropertis配置类"><a href="#使用configurationPropertis配置类" class="headerlink" title="使用configurationPropertis配置类"></a>使用configurationPropertis配置类</h5><p>根据bean对象在application.yml文件中编写如下yml内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">zhangsan</span></span><br><span class="line"><span class="attr">    age:</span> <span class="number">12</span></span><br><span class="line"><span class="attr">    user:</span></span><br><span class="line"><span class="attr">        id:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h5 id="使用SpringBoot的单元测试"><a href="#使用SpringBoot的单元测试" class="headerlink" title="使用SpringBoot的单元测试"></a>使用SpringBoot的单元测试</h5><p>在测试文件夹下建立<code>DeepSpringBootApplicationTest</code>测试类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 使用spring的测试，可以使用spring的注入功能</span></span><br><span class="line"><span class="comment"> * 这里的runWith注解说明的是让junit使用Spring的运行测试方式</span></span><br><span class="line"><span class="comment"> * 也就是说可以使用spring的注入等特性</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> nanyin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 16:27 2019-07-07</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeepSpringBootApplicationTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    Person person;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPerson</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(person.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果需要使用上面的代码进行SpringBoot的单元测试，需要在pom.xml文件中添加如下内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最后运行刚才的测试类，得到的结果是：</p><p><img src="https://raw.githubusercontent.com/NanYinIU/PicRoom/master/img/20190707164406.png" alt="运行结果"></p><p>通过运行结果可知道，使用application.yml文件编写配置信息成功的放到Person这个类中。</p><h4 id="PropertySource"><a href="#PropertySource" class="headerlink" title="PropertySource"></a>PropertySource</h4><p>上面使用yml文件，通过configurationPropertis对Person进行了配置。</p><p>configurationPropertis它会从全局配置文件application.yml配置文件中的配置。但如果指定某个具体配置文件中的配置呢？</p><p><strong>答案是PropertySource注解</strong></p><ol><li><p>使用properties文件</p><p> 在classpath路径下新建要个<code>person.properties</code>文件,文件内容如下；</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">person.age= 12</span><br><span class="line">person.id= 2</span><br><span class="line">person.name=zhangsan</span><br></pre></td></tr></table></figure><p> 在原来的基础上添加PropertySource注解</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="comment">// 指定使用到的配置文件，这里的value可以是数组，也就是可以加载多个配置文件</span></span><br><span class="line"><span class="meta">@PropertySource</span>(value=<span class="string">"classpath:person.properties"</span>)</span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(value = <span class="string">"person"</span>)</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 运行结果和上面测试结果的相同。</p></li><li><p>使用yml文件</p><p> 使用yml文件作为配置文件时，与properties文件略有不同，是因为<strong>PropertySource实际上上默认是不支持yaml文件的</strong>。所以如果使用yml文件就需要略加改造。经过一番<a href="https://mdeinum.github.io/2018-07-04-PropertySource-with-yaml-files/" target="_blank" rel="noopener">谷歌</a>后。</p><p> <code>PropertySourceFactory</code>是spring 4.3之后出现的为PropertySource的工厂接口，注解默认使用的是<code>DefaultPropertySourceFactory</code>来创建<code>ResourcePropertySource</code>对象。</p><p> spring通过<code>YamlPropertiesFactoryBean</code>来加载yaml文件。这个类可以将一个或多个文件加载为<code>java.util.Properties</code>对象。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nanyin.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.config.YamlPropertiesFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.env.PropertiesPropertySource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.env.PropertySource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.support.EncodedResource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.support.PropertySourceFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.lang.Nullable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">YamlPropertiesFactory</span> <span class="keyword">implements</span> <span class="title">PropertySourceFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> PropertySource&lt;?&gt; createPropertySource(<span class="meta">@Nullable</span> String name, EncodedResource resource) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        Properties propertiesFromYaml = loadYamlIntoProperties(resource);</span><br><span class="line">        String sourceName = name != <span class="keyword">null</span> ? name : resource.getResource().getFilename();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PropertiesPropertySource(sourceName, propertiesFromYaml);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Properties <span class="title">loadYamlIntoProperties</span><span class="params">(EncodedResource resource)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            YamlPropertiesFactoryBean factory = <span class="keyword">new</span> YamlPropertiesFactoryBean();</span><br><span class="line">            factory.setResources(resource.getResource());</span><br><span class="line">            factory.afterPropertiesSet();</span><br><span class="line">            <span class="keyword">return</span> factory.getObject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalStateException e) &#123;</span><br><span class="line">            <span class="comment">// for ignoreResourceNotFound</span></span><br><span class="line">            Throwable cause = e.getCause();</span><br><span class="line">            <span class="keyword">if</span> (cause <span class="keyword">instanceof</span> FileNotFoundException)</span><br><span class="line">                <span class="keyword">throw</span> (FileNotFoundException) e.getCause();</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 实现上述代码后，在配置类中的PropertySource中添加<code>factory</code></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PropertySource</span>(value=&#123;<span class="string">"classpath:person.yml"</span>&#125;,</span><br><span class="line">                factory = YamlPropertiesFactory.class)</span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"person"</span>)</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> yaml文件文件中的内容.其中<strong>使用<code>${xxx}</code>的结构可以调用其他属性的值</strong>，这里user的id值就是直接使用person的id值。</p> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line"><span class="attr">    age:</span> <span class="number">12</span></span><br><span class="line"><span class="attr">    id:</span> <span class="number">2</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">zhangsan</span></span><br><span class="line"><span class="attr">    user:</span></span><br><span class="line"><span class="attr">        id:</span> <span class="string">$&#123;person.id&#125;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="二、配置类"><a href="#二、配置类" class="headerlink" title="二、配置类"></a>二、配置类</h2><p>在原来使用Spring时，繁多的xml让人头疼。而在SpringBoot中，推荐使用类的方式代替xml等配置文件，改用注解的方式。</p><ol><li><p>创建一个类，类名为<code>MyConfig</code></p></li><li><p>为类标注为<code>@Configuration</code></p></li><li><p>将需要引入到容器中的bean作为返回值写到方法中，其中方法的名称就是容器中bean的名称。</p></li><li><p>进行测试，容器中加载到了这个配置类中配置的bean</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 标注@Configuration注解，表示这个是Spring的配置类，用来代替配置文件如 xxx.xml</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    Person person;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 使用<span class="doctag">@bean</span>注解向容器中添加bean，用来替代原来xml配置文件中的</span></span><br><span class="line"><span class="comment">      *&lt;beans&gt;</span></span><br><span class="line"><span class="comment">      * &lt;context:annotation-config/&gt;</span></span><br><span class="line"><span class="comment">      * &lt;bean class="com.acme.AppConfig"/&gt;</span></span><br><span class="line"><span class="comment">      *&lt;/beans&gt;</span></span><br><span class="line"><span class="comment">      * 其中方法的返回值是添加到容器中的内容</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HelloService <span class="title">helloService</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 可以使用person的配置值</span></span><br><span class="line">        System.out.println(<span class="string">"加载MyConfig配置文件！！！ 其中配置文件中的 name 属性："</span> + person.getName());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HelloService() ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SpringBoot测试</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeepSpringBootApplicationTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ApplicationContext ctx;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testContainsBean</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(ctx.containsBean(<span class="string">"helloService"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将<code>HelloService</code>手动通过配置类的方式添加到容器中，作用和使用xml的方式一样，但是更简单，更容易看懂。</p><p><img src="https://raw.githubusercontent.com/NanYinIU/PicRoom/master/img/20190707181447.png" alt="结果"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SpringBoot中使用配置&quot;&gt;&lt;a href=&quot;#SpringBoot中使用配置&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot中使用配置&quot;&gt;&lt;/a&gt;SpringBoot中使用配置&lt;/h1&gt;&lt;h2 id=&quot;一、配置文件&quot;&gt;&lt;a hr
      
    
    </summary>
    
      <category term="SpringBoot" scheme="https://nanyiniu.github.io/categories/SpringBoot/"/>
    
    
      <category term="Java" scheme="https://nanyiniu.github.io/tags/Java/"/>
    
      <category term="SpringBoot" scheme="https://nanyiniu.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot深入自动配置</title>
    <link href="https://nanyiniu.github.io/2019/07/07/2019-07-04-SpringBoot%E6%B7%B1%E5%85%A5%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE/"/>
    <id>https://nanyiniu.github.io/2019/07/07/2019-07-04-SpringBoot深入自动配置/</id>
    <published>2019-07-07T12:00:00.000Z</published>
    <updated>2019-07-07T08:47:02.095Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot深入自动配置"><a href="#SpringBoot深入自动配置" class="headerlink" title="SpringBoot深入自动配置"></a>SpringBoot深入自动配置</h1><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>在上一篇<a href="https://nanyiniu.github.io/2019/07/06/2019-07-03-SpringBoot与微服务简介/">Spring Boot与微服务基本介绍</a>中，介绍了创建maven项目到运行springboot的基本过程。 </p><p>其中使用主程序来启动<code>SpringBoot</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeepSpringBootApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 使用SpringApplication.run方法来启动spring boot应用 其中参数有类和args</span></span><br><span class="line">        SpringApplication.run(DeepSpringBootApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>仅仅是添加了一个<code>@SpringBootApplication</code>注解，这个注解的作用是什么，原理是什么，接下来就通过源码简单看一下。</p><h2 id="SpringBootApplication启动注解"><a href="#SpringBootApplication启动注解" class="headerlink" title="SpringBootApplication启动注解"></a>SpringBootApplication启动注解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//点开@SpringBootApplication源码</span></span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(excludeFilters = &#123; <span class="meta">@Filter</span>(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),</span><br><span class="line"><span class="meta">@Filter</span>(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) &#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootApplication &#123;</span><br><span class="line">    <span class="comment">/** AliasFor注解的作用是为了声明别名</span></span><br><span class="line"><span class="comment">      * AliasFor在下面代码中的作用就是通过别名引用在annotatin指定的类的特定方法</span></span><br><span class="line"><span class="comment">      * 如果有兴趣可以参考AliasFor的官方文档 </span></span><br><span class="line"><span class="comment">      * https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/annotation/AliasFor.html</span></span><br><span class="line"><span class="comment">      * 比如这里就会指定 EnableAutoConfiguration的exclude方法</span></span><br><span class="line"><span class="comment">      **/</span></span><br><span class="line"><span class="meta">@AliasFor</span>(annotation = EnableAutoConfiguration.class)</span><br><span class="line">Class&lt;?&gt;[] exclude() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">    <span class="comment">// 。。。其他的省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的<code>@SpringBootApplication</code>源码中，其中使用到了三个比较重要的基本注解<code>@SpringBootConfiguration</code>、<code>@EnableAutoConfiguration</code>和<code>@ComponentScan</code>。下面分别来对这三个注解进行简单分析。</p><h3 id="SpringBootConfiguration"><a href="#SpringBootConfiguration" class="headerlink" title="SpringBootConfiguration"></a>SpringBootConfiguration</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 标示是一个spring boot应用的配置类，用作 <span class="doctag">@Configuratio</span>的替代品</span></span><br><span class="line"><span class="comment">  * 以便自动找到配置</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootConfiguration &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>其实这时<code>SpringBoot</code>对<code>Spring</code>的<code>@Configuration</code>的注解的包装</strong></p><h4 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Configuration &#123;</span><br><span class="line"><span class="meta">@AliasFor</span>(annotation = Component.class)</span><br><span class="line"><span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单理解为，Configuration 注解上标注了@Component原注解，所以它也是一个spring组件，会通过扫描把标志这个注解的类作为spring的配置类加载到容器中。</p><p>实际上加载Configuration的方法有三种，自动扫描配置类只是其中的一种，其他两种是</p><ol><li>通过AnnotationConfigApplicationContext类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</span><br><span class="line">     <span class="meta">@Bean</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> MyBean <span class="title">myBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="comment">// instantiate, configure and return bean ...</span></span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">AnnotationConfigApplicationContext ctx = <span class="keyword">new</span> AnnotationConfigApplicationContext();</span><br><span class="line"><span class="comment">// 注册Bean</span></span><br><span class="line">ctx.register(AppConfig.class);</span><br><span class="line">ctx.refresh();</span><br><span class="line">MyBean myBean = ctx.getBean(MyBean.class);</span><br></pre></td></tr></table></figure><ol start="2"><li>使用xml配置文件,将标注为@Configuration的类作为一个bean来声明在xml文件中。</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.acme.AppConfig"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>标记@Configuration注解的类表示这个类中声明了一个或多个@Bean方法，可以交由spring容器处理。可以在运行时生成bean定义和bean之间的服务请求。</p><p>更加详细的参考<a href="https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/Configuration.html" target="_blank" rel="noopener">Spring官网Configuration注解</a></p><h3 id="EnableAutoConfiguration"><a href="#EnableAutoConfiguration" class="headerlink" title="EnableAutoConfiguration"></a>EnableAutoConfiguration</h3><p>EnableAutoConfiguration是spring boot中的注解，它的作用就是猜测并自动配置可能需要的bean,也就是自动配置功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import</span>(AutoConfigurationImportSelector.class)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAutoConfiguration &#123;</span><br><span class="line">String ENABLED_OVERRIDE_PROPERTY = <span class="string">"spring.boot.enableautoconfiguration"</span>;</span><br><span class="line">Class&lt;?&gt;[] exclude() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">String[] excludeName() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中重要的两个注解<code>@AutoConfigurationPackage</code>和<code>@Import</code>中的内容</p><h4 id="AutoConfigurationPackage"><a href="#AutoConfigurationPackage" class="headerlink" title="AutoConfigurationPackage"></a>AutoConfigurationPackage</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 标注@AutoConfigurationPackage的注解可以使用Registrar进行注册</span></span><br><span class="line"><span class="comment">// @Import的作用就是引用配置类，将多个配置类放到一个主配置中</span></span><br><span class="line"><span class="meta">@Import</span>(AutoConfigurationPackages.Registrar.class)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> AutoConfigurationPackage &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册方法</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Registrar</span> <span class="keyword">implements</span> <span class="title">ImportBeanDefinitionRegistrar</span>, <span class="title">DeterminableImports</span> </span>&#123;</span><br><span class="line"><span class="comment">// 注册bean定义信息</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(AnnotationMetadata metadata, BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 这里的packageName是标注这个注解的类的包的路径名称，如下图</span></span><br><span class="line">        register(registry, <span class="keyword">new</span> PackageImport(metadata).getPackageName());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;Object&gt; <span class="title">determineImports</span><span class="params">(AnnotationMetadata metadata)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Collections.singleton(<span class="keyword">new</span> PackageImport(metadata));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/NanYinIU/PicRoom/master/img/20190705181000.png" alt="debug1"></p><p>将主配置类的所在的包及下面的所有子包扫描到Spring容器中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 以编程方式注册自动配置包名称.将给定的包【这里的是com.nanyin 】注册添加到已经注册的包名称中</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(BeanDefinitionRegistry registry, String... packageNames)</span> </span>&#123;</span><br><span class="line"><span class="comment">// private static final String BEAN = AutoConfigurationPackages.class.getName();</span></span><br><span class="line">    <span class="keyword">if</span> (registry.containsBeanDefinition(BEAN)) &#123;</span><br><span class="line">        BeanDefinition beanDefinition = registry.getBeanDefinition(BEAN);</span><br><span class="line">        ConstructorArgumentValues constructorArguments = beanDefinition.getConstructorArgumentValues();</span><br><span class="line">        constructorArguments.addIndexedArgumentValue(<span class="number">0</span>, addBasePackages(constructorArguments, packageNames));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="comment">//  使用标准的类定义 GenericBeanDefinition 注册bean</span></span><br><span class="line">        GenericBeanDefinition beanDefinition = <span class="keyword">new</span> GenericBeanDefinition();</span><br><span class="line">        beanDefinition.setBeanClass(BasePackages.class);</span><br><span class="line">        beanDefinition.getConstructorArgumentValues().addIndexedArgumentValue(<span class="number">0</span>, packageNames);</span><br><span class="line">        beanDefinition.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);</span><br><span class="line">        <span class="comment">// 注册bean</span></span><br><span class="line">        registry.registerBeanDefinition(BEAN, beanDefinition);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Import-AutoConfigurationImportSelector-class"><a href="#Import-AutoConfigurationImportSelector-class" class="headerlink" title="@Import(AutoConfigurationImportSelector.class)"></a>@Import(AutoConfigurationImportSelector.class)</h4><p>自动导入组件的选择器。将需要导入的组件以全类名的方式返回一个数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(AnnotationMetadata annotationMetadata, DeferredImportSelector deferredImportSelector)</span> </span>&#123; Assert.state(deferredImportSelector <span class="keyword">instanceof</span> AutoConfigurationImportSelector,</span><br><span class="line">            () -&gt; String.format(<span class="string">"Only %s implementations are supported, got %s"</span>,</span><br><span class="line">                    AutoConfigurationImportSelector.class.getSimpleName(),</span><br><span class="line">                    deferredImportSelector.getClass().getName()));</span><br><span class="line">                    <span class="comment">//获取自动导入的内容的全类名，在这一步进行debug见下图</span></span><br><span class="line">    AutoConfigurationEntry autoConfigurationEntry = ((AutoConfigurationImportSelector) deferredImportSelector)</span><br><span class="line">            .getAutoConfigurationEntry(getAutoConfigurationMetadata(), annotationMetadata);</span><br><span class="line">    <span class="keyword">this</span>.autoConfigurationEntries.add(autoConfigurationEntry);</span><br><span class="line">    <span class="keyword">for</span> (String importClassName : autoConfigurationEntry.getConfigurations()) &#123;</span><br><span class="line">        <span class="keyword">this</span>.entries.putIfAbsent(importClassName, annotationMetadata);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码中断点得出的自动导入的包名称：</p><p><img src="https://raw.githubusercontent.com/NanYinIU/PicRoom/master/img/20190706220846.png" alt="代码导入1"></p><p>通过方法getConstructorArgumentValues得到自动配置的包的名称，调用了SpringFactoriesLoader的方法，其中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> List&lt;String&gt; <span class="title">getCandidateConfigurations</span><span class="params">(AnnotationMetadata metadata, AnnotationAttributes attributes)</span> </span>&#123;</span><br><span class="line">List&lt;String&gt; configurations = SpringFactoriesLoader.loadFactoryNames(getSpringFactoriesLoaderFactoryClass(),</span><br><span class="line">getBeanClassLoader());</span><br><span class="line">Assert.notEmpty(configurations, <span class="string">"No auto configuration classes found in META-INF/spring.factories. If you "</span></span><br><span class="line">+ <span class="string">"are using a custom packaging, make sure that file is correct."</span>);</span><br><span class="line"><span class="keyword">return</span> configurations;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用loadFactoryNames获得一组包名称</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">loadFactoryNames</span><span class="params">(Class&lt;?&gt; factoryClass, @Nullable ClassLoader classLoader)</span> </span>&#123;</span><br><span class="line">String factoryClassName = factoryClass.getName();</span><br><span class="line"><span class="keyword">return</span> loadSpringFactories(classLoader).getOrDefault(factoryClassName, Collections.emptyList());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后通过文件中spring.factorys文件中的内容来获取最终的自动导入自动配置类包范围。</p><p><img src="https://raw.githubusercontent.com/NanYinIU/PicRoom/master/img/20190706221723.png" alt="导入"></p><p><img src="https://raw.githubusercontent.com/NanYinIU/PicRoom/master/img/20190706222017.png" alt="导入包内容"></p><h2 id="ComponentScan"><a href="#ComponentScan" class="headerlink" title="ComponentScan"></a>ComponentScan</h2><p>组件扫描指令，需要与@Configuration一起使用。与Spring提供的xml配置<code>&lt;context:component-scan&gt;</code>作用相同。</p><p>在SpringBootApplication注解中是这样定义ComponentScan的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ComponentScan</span>(excludeFilters = &#123; </span><br><span class="line"><span class="meta">@Filter</span>(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),</span><br><span class="line"><span class="meta">@Filter</span>(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>excludeFilters的作用是指定哪些类型不符合组件扫描的条件，也就是排除掉指定的类。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SpringBoot深入自动配置&quot;&gt;&lt;a href=&quot;#SpringBoot深入自动配置&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot深入自动配置&quot;&gt;&lt;/a&gt;SpringBoot深入自动配置&lt;/h1&gt;&lt;h2 id=&quot;引入&quot;&gt;&lt;a hr
      
    
    </summary>
    
      <category term="SpringBoot" scheme="https://nanyiniu.github.io/categories/SpringBoot/"/>
    
    
      <category term="Java" scheme="https://nanyiniu.github.io/tags/Java/"/>
    
      <category term="SpringBoot" scheme="https://nanyiniu.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot与微服务简介</title>
    <link href="https://nanyiniu.github.io/2019/07/06/2019-07-03-SpringBoot%E4%B8%8E%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%AE%80%E4%BB%8B/"/>
    <id>https://nanyiniu.github.io/2019/07/06/2019-07-03-SpringBoot与微服务简介/</id>
    <published>2019-07-06T12:00:00.000Z</published>
    <updated>2019-07-04T15:17:49.927Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot与微服务简介"><a href="#SpringBoot与微服务简介" class="headerlink" title="SpringBoot与微服务简介"></a>SpringBoot与微服务简介</h1><p>SpringBoot通过整合Spring的各个技术栈用来简化Spring应用开发，使用约定大于配置的思想。简单快速的创建一个独立的，产品级的应用。</p><h2 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li><p>快速创建独立运行的Spring项目与各大主流框架的集成。</p></li><li><p>自带嵌入式的servlet容器。</p></li><li><p>springboot带有starters自动依赖与版本控制。</p></li><li><p>大量的自动配置，约定大于配置。</p></li><li><p>无需配置xml，告别大量的xml文件。</p></li></ol><h3 id="springboot的hello-world"><a href="#springboot的hello-world" class="headerlink" title="springboot的hello world"></a>springboot的hello world</h3><h4 id="创建一个maven应用"><a href="#创建一个maven应用" class="headerlink" title="创建一个maven应用"></a>创建一个maven应用</h4><ol><li>创建一个普通的maven项目</li></ol><img src="https://raw.githubusercontent.com/NanYinIU/PicRoom/master/img/20190704174954.png"><ol start="2"><li>创建后的maven结构，包含pom.xml文件内容</li></ol><img src="https://raw.githubusercontent.com/NanYinIU/PicRoom/master/img/20190704175208.png"><ol start="3"><li>开启idea中对maven的自动导入功能</li></ol><img src="https://raw.githubusercontent.com/NanYinIU/PicRoom/master/img/20190704175420.png"><h4 id="在POM文件中添加依赖"><a href="#在POM文件中添加依赖" class="headerlink" title="在POM文件中添加依赖"></a>在POM文件中添加依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- org.springframework.boot 作用：</span></span><br><span class="line"><span class="comment">            1. 默认使用java版本,默认编码</span></span><br><span class="line"><span class="comment">            2. 引用管理的功能，比如version会从这里继承出去</span></span><br><span class="line"><span class="comment">            3. 识别插件配置</span></span><br><span class="line"><span class="comment">            4. 识别.properties 和.yml配置文件</span></span><br><span class="line"><span class="comment">            5. 整体的版本依赖</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="创建应用主程序"><a href="#创建应用主程序" class="headerlink" title="创建应用主程序"></a>创建应用主程序</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.EnableAutoConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * EnableAutoConfiguration 表示告诉spring boot如何去配置spring，</span></span><br><span class="line"><span class="comment"> * 其可以帮助 SpringBoot 应用将所有符合条件的 <span class="doctag">@Configuration</span> 配置都加载到当前 IoC 容器之中</span></span><br><span class="line"><span class="comment"> * 自从添加spring-boot-starter-web这个starter添加了tomcat和spring MVC后，使用该注解，就说明使用spring启动一个web项目</span></span><br><span class="line"><span class="comment"> * SpringBootApplication 等同于使用<span class="doctag">@Configuration</span> <span class="doctag">@EnableAutoConfiguration</span> <span class="doctag">@ComponentScan</span>这三个注解</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> nanyin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 21:46 2019-07-04</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeepSpringBootApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 使用SpringApplication.run方法来启动spring boot应用 其中参数有类和args</span></span><br><span class="line">        SpringApplication.run(DeepSpringBootApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用SPringMvc编写controller层"><a href="#使用SPringMvc编写controller层" class="headerlink" title="使用SPringMvc编写controller层"></a>使用SPringMvc编写controller层</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function">String <span class="title">home</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello World!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="运行主程序进行测试"><a href="#运行主程序进行测试" class="headerlink" title="运行主程序进行测试"></a>运行主程序进行测试</h4><p>打开<code>http://localhost:8080/hello</code> 查看网页上的内容显示出hello world字符。测试成功</p><p><img src="https://raw.githubusercontent.com/NanYinIU/PicRoom/master/img/20190704223338.png" alt="测试"></p><h4 id="导入maven插件打jar包"><a href="#导入maven插件打jar包" class="headerlink" title="导入maven插件打jar包"></a>导入maven插件打jar包</h4><p>在pom.xml文件中添加如下内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>保存之后使用<code>mvn package</code>命令打成jar包，可以在输出信息中找出打完的jar包的位置。<br>使用<code>java -jar xxxxxx.jar</code>命令运行程序。</p><h2 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h2><p>微服务其实是一种架构风格，一个应用应该是一组小型服务组成，小型服务通过http api的方式进行沟通。每一个小型服务都是一个功能元素，能够独立替换和独立升级的应用单元。</p><p>详细请参考<code>martinfowler.com</code> 中的这篇微服务文章：<a href="https://martinfowler.com/microservices" target="_blank" rel="noopener">微服务</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SpringBoot与微服务简介&quot;&gt;&lt;a href=&quot;#SpringBoot与微服务简介&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot与微服务简介&quot;&gt;&lt;/a&gt;SpringBoot与微服务简介&lt;/h1&gt;&lt;p&gt;SpringBoot通过整合
      
    
    </summary>
    
      <category term="SpringBoot" scheme="https://nanyiniu.github.io/categories/SpringBoot/"/>
    
    
      <category term="Java" scheme="https://nanyiniu.github.io/tags/Java/"/>
    
      <category term="SpringBoot" scheme="https://nanyiniu.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之命令模式</title>
    <link href="https://nanyiniu.github.io/2019/06/28/2019-06-28-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/"/>
    <id>https://nanyiniu.github.io/2019/06/28/2019-06-28-设计模式之命令模式/</id>
    <published>2019-06-28T12:00:00.000Z</published>
    <updated>2019-07-02T11:57:45.467Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式之命令模式"><a href="#设计模式之命令模式" class="headerlink" title="设计模式之命令模式"></a>设计模式之命令模式</h1><p>命令模式是对象的行为模式，命令模式将一个请求封装成一个对象，从而让你使用不同的请求把客户端参数化，对请求排队或者记录请求日志，可以提供命令的撤销和恢复功能。</p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ol><li><p>通过要执行的操作来参数化对象。可以使用回调函数在过程语言中表达此类参数化，也就是说，某个函数已注册到稍后要调用的某个位置。命令模式可以说是面向对象的回调函数。起到在特定位置被调用的目的。</p></li><li><p>在不同的时间下进行发出请求和执行请求，命令对象可以独立于请求，拥有一个独立的生命周期。命令允许请求的一方和接收请求的一方能够独立演化。</p></li><li><p>撤销操作，命令模式可以在命令执行的时候可以在命令类中存贮当前状态，可以通过遍历此列表并分别转发调用unexecute和execute来实现无限级别的撤销和重做。</p></li><li><p>可以更容易的将命令记录到日志中。</p></li><li><p>命令模式使新的命令很容易地被加入到系统里。具有很好的拓展性。</p></li></ol><h2 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h2><div align="center"><img src="https://raw.githubusercontent.com/NanYinIU/PicRoom/master/img/20190702190857.png" style="zoom:50%"></div><p>命令模式涉及到五个角色，它们分别是：</p><ol><li><p><code>客户端(Client)</code>角色：创建一个具体命令(ConcreteCommand)对象并确定其接收者。</p></li><li><p><code>命令(Command)</code>角色：声明了一个给所有具体命令类的抽象接口。</p></li><li><p><code>具体命令(ConcreteCommand)</code>角色：定义一个接收者和行为之间的弱耦合；实现execute()方法，负责调用接收者的相应操作。execute()方法通常叫做执行方法。</p></li><li><p><code>请求者(Invoker)</code>角色：负责调用命令对象执行请求，相关的方法叫做行动方法。</p></li><li><p><code>接收者(Receiver)</code>角色：负责具体实施和执行一个请求。任何一个类都可以成为接收者，实施和执行请求的方法叫做行动方法</p></li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="抽象命令角色"><a href="#抽象命令角色" class="headerlink" title="抽象命令角色"></a>抽象命令角色</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">excute</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="请求者角色"><a href="#请求者角色" class="headerlink" title="请求者角色"></a>请求者角色</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 请求者用来请求命令</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">King</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Command command;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Command <span class="title">invoke</span><span class="params">(Command command)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.command = command;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.command;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">action</span><span class="params">()</span></span>&#123;</span><br><span class="line">        command.excute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="接收者角色"><a href="#接收者角色" class="headerlink" title="接收者角色"></a>接收者角色</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Soldier</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 行动方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prepareWeapon</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Soldier prepare Weapon !!!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Soldier Attack!!!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">retreat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Soldier Retreat!!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="具体命令者角色"><a href="#具体命令者角色" class="headerlink" title="具体命令者角色"></a>具体命令者角色</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AttackCommand</span> <span class="keyword">implements</span> <span class="title">Command</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    Soldier soldier ;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AttackCommand</span><span class="params">(Soldier soldier)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.soldier = soldier;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">excute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 收到请求，执行操作</span></span><br><span class="line">        soldier.prepareWeapon();</span><br><span class="line">        soldier.attack();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="客户端代码"><a href="#客户端代码" class="headerlink" title="客户端代码"></a>客户端代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//  接受者和请求者</span></span><br><span class="line">        King king = <span class="keyword">new</span> King();</span><br><span class="line">        Soldier soldier = <span class="keyword">new</span> Soldier();</span><br><span class="line">        <span class="comment">// 请求者请求命令</span></span><br><span class="line">        king.invoke(<span class="keyword">new</span> AttackCommand(soldier));</span><br><span class="line">        <span class="comment">// 请求者发起命令</span></span><br><span class="line">        king.action();</span><br><span class="line">        king.invoke(<span class="keyword">new</span> RetreatCommand(soldier));</span><br><span class="line">        king.action();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;设计模式之命令模式&quot;&gt;&lt;a href=&quot;#设计模式之命令模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式之命令模式&quot;&gt;&lt;/a&gt;设计模式之命令模式&lt;/h1&gt;&lt;p&gt;命令模式是对象的行为模式，命令模式将一个请求封装成一个对象，从而让你使用不同的请求把
      
    
    </summary>
    
      <category term="设计模式" scheme="https://nanyiniu.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="Java" scheme="https://nanyiniu.github.io/tags/Java/"/>
    
      <category term="设计模式" scheme="https://nanyiniu.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之迭代器模式</title>
    <link href="https://nanyiniu.github.io/2019/06/27/2019-06-27-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>https://nanyiniu.github.io/2019/06/27/2019-06-27-设计模式之迭代器模式/</id>
    <published>2019-06-27T12:00:00.000Z</published>
    <updated>2019-07-02T11:10:57.403Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式之迭代器模式"><a href="#设计模式之迭代器模式" class="headerlink" title="设计模式之迭代器模式"></a>设计模式之迭代器模式</h1><p>迭代器是一种行为模式，它提供一种顺序访问聚合对象元素的方法，而不会暴露其基础表示。</p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ul><li>指向访问集合对象内容，而不暴露其内部实现。</li><li>可以对集合对象多次遍历</li><li>为不同集合对象提供统一的遍历接口</li></ul><h2 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h2><p>迭代器模式大致分为四个角色：抽象容器，具体容器，抽象迭代器，具体迭代器。结构图如下：</p><p><img src="https://raw.githubusercontent.com/NanYinIU/PicRoom/master/img/20190627224735.png" alt="结构图"></p><p>容器一般为一种数据结构的类，例如list、map。 迭代器是提供遍历这个数据结构的方法的类。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>在java中提供很多Iterator的模式。例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">example</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="number">1</span>);</span><br><span class="line">        list.add(<span class="number">2</span>);</span><br><span class="line">        Iterator iterator = (Iterator) list.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的<code>ArrayList</code>类中实现类<code>Iterator</code>接口的内部类，并且使用<code>iterator()</code>方法调用<code>new Itr();</code>，具体内容可以查看ArrayList源码。</p><p>下面自己实现一个简单的<code>Iterator</code>.</p><h3 id="第一部分：抽象迭代器"><a href="#第一部分：抽象迭代器" class="headerlink" title="第一部分：抽象迭代器"></a>第一部分：抽象迭代器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">E <span class="title">next</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第二部分：抽象容器类"><a href="#第二部分：抽象容器类" class="headerlink" title="第二部分：抽象容器类"></a>第二部分：抽象容器类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Task</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> mark)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">removeLast</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">Iterator&lt;Object&gt; <span class="title">iterator</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第三部分：实现类"><a href="#第三部分：实现类" class="headerlink" title="第三部分：实现类"></a>第三部分：实现类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTask</span> <span class="keyword">implements</span> <span class="title">Task</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size = <span class="number">0</span> ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object[] taskTag = <span class="keyword">new</span> Object[<span class="number">16</span>];</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> mark)</span> </span>&#123;</span><br><span class="line">        taskTag[size] = mark;</span><br><span class="line">        size ++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        taskTag[--size] = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;Object&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 调用内部类实现迭代器</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyTaskItr();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 使用内部类实现迭代器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTaskItr</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">Object</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> curr;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> size != curr;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> i = curr;</span><br><span class="line">            <span class="keyword">if</span>(i &gt;= size)&#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(<span class="string">"no element"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> taskTag[curr++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="客户端调用"><a href="#客户端调用" class="headerlink" title="客户端调用"></a>客户端调用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Task task = <span class="keyword">new</span> MyTask();</span><br><span class="line">        task.add(<span class="number">1</span>);</span><br><span class="line">        task.add(<span class="number">3</span>);</span><br><span class="line">        task.add(<span class="number">4</span>);</span><br><span class="line">        task.add(<span class="number">2</span>);</span><br><span class="line">        task.removeLast();</span><br><span class="line">        task.removeLast();</span><br><span class="line">        task.add(<span class="number">5</span>);</span><br><span class="line">        Iterator taskIterator = task.iterator();</span><br><span class="line">        <span class="keyword">while</span>(taskIterator.hasNext())&#123;</span><br><span class="line">            System.out.println(taskIterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 结果依次打印出 1，3，5</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单而强大的迭代器模式。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;设计模式之迭代器模式&quot;&gt;&lt;a href=&quot;#设计模式之迭代器模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式之迭代器模式&quot;&gt;&lt;/a&gt;设计模式之迭代器模式&lt;/h1&gt;&lt;p&gt;迭代器是一种行为模式，它提供一种顺序访问聚合对象元素的方法，而不会暴露其基础
      
    
    </summary>
    
      <category term="设计模式" scheme="https://nanyiniu.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="Java" scheme="https://nanyiniu.github.io/tags/Java/"/>
    
      <category term="设计模式" scheme="https://nanyiniu.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>PlantUML类图使用总结</title>
    <link href="https://nanyiniu.github.io/2019/06/26/2019-06-26-PlantUML%E7%B1%BB%E5%9B%BE%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"/>
    <id>https://nanyiniu.github.io/2019/06/26/2019-06-26-PlantUML类图使用总结/</id>
    <published>2019-06-26T12:00:00.000Z</published>
    <updated>2019-06-27T12:33:40.254Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用PlantUML绘制类图"><a href="#使用PlantUML绘制类图" class="headerlink" title="使用PlantUML绘制类图"></a>使用PlantUML绘制类图</h1><p>本文基于PlantUML官网<a href="http://plantuml.com/zh/class-diagram" target="_blank" rel="noopener">绘制类图</a>和相关如何正确uml类图相关文章。</p><h2 id="为什么使用plantUml"><a href="#为什么使用plantUml" class="headerlink" title="为什么使用plantUml"></a>为什么使用plantUml</h2><p>原因很简单，不用自己考虑构图，像写代码一样写出来，图出来既美观又能够符合逻辑。</p><h2 id="基本类构成"><a href="#基本类构成" class="headerlink" title="基本类构成"></a>基本类构成</h2><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p><img src="https://raw.githubusercontent.com/NanYinIU/PicRoom/master/img/20190626150930.png" alt="基本类构成"></p><p>使用<code>class</code>关键字构件类，同理其他关键字。如<code>interface</code>,<code>enum</code>。</p><p>在类中使用 <code>- # +</code> 分别对应表示类中的<code>private</code>,<code>protected</code>,<code>public</code>。如果在类中使用 <code>static</code>、<code>abstract</code>关键字，需要使用大括号包裹起来。</p><p><strong>备注</strong>使用<code>note</code>来实现，可以使用js优化备注的样式,具体可以参考下面的代码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line">&apos; 简单定义类A</span><br><span class="line">class classA</span><br><span class="line">&apos;定义类B</span><br><span class="line">class classB&#123;</span><br><span class="line">    -&#123;static&#125; STATIC:Type</span><br><span class="line">    -a:A</span><br><span class="line">    #b:B</span><br><span class="line">    +c:C</span><br><span class="line">    +hello():void</span><br><span class="line">    -word():void</span><br><span class="line">&#125;</span><br><span class="line">&apos;抽象类C</span><br><span class="line">abstract class classC &#123;</span><br><span class="line">    + &#123;abstract&#125; method1:void</span><br><span class="line">&#125;</span><br><span class="line">&apos;备注</span><br><span class="line">note right: note on right</span><br><span class="line">note top of classA : note on top</span><br><span class="line">&apos; 复杂备注</span><br><span class="line">note top of object</span><br><span class="line">In java, &lt;size:18&gt;every&lt;/size&gt; &lt;u&gt;class&lt;/u&gt;&lt;b&gt;extends&lt;/b&gt;&lt;i&gt;this&lt;/i&gt; one.</span><br><span class="line">end note</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure><h3 id="类更多使用"><a href="#类更多使用" class="headerlink" title="类更多使用"></a>类更多使用</h3><p><img src="https://raw.githubusercontent.com/NanYinIU/PicRoom/master/img/20190626144335.png" alt="复杂"></p><p>更复杂一些的类的构件参考上图。</p><p>使用<code>__内容__</code>来表示分割线，对不同类型的进行分割。在类名后加<code>&lt;? extends xxx&gt;</code> 表示范型,参考下面代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line">class classC &lt;&lt;Serializable&gt;&gt; &#123;</span><br><span class="line">__variable__</span><br><span class="line">    -a:A</span><br><span class="line">    #b:B</span><br><span class="line">    +c:C</span><br><span class="line">__methods__</span><br><span class="line">    +hello():void</span><br><span class="line">    -word():void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class classD &lt;? extends List&gt;&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure><h3 id="关系表示"><a href="#关系表示" class="headerlink" title="关系表示"></a>关系表示</h3><h4 id="继承与实现"><a href="#继承与实现" class="headerlink" title="继承与实现"></a>继承与实现</h4><p><img src="https://raw.githubusercontent.com/NanYinIU/PicRoom/master/img/20190626144700.png" alt="继承与实现"></p><p>继承指的就是<strong>泛化</strong>，如图中左表示一样，类A继承于B，由子类实现父类的行为。泛化使用带<strong>大三角箭头和实线</strong>来表示，表示一种继承关系。</p><p><strong>实现</strong>指的是特定类实现接口，如图中右表示一样，类<code>implement</code>实现<code>interface</code>,表示实现类实现接口类的关系。同样会由子类实现接口类中的行为。实现使用带<strong>大三角的箭头和虚线</strong>来实现。</p><p>无论是继承还是实现，箭头都执行夫类，也就是被实现类。</p><h4 id="依赖与关联"><a href="#依赖与关联" class="headerlink" title="依赖与关联"></a>依赖与关联</h4><p><img src="https://raw.githubusercontent.com/NanYinIU/PicRoom/master/img/20190626160514.png" alt="依赖与关联"></p><p>使用plantUML代码实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line">&apos;依赖与关联</span><br><span class="line">Class X</span><br><span class="line">&apos; 依赖关系</span><br><span class="line">X ..&gt; Y :&quot;依赖关系&quot;</span><br><span class="line"></span><br><span class="line">class A</span><br><span class="line">&apos; 单向关联 A关联B</span><br><span class="line">A--&gt; B :&quot;单向关联&quot;</span><br><span class="line">&apos; 双向关联</span><br><span class="line">class C</span><br><span class="line">C --  D : &quot;双向关联&quot;</span><br><span class="line">&apos; 自关联</span><br><span class="line">class F</span><br><span class="line">F --&gt; F:&quot;自关联&quot;</span><br><span class="line">&apos; 聚合关系</span><br><span class="line">class G &#123;</span><br><span class="line">List&lt;H&gt; h</span><br><span class="line">&#125;</span><br><span class="line">G &quot;n&quot; o-- &quot;1&quot; H : &quot;组合关系&quot;</span><br><span class="line">&apos; 组合关系</span><br><span class="line">class K &#123;</span><br><span class="line">List&lt;L&gt; l</span><br><span class="line">&#125;</span><br><span class="line">K &quot;n&quot;*--&quot;1&quot; L :&quot;聚合关系&quot;</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure><h5 id="一、依赖关系"><a href="#一、依赖关系" class="headerlink" title="一、依赖关系"></a>一、依赖关系</h5><p>依赖是一种使用的关系，代码中体现到依赖的关系的情况:<code>局部变量</code>、<code>方法的参数或者对静态方法的调用</code>,依赖是最弱的一种关联。依赖关系使用虚线和普通的小箭头来实现，箭头指向被依赖的对象。如图中的x依赖y一样，所以指向y,这个被x依赖的对象。</p><h5 id="二、关联关系"><a href="#二、关联关系" class="headerlink" title="二、关联关系"></a>二、关联关系</h5><p>关联是拥有的关系，如玩家与游戏中的角色一样。关联可能是单向的，也可能是双向的，也同样能够自己关联自己。代码中体现到关联的关系的情况：<code>成员变量</code>。关联关系使用实线和小尖头来实现，箭头指向被关联的对象。</p><h5 id="三、组合关系"><a href="#三、组合关系" class="headerlink" title="三、组合关系"></a>三、组合关系</h5><p>组合关系是<code>整体与部分</code>的关系，但是如果整体不存在，那部分也不能存在。就如同公司与部门一样，公司解散了，部门也就不存在了。和关联关系相同，在代码中的体现也是<code>成员变量</code>。组合关系使用空心的菱形和实线来表示。</p><h5 id="四、聚合关系"><a href="#四、聚合关系" class="headerlink" title="四、聚合关系"></a>四、聚合关系</h5><p>聚合关系是<code>整体与部分</code>的关系，但是和组合关系不同的是，聚合关系中的<code>部分</code>可以脱离整体而存在，就如同麦当劳中的套餐与汉堡一样。在代码中的体现同样是<code>成员变量</code>。聚合关系使用实心的菱形和实线来表示。</p><p>所以可以说聚合关系和组合关系是关系更加确定，更加紧密的关联关系。</p><h5 id="各关系的强弱顺序"><a href="#各关系的强弱顺序" class="headerlink" title="各关系的强弱顺序"></a>各关系的强弱顺序</h5><blockquote><p>泛化= 实现&gt; 组合&gt; 聚合&gt; 关联&gt; 依赖</p></blockquote><p>PlantUML支持更多的更复杂的情景下的图形绘制，具体可以查看<a href="http://plantuml.com/zh/index" target="_blank" rel="noopener">PlantUML的中文网站</a>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;使用PlantUML绘制类图&quot;&gt;&lt;a href=&quot;#使用PlantUML绘制类图&quot; class=&quot;headerlink&quot; title=&quot;使用PlantUML绘制类图&quot;&gt;&lt;/a&gt;使用PlantUML绘制类图&lt;/h1&gt;&lt;p&gt;本文基于PlantUML官网&lt;a href=
      
    
    </summary>
    
      <category term="工具" scheme="https://nanyiniu.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="工具" scheme="https://nanyiniu.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="UML" scheme="https://nanyiniu.github.io/tags/UML/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之备忘录模式</title>
    <link href="https://nanyiniu.github.io/2019/06/25/2019-06-25-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/"/>
    <id>https://nanyiniu.github.io/2019/06/25/2019-06-25-设计模式之备忘录模式/</id>
    <published>2019-06-25T12:00:00.000Z</published>
    <updated>2019-06-26T12:40:43.307Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式之备忘录模式📕"><a href="#设计模式之备忘录模式📕" class="headerlink" title="设计模式之备忘录模式📕"></a>设计模式之备忘录模式📕</h1><p>不违反封装的情况下，捕获并外化对象的内部状态，以便稍后可以将对象恢复到此状态。</p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>必须保存对象状态的快照，以便以后可以将其恢复到该状态</p><h2 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h2><p>模式结构分为三种结构：</p><ol><li><strong>发起人 (Originator)</strong><br>负责创建一个有内部状态的备忘录对象。</li><li><strong>负责人 (Caretaker)</strong><br>负责保存备忘录内容，但是不检查备忘录的内容。</li><li><strong>备忘录 (Memento)</strong><br>保存发起人的内部的状态。</li></ol><p><img src="https://raw.githubusercontent.com/NanYinIU/PicRoom/master/img/20190625232202.png" alt="模式结构"></p><p>上图中的ActionGame为负责人，负责保存状态，Player为发起人负责主动记录备忘录。</p><h3 id="实际场景"><a href="#实际场景" class="headerlink" title="实际场景"></a>实际场景</h3><p>在玩单机游戏的时候，在通过一个关卡的时候，系统会记录你当时的状态信息，如果下一关没通过，会自动还原到上一个记录点从新开始。这种情况下就可以使用备忘录模式记录存档状态，并在适当的时候还原状态。针对此处场景，使用下面代码还原。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="作为发起者的Player"><a href="#作为发起者的Player" class="headerlink" title="作为发起者的Player"></a>作为发起者的Player</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Player</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 游戏状态</span></span><br><span class="line">    <span class="keyword">private</span> GameState gameState;</span><br><span class="line"></span><br><span class="line">    Player(GameState gameState) &#123;</span><br><span class="line">        <span class="keyword">this</span>.gameState = gameState;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置状态</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setGameState</span><span class="params">(GameState gameState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.gameState = gameState;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取状态</span></span><br><span class="line">    <span class="function">GameState <span class="title">getGameState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> gameState;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建存档记录</span></span><br><span class="line">    <span class="function">Memento <span class="title">createMemento</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Memento(gameState);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 回退存档记录</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">retrieveMemento</span><span class="params">(Memento memento)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.gameState = memento.getGameState();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="作为负责人的ActionGame"><a href="#作为负责人的ActionGame" class="headerlink" title="作为负责人的ActionGame"></a>作为负责人的ActionGame</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Game</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">storeGamePoint</span><span class="params">(Memento memento)</span></span>;</span><br><span class="line">    <span class="function">Memento <span class="title">retrieveGamePoint</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActionGame</span> <span class="keyword">implements</span> <span class="title">Game</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Memento memento;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 存档记录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span> nanyin</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span> 17:31 2019-06-26</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> memento 1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">storeGamePoint</span><span class="params">(Memento memento)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.memento = memento;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 还原记录点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span> nanyin</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span> 17:32 2019-06-26</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Memento</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Memento <span class="title">retrieveGamePoint</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.memento;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="作为备忘录的Memento"><a href="#作为备忘录的Memento" class="headerlink" title="作为备忘录的Memento"></a>作为备忘录的Memento</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Memento</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> GameState gameState;</span><br><span class="line">    Memento(GameState gameState) &#123;</span><br><span class="line">        <span class="keyword">this</span>.gameState = gameState;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">GameState <span class="title">getGameState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> gameState;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> GameState &#123;</span><br><span class="line">    DIE,SUCCESS</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="客户端程序"><a href="#客户端程序" class="headerlink" title="客户端程序"></a>客户端程序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个动作类型的游戏</span></span><br><span class="line">        Game actionGame = <span class="keyword">new</span> ActionGame();</span><br><span class="line">        <span class="comment">//玩家通关</span></span><br><span class="line">        Player player = <span class="keyword">new</span> Player(GameState.SUCCESS);</span><br><span class="line">        <span class="comment">//存档</span></span><br><span class="line">        Memento memento = player.createMemento();</span><br><span class="line">        actionGame.storeGamePoint(memento);</span><br><span class="line">        <span class="comment">//此时玩家阵亡</span></span><br><span class="line">        player.setGameState(GameState.DIE);</span><br><span class="line">        System.out.println(player.getGameState());</span><br><span class="line">        <span class="comment">//需要从上一次游戏存档中加载原来的玩家状态</span></span><br><span class="line">        player.retrieveMemento(actionGame.retrieveGamePoint());</span><br><span class="line">        System.out.println(player.getGameState());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在游戏存档后死亡，再重复读存档，得到之前存档之前的状态。游戏不会主动存档和读取存档，只会记录存档中的内容，而玩家会主动从游戏中读取存档，然后恢复到存档的状态。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;设计模式之备忘录模式📕&quot;&gt;&lt;a href=&quot;#设计模式之备忘录模式📕&quot; class=&quot;headerlink&quot; title=&quot;设计模式之备忘录模式📕&quot;&gt;&lt;/a&gt;设计模式之备忘录模式📕&lt;/h1&gt;&lt;p&gt;不违反封装的情况下，捕获并外化对象的内部状态，以便稍后可以将
      
    
    </summary>
    
      <category term="设计模式" scheme="https://nanyiniu.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="Java" scheme="https://nanyiniu.github.io/tags/Java/"/>
    
      <category term="设计模式" scheme="https://nanyiniu.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之状态模式</title>
    <link href="https://nanyiniu.github.io/2019/06/19/2019-06-19-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/"/>
    <id>https://nanyiniu.github.io/2019/06/19/2019-06-19-设计模式之状态模式/</id>
    <published>2019-06-19T12:00:00.000Z</published>
    <updated>2019-06-27T12:46:33.936Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式之状态模式"><a href="#设计模式之状态模式" class="headerlink" title="设计模式之状态模式"></a>设计模式之状态模式</h1><p>状态模式是对象的行为模式。状态模式允许一个对象在其内部状态改变的时候改变其行为。这个对象看上去就像是改变了它的类一样。</p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ul><li>对象的行为取决于其状态，并且必须根据该状态在运行时更改其行为。</li><li>通常，几个操作将包含相同的条件结构。State模式将条件的每个分支放在一个单独的类中。可以将对象的状态视为一个对象，它可以独立于其他对象而变化</li></ul><p>概括来说，状态模式将行为包装到具体的状态对象中。每个状态对象是抽象状态的子类。状态模式意图是在改变对象的内部状态的时候，行为随之改变。</p><h2 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h2><p>状态模式分为三种结构：环境角色、抽象状态角色、具体状态角色</p><p><img src="https://raw.githubusercontent.com/NanYinIU/PicRoom/master/img/20190618203143.png" alt="状态模式结构图"></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>电灯有两种基本行为 开启、关闭。但是有两个状态，正常和坏掉的状态。将共同的行为封装到统一的状态接口中，再根据不同的状态，创建子类完成不同状态形成不同的行为。</p><p>灯再正常状态下能够正常开启，正常关闭。等在坏掉的状态下，不能开启和关闭。状态模式就是根据这个逻辑抽离行为，将具体行为包装到具体状态对象中。</p><h3 id="抽象状态角色"><a href="#抽象状态角色" class="headerlink" title="抽象状态角色"></a>抽象状态角色</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">State</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">open</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="具体状态角色"><a href="#具体状态角色" class="headerlink" title="具体状态角色"></a>具体状态角色</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NormalState</span> <span class="keyword">implements</span> <span class="title">State</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"电灯开了！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"电灯关了！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ErrorState</span> <span class="keyword">implements</span> <span class="title">State</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"电灯开不了！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"电灯关不了！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="环境角色"><a href="#环境角色" class="headerlink" title="环境角色"></a>环境角色</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Context</span> </span>&#123;</span><br><span class="line">    <span class="comment">//状态参数</span></span><br><span class="line">    State state;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Context</span><span class="params">(State state)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.state = state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestToOpen</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        state.open();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestToClose</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        state.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//状态变化</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changeStageTo</span><span class="params">(State state)</span></span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.state = state;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="客户端测试"><a href="#客户端测试" class="headerlink" title="客户端测试"></a>客户端测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Context context = <span class="keyword">new</span> Context(<span class="keyword">new</span> NormalState());</span><br><span class="line">        context.requestToOpen();</span><br><span class="line">        context.requestToClose();</span><br><span class="line">        <span class="comment">//将状态变更为坏的状态</span></span><br><span class="line">        context.changeStageTo(<span class="keyword">new</span> ErrorState());</span><br><span class="line">        context.requestToOpen();</span><br><span class="line">        context.requestToClose();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;设计模式之状态模式&quot;&gt;&lt;a href=&quot;#设计模式之状态模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式之状态模式&quot;&gt;&lt;/a&gt;设计模式之状态模式&lt;/h1&gt;&lt;p&gt;状态模式是对象的行为模式。状态模式允许一个对象在其内部状态改变的时候改变其行为。这个
      
    
    </summary>
    
      <category term="设计模式" scheme="https://nanyiniu.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="Java" scheme="https://nanyiniu.github.io/tags/Java/"/>
    
      <category term="设计模式" scheme="https://nanyiniu.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之观察者模式</title>
    <link href="https://nanyiniu.github.io/2019/06/19/2019-06-24-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>https://nanyiniu.github.io/2019/06/19/2019-06-24-设计模式之观察者模式/</id>
    <published>2019-06-19T12:00:00.000Z</published>
    <updated>2019-06-24T13:17:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式之观察者模式"><a href="#设计模式之观察者模式" class="headerlink" title="设计模式之观察者模式"></a>设计模式之观察者模式</h1><p>观察者模式是对象的行为模式，又叫“发布-订阅模式”。由名字就能够得知，观察这模式构造了一个发布者和订阅者。</p><p>观察者模式定义对象之间的一对多依赖关系，以便当一个对象更改状态时，将自动通知和更新其所有依赖项。在观察者模式中，主动发生改变的是发布者称为主题，而被动收到发布者信息的订阅者称为观察者对象，可以根据需要添加/减少具体主题的观察者，实现主题和观察者之间的松耦合。</p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ul><li><p>当设计中有两种不同方面的抽象，并且是有依赖关系的，这时将两个抽象分别封装到具体的类中，这样就能够独立的改变和重用这些对象。在观察者模式中两种抽象指的就是抽象主题和抽象观察者。</p></li><li><p>当一个对象需要更改时，涉及到更改其他类型的其他对象，并且这些对象的数量多且不确定的时候。</p></li><li><p>当一个对象改变时，其他对象能够得到这个对象已经改变的通知，而不必知道这些对象具体是什么。也就是说要达到这个改变的对象和通知的对象的松耦合。</p><p>  <strong>所以综上:</strong><br>  当希望一个对象改变的同时，多个对象能够得到通知，一块进行变更时，可以使用观察者模式对系统设计</p></li></ul><h2 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h2><p><img src="https://raw.githubusercontent.com/NanYinIU/PicRoom/master/img/20190624203405.png" alt="观察者模式结构图"></p><p>上图中：</p><ol><li><code>Weather</code>为<strong>抽象主题类</strong>，能够将观察者<code>Observer</code>构成一个<code>list</code>结构,从而能够达到<code>Weather</code>改变的时候可以循环表中的观察者，发送通知。并且作为抽象类实现了添加，移除观察者方法。</li><li><code>BeijingWeather</code>为<strong>具体主题类</strong>，实现了<code>Weather</code>类。</li><li><code>Observer</code>作为<strong>抽象观察者类</strong>，作为所有观察者的通用接口，其中定义<code>update</code>方法作为更新状态的接口。通过这个接口和<code>Weather</code>类交互来获取状态通知。</li><li><code>WeatherObserverA</code>与<code>WeatherObserverB</code>作为<strong>具体观察者类</strong>，实现类观察者接口。统一接受通知并更新自身状态。</li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h4 id="第一部分：抽象主题类"><a href="#第一部分：抽象主题类" class="headerlink" title="第一部分：抽象主题类"></a>第一部分：抽象主题类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 状态枚举类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> WeatherState &#123;</span><br><span class="line">    SUNNY_DAY,</span><br><span class="line">    CLOUDY_DAY,</span><br><span class="line">    RAINY_DAY,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 抽象主题类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Weather</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> WeatherState weatherState;</span><br><span class="line">    <span class="comment">// 观察者集合</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Observer&gt; observerList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Weather <span class="title">addObserver</span><span class="params">(Observer observer)</span></span>&#123;</span><br><span class="line">        observerList.add(observer);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(Observer observer)</span></span>&#123;</span><br><span class="line">        observerList.remove(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过主题更改从而在该主题上注册的观察者能够同时能到通知</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObserver</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Observer o:observerList</span><br><span class="line">             ) &#123;</span><br><span class="line">            o.update(<span class="keyword">this</span>.weatherState);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="第二部分：具体主题类"><a href="#第二部分：具体主题类" class="headerlink" title="第二部分：具体主题类"></a>第二部分：具体主题类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeijingWeather</span> <span class="keyword">extends</span> <span class="title">Weather</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    BeijingWeather(WeatherState weatherState) &#123;</span><br><span class="line">        <span class="keyword">this</span>.weatherState = weatherState;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//作为更新主题的接口</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changeState</span><span class="params">(WeatherState we)</span></span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.weatherState = we;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="第三部分：抽象观察者"><a href="#第三部分：抽象观察者" class="headerlink" title="第三部分：抽象观察者"></a>第三部分：抽象观察者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 更新接口</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(WeatherState weatherState)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="第四部分：-具体观察者"><a href="#第四部分：-具体观察者" class="headerlink" title="第四部分： 具体观察者"></a>第四部分： 具体观察者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherObserverA</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(WeatherState weatherState)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"observer A get new weather message is "</span> + weatherState.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="最后调用"><a href="#最后调用" class="headerlink" title="最后调用"></a>最后调用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 定义主题</span></span><br><span class="line">        Weather weather = <span class="keyword">new</span> BeijingWeather(WeatherState.SUNNY_DAY);</span><br><span class="line">        <span class="comment">//添加观察者</span></span><br><span class="line">        weather.addObserver(<span class="keyword">new</span> WeatherObserverA()).addObserver(<span class="keyword">new</span> WeatherObserverB());</span><br><span class="line">        <span class="comment">//通知所有观察者</span></span><br><span class="line">        weather.notifyObserver();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：最后注册在主题上的所有观察者都收到了通知。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">observer A get new weather message is SUNNY_DAY</span><br><span class="line">observer B get new weather message is SUNNY_DAY</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;设计模式之观察者模式&quot;&gt;&lt;a href=&quot;#设计模式之观察者模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式之观察者模式&quot;&gt;&lt;/a&gt;设计模式之观察者模式&lt;/h1&gt;&lt;p&gt;观察者模式是对象的行为模式，又叫“发布-订阅模式”。由名字就能够得知，观察这
      
    
    </summary>
    
      <category term="设计模式" scheme="https://nanyiniu.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="Java" scheme="https://nanyiniu.github.io/tags/Java/"/>
    
      <category term="设计模式" scheme="https://nanyiniu.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Mac下使用idea时在dock栏一直存在java图标和控制台乱码问题</title>
    <link href="https://nanyiniu.github.io/2019/06/18/2019-06-18-Mac%E4%B8%8Bidea%E5%9C%A8Dock%E6%A0%8F%E4%B8%80%E7%9B%B4%E5%AD%98%E5%9C%A8%E5%9B%BE%E6%A0%87%E5%92%8C%E6%8E%A7%E5%88%B6%E5%8F%B0%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/"/>
    <id>https://nanyiniu.github.io/2019/06/18/2019-06-18-Mac下idea在Dock栏一直存在图标和控制台中文乱码问题/</id>
    <published>2019-06-18T12:00:00.000Z</published>
    <updated>2019-06-19T14:34:46.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mac下使用Idea相关问题"><a href="#Mac下使用Idea相关问题" class="headerlink" title="Mac下使用Idea相关问题"></a>Mac下使用Idea相关问题</h1><h2 id="使用tomcat启动IDEA项目后，dock栏一直存在JAVA图标问题"><a href="#使用tomcat启动IDEA项目后，dock栏一直存在JAVA图标问题" class="headerlink" title="使用tomcat启动IDEA项目后，dock栏一直存在JAVA图标问题"></a>使用tomcat启动IDEA项目后，dock栏一直存在JAVA图标问题</h2><p>在mac上启动idea后，存在dock栏一直存在JAVA图标的问题，如下图：</p><p><img src="https://raw.githubusercontent.com/NanYinIU/PicRoom/master/img/20190618081946.png" alt="Dock栏存在java图标问题"></p><p>解决方式：</p><p><img src="https://raw.githubusercontent.com/NanYinIU/PicRoom/master/img/20190618082435.png" alt="存在图标解决方式"></p><p>打开<code>Run/Debug configurations</code>,在<code>vm options</code>中添加如下内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Dapple.awt.UIElement=<span class="keyword">true</span></span><br></pre></td></tr></table></figure><h2 id="启动IDEA后，控制台乱码"><a href="#启动IDEA后，控制台乱码" class="headerlink" title="启动IDEA后，控制台乱码"></a>启动IDEA后，控制台乱码</h2><p><img src="https://raw.githubusercontent.com/NanYinIU/PicRoom/master/img/20190618082124.png" alt="控制台乱码"></p><p>解决方式和上一个问题相同，同样在vm options中增加参数，具体参数如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Dfile.encoding=UTF-<span class="number">8</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Mac下使用Idea相关问题&quot;&gt;&lt;a href=&quot;#Mac下使用Idea相关问题&quot; class=&quot;headerlink&quot; title=&quot;Mac下使用Idea相关问题&quot;&gt;&lt;/a&gt;Mac下使用Idea相关问题&lt;/h1&gt;&lt;h2 id=&quot;使用tomcat启动IDEA项目后
      
    
    </summary>
    
      <category term="工具" scheme="https://nanyiniu.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="idea" scheme="https://nanyiniu.github.io/tags/idea/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之模版模式</title>
    <link href="https://nanyiniu.github.io/2019/06/17/2019-06-17-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%A8%A1%E7%89%88%E6%A8%A1%E5%BC%8F/"/>
    <id>https://nanyiniu.github.io/2019/06/17/2019-06-17-设计模式之模版模式/</id>
    <published>2019-06-17T12:00:00.000Z</published>
    <updated>2019-06-19T14:34:57.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式之模版方法模式"><a href="#设计模式之模版方法模式" class="headerlink" title="设计模式之模版方法模式"></a>设计模式之模版方法模式</h1><p>模版模式是类的行为模式，将部分逻辑以具体方法来实现，将其他方法声明为抽象方法来让子类来实现。不同的子类实现的方法逻辑不同，从而整体的逻辑有所差异。</p><p>这里涉及到两个角色：</p><p>一、抽象模板(Abstract Template)角色有如下责任：</p><pre><code>- 定义了一个或多个抽象操作，以便让子类实现。这些抽象操作叫做基本操作，它们是一个顶级逻辑的组成步骤。- 定义并实现了一个模板方法。这个模板方法一般是一个具体方法，它给出了一个顶级逻辑的骨架，而逻辑的组成步骤在相应的抽象操作中，推迟到子类实现。顶级逻辑也有可能调用一些具体方法。</code></pre><p>二、具体模板(Concrete Template)角色又如下责任：</p><pre><code>- 实现父类所定义的一个或多个抽象方法，它们是一个顶级逻辑的组成步骤。- 每一个抽象模板角色都可以有任意多个具体模板角色与之对应，而每一个具体模板角色都可以给出这些抽象方法（也就是顶级逻辑的组成步骤）的不同实现，从而使得顶级逻辑的实现各不相同。</code></pre><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p> 实现不变的部分一次，并将其他留给子类来实现可能需要变化的行为。</p><ul><li>需要简化代码，分离出公共的部分，抽离出一个公共的模板方法来替换所有的代码。</li><li>控制子类扩展。定义在特定点调用“钩子”操作的模板方法，从而仅允许在那些点进行扩展。</li></ul><h2 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h2><p>这里使用到模拟servlet中的httpServlet方法（简单的模拟方法中用到的模版方法）。定义一个公共的模版方法抽象类<code>HttpServletTemplate</code>，其中有两个钩子方法<code>doGet</code>和<code>doPost</code>，所谓的钩子方法就是需要由子类实现的方法。还有一个具体方法<code>service</code>来实现模版调用的作用。</p><p>模拟两个子类实现<code>HttpServletTemplate</code>实现两个钩子方法。</p><p>客户端<code>App</code>在调用的时候，直接调用两个子类的父类中的实现方法<code>service</code>实现调用模版。</p><p><img src="https://raw.githubusercontent.com/NanYinIU/PicRoom/master/img/20190617221808.png" alt="模版模式结构"></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="抽象模版类"><a href="#抽象模版类" class="headerlink" title="抽象模版类"></a>抽象模版类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpServletTemplate</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpRequestMethod method)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(method.equals(HttpRequestMethod.METHOD_GET))&#123;</span><br><span class="line">            System.out.println(<span class="string">"so something 1"</span>);</span><br><span class="line">            doGet();</span><br><span class="line">            System.out.println(<span class="string">"so something 2"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(method.equals(HttpRequestMethod.METHOD_POST))&#123;</span><br><span class="line">            doPost();</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"do nothing!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="具体模版类"><a href="#具体模版类" class="headerlink" title="具体模版类"></a>具体模版类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetClient</span> <span class="keyword">extends</span> <span class="title">HttpServletTemplate</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"this is my get methods!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PostClient</span> <span class="keyword">extends</span> <span class="title">HttpServletTemplate</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"this is my post methods!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 请求类型枚举类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> HttpRequestMethod &#123;</span><br><span class="line">    METHOD_GET,METHOD_POST,METHOD_DELETE</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="客户端调用"><a href="#客户端调用" class="headerlink" title="客户端调用"></a>客户端调用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//声明post客户端</span></span><br><span class="line">        PostClient post = <span class="keyword">new</span> PostClient();</span><br><span class="line">        <span class="comment">//调用模版</span></span><br><span class="line">        post.service(HttpRequestMethod.METHOD_POST);</span><br><span class="line">        GetClient get = <span class="keyword">new</span> GetClient();</span><br><span class="line">        get.service(HttpRequestMethod.METHOD_GET);</span><br><span class="line">        get.service(HttpRequestMethod.METHOD_POST);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实模版方法模式是创建一个算法的骨架，具体的内容由子类去填充的这个过程。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;设计模式之模版方法模式&quot;&gt;&lt;a href=&quot;#设计模式之模版方法模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式之模版方法模式&quot;&gt;&lt;/a&gt;设计模式之模版方法模式&lt;/h1&gt;&lt;p&gt;模版模式是类的行为模式，将部分逻辑以具体方法来实现，将其他方法声明为
      
    
    </summary>
    
      <category term="设计模式" scheme="https://nanyiniu.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="Java" scheme="https://nanyiniu.github.io/tags/Java/"/>
    
      <category term="设计模式" scheme="https://nanyiniu.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之访问者模式</title>
    <link href="https://nanyiniu.github.io/2019/06/15/2019-06-15-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>https://nanyiniu.github.io/2019/06/15/2019-06-15-设计模式之访问者模式/</id>
    <published>2019-06-15T12:00:00.000Z</published>
    <updated>2019-06-19T14:35:05.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式之访问者模式"><a href="#设计模式之访问者模式" class="headerlink" title="设计模式之访问者模式"></a>设计模式之访问者模式</h1><p>访问者模式是一种复杂的行为模式。表示要对对象结构的元素执行的操作。访问者允许对对象结构中的节点定义新操作，而无需更改其操作的元素的类。</p><p>适用于数据结构相对未定的系统，它把数据结构和作用于结构上的操作之间的耦合解脱开，使得操作集合可以相对自由地演化。</p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>当遇到如下情况时，可以优先考虑使用访问者模式：</p><ol><li>对象结构中包含许多具有不同接口的对象类，并且希望对依赖于其具体类的这些对象执行操作。</li><li>需要对对象结构中的对象执行许多不同且不相关的操作，并且希望避免使用这些操作“污染”它们的类。这时就可以定义多个visitor类来完成对多个对象节点的处理。</li><li>定义对象结构的类很少改变，但是你经常想要在结构上定义新的操作。</li></ol><h2 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h2><p><strong>举个例子</strong>：在公司中，需要统计打卡记录和绩效，分别有行政部门和财务部门来实现。并且将来可能有质量部门监测研发和实施人员的工作质量。但是对研发和实施人员的考核标准有所不同。</p><h3 id="一、类图"><a href="#一、类图" class="headerlink" title="一、类图"></a>一、类图</h3><p><img src="https://raw.githubusercontent.com/NanYinIU/PicRoom/master/img/20190616105829.png" alt="类图"></p><p><code>OperateStructure</code>作为对象<code>OperateNode</code>的数据结构,并且实现类<code>OperateNodeA</code>和<code>OperateNodeB</code>行为方法有各自的实现。并且想基于这个相对固定的数据结构实现多种不同的操作<code>（visitor）</code>。这样在增加<code>visitor</code>的时候不必考虑数据结构会发生变更。</p><h3 id="二、时序"><a href="#二、时序" class="headerlink" title="二、时序"></a>二、时序</h3><p>由于调用过程比较不容易看透，这里我先使用时序图来说明调用顺序</p><p><img src="https://raw.githubusercontent.com/NanYinIU/PicRoom/master/img/20190616112121.png" alt="调用过程时序"></p><h2 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a>代码实例</h2><p>根据类图可以看出，访问者模式分为五部分：抽象节点角色 、具体节点角色 、抽象访问者角色 、具体访问者角色 、结构对象角色</p><ul><li>抽象节点角色：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">OperateNode</span> </span>&#123;</span><br><span class="line"><span class="comment">//  定义节点内都需要实现的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor visitor)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>具体节点角色：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 具体节点A 在实例中对应研发人员</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OperateNodeA</span> <span class="keyword">extends</span> <span class="title">OperateNode</span> </span>&#123;</span><br><span class="line">    <span class="comment">//绩效系数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">double</span> COEFFICIENT = <span class="number">1.2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> workDate;</span><br><span class="line"></span><br><span class="line">    OperateNodeA(<span class="keyword">int</span> workDate) &#123;</span><br><span class="line">        <span class="keyword">this</span>.workDate = workDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor visitor)</span> </span>&#123;</span><br><span class="line">        visitor.visit(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">attendance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> workDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">performance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> workDate * COEFFICIENT;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 具体节点B，在实例中对应运维人员</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OperateNodeB</span> <span class="keyword">extends</span> <span class="title">OperateNode</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> COEFFICIENT = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> workDate;</span><br><span class="line"></span><br><span class="line">    OperateNodeB(<span class="keyword">int</span> workDate) &#123;</span><br><span class="line">        <span class="keyword">this</span>.workDate = workDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor visitor)</span> </span>&#123;</span><br><span class="line">        visitor.visit(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">attendance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> workDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">performance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> workDate * COEFFICIENT;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>抽象访问者角色</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//针对结构中每一个节点分别进行各自的操作</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Visitor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">(OperateNodeA operateNodeA)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">(OperateNodeB operateNodeB)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>具体访问者角色</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 行政人员结算考勤</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VisitorA</span> <span class="keyword">implements</span> <span class="title">Visitor</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 需要对实施人员增加路上的考勤时间 模式为2</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BASIC = <span class="number">2</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(OperateNodeA operateNodeA)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> att = operateNodeA.attendance();</span><br><span class="line">        System.out.println(<span class="string">"本月该研发人员考勤为"</span>+att + <span class="string">"天"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(OperateNodeB operateNodeB)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> att =operateNodeB.attendance() + BASIC;</span><br><span class="line">        System.out.println(<span class="string">"本月该实施人员考勤为"</span>+att + <span class="string">"天"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//财务人员结算绩效</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VisitorB</span> <span class="keyword">implements</span> <span class="title">Visitor</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 研发需要添加额外绩效</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> EXTRA = <span class="number">2</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(OperateNodeA operateNodeA)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> att = operateNodeA.performance() + EXTRA;</span><br><span class="line">        System.out.println(<span class="string">"本月该研发人员绩效为 :"</span>+att );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(OperateNodeB operateNodeB)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> att =operateNodeB.performance() ;</span><br><span class="line">        System.out.println(<span class="string">"本月该研发人员绩效为 :"</span>+att );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结构对象结构</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperateStructure</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义结构体</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;OperateNode&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(OperateNode operateNode)</span></span>&#123;</span><br><span class="line">        list.add(operateNode);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//对结构体中的对象实现接收访问操作</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">action</span><span class="params">(Visitor visitor)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (OperateNode operateNode : list)&#123;</span><br><span class="line">        <span class="comment">// 目的就是使用双重分派调用来实现</span></span><br><span class="line">        <span class="comment">// 节点接受访问者与访问者访问节点的操作</span></span><br><span class="line">            operateNode.accept(visitor);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>客户端调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Visitor visitorA = <span class="keyword">new</span> VisitorA();</span><br><span class="line">        Visitor visitorB = <span class="keyword">new</span> VisitorB();</span><br><span class="line">        OperateStructure structure = <span class="keyword">new</span> OperateStructure();</span><br><span class="line">        structure.add(<span class="keyword">new</span> OperateNodeA(<span class="number">22</span>));</span><br><span class="line">        structure.add(<span class="keyword">new</span> OperateNodeB(<span class="number">22</span>));</span><br><span class="line">        structure.action(visitorA);</span><br><span class="line">        structure.action(visitorB);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">本月该研发人员考勤为22天</span><br><span class="line">本月该实施人员考勤为24天</span><br><span class="line">本月该研发人员绩效为 :28.4</span><br><span class="line">本月该研发人员绩效为 :22.0</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;设计模式之访问者模式&quot;&gt;&lt;a href=&quot;#设计模式之访问者模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式之访问者模式&quot;&gt;&lt;/a&gt;设计模式之访问者模式&lt;/h1&gt;&lt;p&gt;访问者模式是一种复杂的行为模式。表示要对对象结构的元素执行的操作。访问者允许
      
    
    </summary>
    
      <category term="设计模式" scheme="https://nanyiniu.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="Java" scheme="https://nanyiniu.github.io/tags/Java/"/>
    
      <category term="设计模式" scheme="https://nanyiniu.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之代理模式</title>
    <link href="https://nanyiniu.github.io/2019/06/14/2019-06-14-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    <id>https://nanyiniu.github.io/2019/06/14/2019-06-14-设计模式之代理模式/</id>
    <published>2019-06-14T12:00:00.000Z</published>
    <updated>2019-06-26T02:35:38.694Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式之代理模式"><a href="#设计模式之代理模式" class="headerlink" title="设计模式之代理模式"></a>设计模式之代理模式</h1><p>代理模式是对象的结构模式。代理模式给某一个对象提供一个代理对象，并由代理对象控制对原对象的引用。</p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ol><li>远程代理不同地址空间的对象，都当作本地化对象来处理</li><li>控制对象的访问权限。</li></ol><p>当遇到一下情况是可以使用代理模式：</p><ul><li>想控制对另一个对象的访问</li><li>懒加载</li><li>控制日志输出</li><li>计算对象引用</li><li>控制网络链接问题</li></ul><h2 id="代理模式模式结构"><a href="#代理模式模式结构" class="headerlink" title="代理模式模式结构"></a>代理模式模式结构</h2><p>浴室分为男浴室和女浴室，其中前台判断能够进入浴室的前提是没有皮肤病，如有没有，才让进入浴室。这里的前台就是一个代理，它代理来浴室，用来判断能否进入浴室的权限。这就是代理的作用。</p><p>代理模式和装饰者模式比较容易混淆。需要记住的是，两者的功能区别在于，代理模式改变的是对象的职能，控制对象的行为。而装饰者模式是对职能的增加和减少。使用场景上有所不同。</p><p><img src="https://raw.githubusercontent.com/NanYinIU/PicRoom/master/img/20190614132147.png" alt="代理模式结构图"></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>代理模式大致能够分为三部分：抽象职能类，代理类，被代理类</p><p>第一部分：抽象职能类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Person 基本信息类 和性别枚举 </span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SexEnum sex;</span><br><span class="line">    <span class="comment">//是否有皮肤病</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> hasSkinDisease;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, SexEnum sex, <span class="keyword">int</span> hasSkinDisease)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">        <span class="keyword">this</span>.hasSkinDisease = hasSkinDisease;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SexEnum <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getHasSkinDisease</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hasSkinDisease;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> SexEnum &#123;</span><br><span class="line">    MALE,FEMALE</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//抽象职能</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BathRoom</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 去澡堂泡澡</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> BathRoom <span class="title">enterBathroom</span><span class="params">(Person person)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二部分：被代理类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MaleBathRoom</span> <span class="keyword">extends</span> <span class="title">BathRoom</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BathRoom <span class="title">enterBathroom</span><span class="params">(Person p)</span> </span>&#123;</span><br><span class="line">        String sexName = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">if</span>(SexEnum.MALE.equals(p.getSex()))&#123;</span><br><span class="line">            sexName = SexEnum.MALE.toString();</span><br><span class="line">            System.out.println(<span class="string">"name : "</span>+ p.getName() +<span class="string">" sex: "</span>+ sexName +<span class="string">" go bath for male !"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三部分：代理类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BathRoomProxy</span> <span class="keyword">extends</span> <span class="title">BathRoom</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    BathRoom bathRoom;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BathRoomProxy</span><span class="params">(BathRoom bathRoom)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bathRoom = bathRoom;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BathRoom <span class="title">enterBathroom</span><span class="params">(Person person)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (person.getHasSkinDisease() == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.bathRoom.enterBathroom(person);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(person.getName() + <span class="string">" has disease."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person p1 = <span class="keyword">new</span> Person(<span class="string">"1"</span>,SexEnum.MALE,<span class="number">0</span>);</span><br><span class="line">        Person p2 = <span class="keyword">new</span> Person(<span class="string">"2"</span>,SexEnum.MALE,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        BathRoomProxy bathRoomProxy = <span class="keyword">new</span> BathRoomProxy(<span class="keyword">new</span> MaleBathRoom());</span><br><span class="line">        bathRoomProxy.enterBathroom(p1).enterBathroom(p2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name : 1 sex: MALE go bath for male !</span><br><span class="line">2 has disease.</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;设计模式之代理模式&quot;&gt;&lt;a href=&quot;#设计模式之代理模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式之代理模式&quot;&gt;&lt;/a&gt;设计模式之代理模式&lt;/h1&gt;&lt;p&gt;代理模式是对象的结构模式。代理模式给某一个对象提供一个代理对象，并由代理对象控制对原
      
    
    </summary>
    
      <category term="设计模式" scheme="https://nanyiniu.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="Java" scheme="https://nanyiniu.github.io/tags/Java/"/>
    
      <category term="设计模式" scheme="https://nanyiniu.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之享元模式</title>
    <link href="https://nanyiniu.github.io/2019/06/13/2019-06-13-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/"/>
    <id>https://nanyiniu.github.io/2019/06/13/2019-06-13-设计模式之享元模式/</id>
    <published>2019-06-13T12:00:00.000Z</published>
    <updated>2019-06-19T14:56:53.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式之享元模式"><a href="#设计模式之享元模式" class="headerlink" title="设计模式之享元模式"></a>设计模式之享元模式</h1><p>享元模式是对象的结构模式。享元模式以共享的方式高效地支持大量的细粒度对象。它用于通过尽可能多地与类似对象共享来最小化内存使用或计算开销。</p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ol><li>应用中需要大量的对象，大量的对象可能造成存储对象的开销。</li><li>对象变化的状态大多是外部状态。一旦外部状态被移除，许多对象组可被相对较少的共享对象替换。这也就是享元模式利用的点。</li><li>因为在享元模式中对象是共享的，所以在含义上的不同对象使用equels实际返回的是true。</li></ol><h2 id="享元模式结构"><a href="#享元模式结构" class="headerlink" title="享元模式结构"></a>享元模式结构</h2><p>享元模式采用一个共享来避免大量拥有相同内容对象的开销。这种开销最常见、最直观的就是内存的损耗。享元对象能做到共享的关键是区分内蕴状态(Internal State)和外蕴状态(External State)。</p><p>内蕴状态决定对象本身的状态，不会随着环境的变化而变化，而外蕰状态是由客户端将状态传递给享元对象的，外蕴状态类似同一个对象的不同的行为，内蕴状态和外蕰状态是相互独立，互不影响的。</p><p>享元模式主要这几三个部分：抽象享元类，具体享元类和享元工厂类。具体可以参考下面代码。</p><p><img src="https://raw.githubusercontent.com/NanYinIU/PicRoom/master/img/20190613005252.png" alt="享元模式"></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>在Java中，String类就符合享元模式，<code>string a = &quot;aa&quot;</code> 和 <code>string b =&quot;aa&quot;</code> 是相等的。</p><p>在下面例子中，构造抽象享元类“MyString” 和它的具体实现类，使用到相同的对象，因为享元模式，可以对这些对象进行共享使用。</p><p>第一部分：抽象享元类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyString</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">create</span><span class="params">(String outerState)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//枚举类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> InstanceType &#123;</span><br><span class="line">    INSTANCE1,INSTANCE2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二部分：具体享元类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringIns1</span> <span class="keyword">implements</span> <span class="title">MyString</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 内部状态，不可随时变化的</span></span><br><span class="line">    String innerState;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StringIns1</span><span class="params">(String innerState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.innerState = innerState;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">create</span><span class="params">(String outerState)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"create instance 1 -&gt; innerState:"</span>+<span class="keyword">this</span>.innerState);</span><br><span class="line">        <span class="comment">//外部状态，需要客户端传进来，这个值是可变化的</span></span><br><span class="line">        System.out.println(<span class="string">"create instance 1 -&gt; outerState:"</span>+outerState);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringIns2</span> <span class="keyword">implements</span> <span class="title">MyString</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    String innerState;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StringIns2</span><span class="params">(String innerState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.innerState = innerState;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">create</span><span class="params">(String outerState)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"create instance 2 -&gt; innerState:"</span>+<span class="keyword">this</span>.innerState);</span><br><span class="line">        System.out.println(<span class="string">"create instance 2 -&gt; outerState:"</span>+outerState);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三部分：享元工厂类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlyWeight</span> </span>&#123;</span><br><span class="line">    Map&lt;InstanceType,MyString&gt; store;</span><br><span class="line"></span><br><span class="line">    FlyWeight() &#123;</span><br><span class="line">        store = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MyString <span class="title">factory</span><span class="params">(InstanceType instanceType)</span></span>&#123;</span><br><span class="line">        MyString curr = store.get(instanceType);</span><br><span class="line">        <span class="keyword">if</span>(curr == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="comment">// 如果对象不存在，新建对应的对象</span></span><br><span class="line">            <span class="keyword">if</span>(instanceType.equals(InstanceType.INSTANCE1))&#123;</span><br><span class="line">            <span class="comment">// 根据内部状态决定生成哪个类型的子类</span></span><br><span class="line">                curr= <span class="keyword">new</span> StringIns1(instanceType.toString());</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(instanceType.equals(InstanceType.INSTANCE2))&#123;</span><br><span class="line">                curr= <span class="keyword">new</span> StringIns2(instanceType.toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        store.put(instanceType,curr);</span><br><span class="line">        <span class="keyword">return</span> curr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第四部分：客户端调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        FlyWeight flyWeight = <span class="keyword">new</span> FlyWeight();</span><br><span class="line">        MyString ins1 = flyWeight.factory(InstanceType.INSTANCE1);</span><br><span class="line">        MyString ins2 = flyWeight.factory(InstanceType.INSTANCE1);</span><br><span class="line">        System.out.println(ins1.equals(ins2));<span class="comment">//true 是同一个对象 内部状态相同</span></span><br><span class="line">        ins1.create(<span class="string">"*****"</span>); <span class="comment">//针对外部状态打印不同内容</span></span><br><span class="line">        ins2.create(<span class="string">"-----"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">true</span><br><span class="line">create instance 1 -&gt; innerState:INSTANCE1</span><br><span class="line">create instance 1 -&gt; outerState:*****</span><br><span class="line">create instance 1 -&gt; innerState:INSTANCE1</span><br><span class="line">create instance 1 -&gt; outerState:-----</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;设计模式之享元模式&quot;&gt;&lt;a href=&quot;#设计模式之享元模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式之享元模式&quot;&gt;&lt;/a&gt;设计模式之享元模式&lt;/h1&gt;&lt;p&gt;享元模式是对象的结构模式。享元模式以共享的方式高效地支持大量的细粒度对象。它用于通过
      
    
    </summary>
    
      <category term="设计模式" scheme="https://nanyiniu.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="Java" scheme="https://nanyiniu.github.io/tags/Java/"/>
    
      <category term="设计模式" scheme="https://nanyiniu.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之外观模式</title>
    <link href="https://nanyiniu.github.io/2019/06/12/2019-06-12-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/"/>
    <id>https://nanyiniu.github.io/2019/06/12/2019-06-12-设计模式之外观模式/</id>
    <published>2019-06-12T12:00:00.000Z</published>
    <updated>2019-06-19T14:57:48.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式之外观模式"><a href="#设计模式之外观模式" class="headerlink" title="设计模式之外观模式"></a>设计模式之外观模式</h1><p>外部与一个子系统的通信必须通过一个统一的外观对象进行，为子系统中的一组接口提供一个一致的界面，使子系统更容易使用。</p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ul><li>因为子系统随着发展会变更的更复杂，客户端想更简单统一给子系统建立一个公共的调用方式。这样即使子系统的再增加可重用性而变得更加复杂，客户端也不必知道，因为客户端往往不需要针对某一个子系统进行特定的定制化。</li><li>实现了子系统与客户之间的松耦合关系，这使得子系统的组件变化不会影响到调用它的客户类，只需要调整外观类即可。</li></ul><h2 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h2><p>外观模式中客户端依靠Facade类来调用多个子系统，来达到简化客户端调用的目的。</p><p><img src="https://raw.githubusercontent.com/NanYinIU/PicRoom/master/img/20190613005252.png" alt="外观模式"></p><p>例子中，每次开机的时候都要启动mysql,apache服务，两个还好，要是有更多服务岂不是很恼人，每次都要敲一大堆命令来开启服务。这时候可以使用外观模式，将所有服务加入到外观类中，每次开机只用调用外观类中的接口就行了。来达到简化客户端使用的目的。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>第一部分：子系统接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Services</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">restart</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// mysql 服务</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MysqlService</span> <span class="keyword">implements</span> <span class="title">Services</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"mysql is started"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"mysql is stopped"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">restart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"mysql is restart"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// apache 服务</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApacheService</span> <span class="keyword">implements</span> <span class="title">Services</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"apache is started"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"apache is stopped"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">restart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"apache is restart"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二部分：外观类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Facade</span> </span>&#123;</span><br><span class="line">    List&lt;Services&gt; services;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Facade</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        services = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addService</span><span class="params">(Services services)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.services.add(services);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Services services : <span class="keyword">this</span>.services)&#123;</span><br><span class="line">            services.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Services services : <span class="keyword">this</span>.services)&#123;</span><br><span class="line">            services.stop();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">restart</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Services services : <span class="keyword">this</span>.services)&#123;</span><br><span class="line">            services.restart();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三部分：客户端调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Facade facade = <span class="keyword">new</span> Facade();</span><br><span class="line">        facade.addService(<span class="keyword">new</span> MysqlService());</span><br><span class="line">        facade.addService(<span class="keyword">new</span> ApacheService());</span><br><span class="line">        facade.start();</span><br><span class="line">        facade.stop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql is started</span><br><span class="line">apache is started</span><br><span class="line">mysql is stopped</span><br><span class="line">apache is stopped</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;设计模式之外观模式&quot;&gt;&lt;a href=&quot;#设计模式之外观模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式之外观模式&quot;&gt;&lt;/a&gt;设计模式之外观模式&lt;/h1&gt;&lt;p&gt;外部与一个子系统的通信必须通过一个统一的外观对象进行，为子系统中的一组接口提供一个一
      
    
    </summary>
    
      <category term="设计模式" scheme="https://nanyiniu.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="Java" scheme="https://nanyiniu.github.io/tags/Java/"/>
    
      <category term="设计模式" scheme="https://nanyiniu.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之装饰者模式</title>
    <link href="https://nanyiniu.github.io/2019/06/10/2019-06-10-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>https://nanyiniu.github.io/2019/06/10/2019-06-10-设计模式之装饰者模式/</id>
    <published>2019-06-10T12:00:00.000Z</published>
    <updated>2019-06-19T14:57:55.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式之装饰者模式"><a href="#设计模式之装饰者模式" class="headerlink" title="设计模式之装饰者模式"></a>设计模式之装饰者模式</h1><p>可以动态地将附加职责附加给对象。装饰器为子类化的方式提供了灵活的替代扩展功能。比如做梦梦到了交个女朋友，她的发型，发色，穿着都是根据场景做梦梦到的时候附加上去的。这时，就应该对“女朋友”这个对象实行装饰者模式来动态的、灵活的拓展。</p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ol><li>动态且透明地向各个对象添加职责的同时不影响其他对象。</li><li>灵活的可撤回职责。</li><li>有时候需要很多子类来用于支持每种功能的组合，这样每次增加一种功能拓展就要增加很多子类的情况。显然这样是不符合要求的。所以遇到这种多功能拓展时，需要使用装饰者模式来解决。</li></ol><h2 id="装饰者模式结构"><a href="#装饰者模式结构" class="headerlink" title="装饰者模式结构"></a>装饰者模式结构</h2><p>装饰者模式可以大致分为四种结构（本例子中的抽象构件和抽象装饰类为一个）抽象构件，具体构件，抽象装饰类，实际装饰类。</p><p><img src="https://raw.githubusercontent.com/NanYinIU/PicRoom/master/img/20190610190339.png" alt="装饰者模式"></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>第一部分：抽象构件与抽象装饰类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 制造一个假想的“女朋友”</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractGirl</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dyeHair</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">wearClothes</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二部分：实现组件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基本的功能实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NormalGirl</span> <span class="keyword">extends</span> <span class="title">AbstractGirl</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dyeHair</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"normal hair"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">wearClothes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"normal clothes"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三部分：附加装饰类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 工作中的女孩 穿正装</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WorkGirl</span> <span class="keyword">extends</span> <span class="title">AbstractGirl</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    AbstractGirl abstractGirl;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WorkGirl</span><span class="params">(AbstractGirl abstractGirl)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.abstractGirl = abstractGirl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">wearClothes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        abstractGirl.wearClothes();</span><br><span class="line">        System.out.println(<span class="string">"wearClothes after : "</span>);</span><br><span class="line">        System.out.println(<span class="string">"wear formal clothes"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实际出去逛街的女孩应该是这样的</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FashionGirl</span> <span class="keyword">extends</span> <span class="title">AbstractGirl</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    AbstractGirl abstractGirl;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FashionGirl</span><span class="params">(AbstractGirl abstractGirl)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.abstractGirl = abstractGirl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dyeHair</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        abstractGirl.dyeHair();</span><br><span class="line">        System.out.println(<span class="string">"dyeHair after : "</span>);</span><br><span class="line">        System.out.println(<span class="string">"dye blue hair"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">wearClothes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        abstractGirl.wearClothes();</span><br><span class="line">        System.out.println(<span class="string">"wearClothes after : "</span> );</span><br><span class="line">        System.out.println(<span class="string">"wear rock type clothes"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        abstractGirl.pack();</span><br><span class="line">        System.out.println(<span class="string">"wearClothes after : "</span> );</span><br><span class="line">        System.out.println(<span class="string">"take fashion pack"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后客户端的调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//先制造一个整体组件</span></span><br><span class="line">        AbstractGirl normalGirl = <span class="keyword">new</span> NormalGirl();</span><br><span class="line">        normalGirl.dyeHair();</span><br><span class="line">        <span class="comment">// 为组件添加装饰，比如这里加了个时尚的包包</span></span><br><span class="line">        AbstractGirl fashionHair = <span class="keyword">new</span> FashionGirl(normalGirl);</span><br><span class="line">        fashionHair.pack();</span><br><span class="line">        <span class="comment">//穿一套正装</span></span><br><span class="line">        AbstractGirl workClose = <span class="keyword">new</span> WorkGirl(fashionHair);</span><br><span class="line">        workClose.wearClothes();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;设计模式之装饰者模式&quot;&gt;&lt;a href=&quot;#设计模式之装饰者模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式之装饰者模式&quot;&gt;&lt;/a&gt;设计模式之装饰者模式&lt;/h1&gt;&lt;p&gt;可以动态地将附加职责附加给对象。装饰器为子类化的方式提供了灵活的替代扩展功能
      
    
    </summary>
    
      <category term="设计模式" scheme="https://nanyiniu.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="Java" scheme="https://nanyiniu.github.io/tags/Java/"/>
    
      <category term="设计模式" scheme="https://nanyiniu.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之桥接模式</title>
    <link href="https://nanyiniu.github.io/2019/06/03/2019-06-03-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>https://nanyiniu.github.io/2019/06/03/2019-06-03-设计模式之桥接模式/</id>
    <published>2019-06-03T12:00:00.000Z</published>
    <updated>2019-06-19T14:58:05.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式之桥接模式"><a href="#设计模式之桥接模式" class="headerlink" title="设计模式之桥接模式"></a>设计模式之桥接模式</h1><p>目的在于将抽象与其实现分离，以便两者可以独立变化。独立变化的同时能够根据抽象类的对象关联从而能够将两个继承结构联动起来。就像在两个结构之间建立个桥梁一样进行通信，所以叫桥接模式。</p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ol><li>如果想避免抽象类与实现的永久绑定，可以在运行时间选择和切换实现类。</li><li>抽象类和接口都应该通过子类来进行拓展，在桥接模式中，可以使用子类来进行组合的同时能够独立拓展他们。</li><li>接口的实现的变化对客户端无影响。</li><li>如果想要在多个对象类中共享实现，并且避免让客户端感知到。</li></ol><h2 id="桥接模式结构图"><a href="#桥接模式结构图" class="headerlink" title="桥接模式结构图"></a>桥接模式结构图</h2><p><img src="https://raw.githubusercontent.com/NanYinIU/PicRoom/master/img/20190603220348.png" alt="桥接模式"></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>主要分为四部分，1.抽象类 2.抽象实现类 3.接口类 4.接口实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 抽象类与抽象实现类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Colors colors;</span><br><span class="line"></span><br><span class="line">    Shape(Colors colors) &#123;</span><br><span class="line">        <span class="keyword">this</span>.colors = colors;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildShape</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 圆形实现类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShapeCircle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ShapeCircle</span><span class="params">(Colors colors)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(colors);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildShape</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"\n first step : build circle\n and second step:"</span>);</span><br><span class="line">        colors.paint();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//方形实现类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShapeSquare</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ShapeSquare</span> <span class="params">(Colors colors)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(colors);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildShape</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"\n first step : build Square\n and second step:"</span>);</span><br><span class="line">        colors.paint();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>抽象方法中引用了Colors类变量，使用实现类中的buildShape方法实现具体功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Colors</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paint</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ColorBlue</span> <span class="keyword">implements</span> <span class="title">Colors</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paint</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">" print blue !!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ColorRed</span> <span class="keyword">implements</span> <span class="title">Colors</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paint</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">" paint inner with red !!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过使用Color接口，实现类实现Colors中的paint方法实现Color</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Shape circle = <span class="keyword">new</span> ShapeCircle(<span class="keyword">new</span> ColorBlue());</span><br><span class="line">        circle.buildShape();</span><br><span class="line">        Shape square = <span class="keyword">new</span> ShapeSquare(<span class="keyword">new</span> ColorRed());</span><br><span class="line">        square.buildShape();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">结果：</span><br><span class="line"></span><br><span class="line"> first step : build circle</span><br><span class="line"> and second step:</span><br><span class="line"> print blue !!</span><br><span class="line"></span><br><span class="line"> first step : build Square</span><br><span class="line"> and second step:</span><br><span class="line"> paint red !!</span><br></pre></td></tr></table></figure><p>上面的例子中，颜色和图形是两个独立不同的维度，两个可以分别变化。将两个维度设计为两个不同的继承的结构，在两个结构之间使用在抽象类中的关联来达到链接的目的，这个链接成为两个继承结构通信的桥梁。所以为桥接模式。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;设计模式之桥接模式&quot;&gt;&lt;a href=&quot;#设计模式之桥接模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式之桥接模式&quot;&gt;&lt;/a&gt;设计模式之桥接模式&lt;/h1&gt;&lt;p&gt;目的在于将抽象与其实现分离，以便两者可以独立变化。独立变化的同时能够根据抽象类的对象
      
    
    </summary>
    
      <category term="设计模式" scheme="https://nanyiniu.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="Java" scheme="https://nanyiniu.github.io/tags/Java/"/>
    
      <category term="设计模式" scheme="https://nanyiniu.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之原型模式</title>
    <link href="https://nanyiniu.github.io/2019/06/02/2019-06-02-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>https://nanyiniu.github.io/2019/06/02/2019-06-02-设计模式之原型模式/</id>
    <published>2019-06-02T12:00:00.000Z</published>
    <updated>2019-06-19T14:58:10.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式之原型模式"><a href="#设计模式之原型模式" class="headerlink" title="设计模式之原型模式"></a>设计模式之原型模式</h1><p>使用原型实例指定要创建的对象类型，并通过复制此原型来创建新对象.实现方法:通过克隆方法,实现对现有对象的复制克隆.</p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ul><li>当要在运行时指定要实例化的类时，例如，通过动态加载.</li><li>避免构建与产品类层次结构相似的工厂类层次结构</li><li>当一个类的实例可以只有几个不同的状态的组合之一时.组装相应数量的原型并克隆它们可能更方便，而不是手动实例化类，每次都有适当的状态.</li><li>与对象创建相比,使用克隆成本更低</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>直接由代码看结构,其实克隆的过程就是创建对象的过程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一个细胞</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> nanyin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 23:49 2019-06-01</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cell</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Cell</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Cell</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Cell <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.clone();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Cell(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端程序:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPrototype</span><span class="params">()</span></span>&#123;</span><br><span class="line">       Cell cell = <span class="keyword">new</span> Cell();</span><br><span class="line">       cell.setName(<span class="string">"org"</span>);</span><br><span class="line">       <span class="keyword">try</span>&#123;</span><br><span class="line">           Cell cloneCell = cell.clone();</span><br><span class="line">           Assert.assertEquals(<span class="string">"org"</span>,cloneCell.getName());<span class="comment">//pass</span></span><br><span class="line">           Assert.assertEquals(cell,cloneCell);<span class="comment">//not pass</span></span><br><span class="line">       &#125;<span class="keyword">catch</span> (CloneNotSupportedException e)&#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;设计模式之原型模式&quot;&gt;&lt;a href=&quot;#设计模式之原型模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式之原型模式&quot;&gt;&lt;/a&gt;设计模式之原型模式&lt;/h1&gt;&lt;p&gt;使用原型实例指定要创建的对象类型，并通过复制此原型来创建新对象.实现方法:通过克隆方
      
    
    </summary>
    
      <category term="设计模式" scheme="https://nanyiniu.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="Java" scheme="https://nanyiniu.github.io/tags/Java/"/>
    
      <category term="设计模式" scheme="https://nanyiniu.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之适配器模式</title>
    <link href="https://nanyiniu.github.io/2019/06/02/2019-06-02-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>https://nanyiniu.github.io/2019/06/02/2019-06-02-设计模式之适配器模式/</id>
    <published>2019-06-02T12:00:00.000Z</published>
    <updated>2019-06-19T14:58:19.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式之适配器模式"><a href="#设计模式之适配器模式" class="headerlink" title="设计模式之适配器模式"></a>设计模式之适配器模式</h1><p>我们实际中会用到两个不同接口的类的通信,在不修改两个类的前提下,使用新的中间类来完成衔接的过程,这个中间件就是适配器.可以让两个完全不同的接口相互转化.</p><p>适配器模式允许在适配器中包装其他不兼容的对象，以使其与另一个类兼容。</p><p>就如同生活中买了港版的手机,但是附赠的是三脚插头，而大陆上用的是两脚的，需要一个适配器来将三角插头转换为两脚的。其中这个中间件就是适配器。</p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ul><li>当你想要这个类，但是类中的接口与想用的接口并不匹配</li><li>当想要去创建一个可重用的类，让它与不相关或不可预见的类合作，这个类不必要有兼容的接口</li><li>当你需要一系列的子类的时候，如果想要调整这些子类的接口方法的时候，对每一个接口子类化的这种方法是不可行的。这时就可使用适配器适配这些子类的夫类。</li></ul><h2 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h2><p><img src="https://raw.githubusercontent.com/NanYinIU/PicRoom/master/img/20190602120227.png" alt="适配器模式图"></p><p>使用client调用适配器，适配器继承与三脚插头，依赖于二脚插头。这样就可以使用三脚插头的接口调用二脚插头的方法。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 三角插头</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> nanyin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 11:13 2019-06-02</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreeLeggedPlug</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">charge</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"use three legged plug"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 二脚插头</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> nanyin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 11:13 2019-06-02</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TwoLeggedPlug</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fastCharge</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"use two legged plug for fast charge !"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//适配器 继承三角插头</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TwoLeggedPlugAdapter</span> <span class="keyword">extends</span> <span class="title">ThreeLeggedPlug</span> </span>&#123;</span><br><span class="line">    TwoLeggedPlug twoLeggedPlug;</span><br><span class="line">    <span class="comment">// 依赖于二脚插头</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TwoLeggedPlugAdapter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        twoLeggedPlug = <span class="keyword">new</span> TwoLeggedPlug();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//使用三角插头的charge方法，调用二脚插头的fastCharge方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">charge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        twoLeggedPlug.fastCharge();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//某S9港版手机</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">S9Plus</span> <span class="keyword">extends</span> <span class="title">ThreeLeggedPlug</span> </span>&#123;</span><br><span class="line">    ThreeLeggedPlug threeLeggedPlug;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">S9Plus</span><span class="params">(ThreeLeggedPlug threeLeggedPlug)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.threeLeggedPlug = threeLeggedPlug;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">charge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        threeLeggedPlug.charge();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//客户端方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCharge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 不使用适配器 使用类三角插头</span></span><br><span class="line">        ThreeLeggedPlug s9Plus = <span class="keyword">new</span> S9Plus(<span class="keyword">new</span> ThreeLeggedPlug());</span><br><span class="line">        s9Plus.charge();</span><br><span class="line">        <span class="comment">// 使用二脚插头的适配器</span></span><br><span class="line">        ThreeLeggedPlug s9PlusUseTwoLeggedPlug = <span class="keyword">new</span> S9Plus(<span class="keyword">new</span> TwoLeggedPlugAdapter());</span><br><span class="line">        s9PlusUseTwoLeggedPlug.charge();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">结果：</span><br><span class="line"></span><br><span class="line">use three legged plug</span><br><span class="line">use two legged plug for fast charge !</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;设计模式之适配器模式&quot;&gt;&lt;a href=&quot;#设计模式之适配器模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式之适配器模式&quot;&gt;&lt;/a&gt;设计模式之适配器模式&lt;/h1&gt;&lt;p&gt;我们实际中会用到两个不同接口的类的通信,在不修改两个类的前提下,使用新的中间
      
    
    </summary>
    
      <category term="设计模式" scheme="https://nanyiniu.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="Java" scheme="https://nanyiniu.github.io/tags/Java/"/>
    
      <category term="设计模式" scheme="https://nanyiniu.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之建造者模式</title>
    <link href="https://nanyiniu.github.io/2019/06/01/2019-06-01-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>https://nanyiniu.github.io/2019/06/01/2019-06-01-设计模式之建造者模式/</id>
    <published>2019-06-01T12:00:00.000Z</published>
    <updated>2019-06-19T14:58:25.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式之建造者模式"><a href="#设计模式之建造者模式" class="headerlink" title="设计模式之建造者模式"></a>设计模式之建造者模式</h1><p>将复杂对象的构造与其表示分开，以便相同的构造过程可以创建不同的表示。</p><p>比如在玩游戏时的捏人物的时候,创建一个游戏任务最简单的方法时计算机自己生成一个固定的游戏任务,但是想自己构建这个人物细节的时候,这种情况下,人物的生成时一步一步生成的.再当所有类型都选择完成后,才能够创建这个人物.</p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ul><li>对象足够复杂,创建这个对象的方法应与创建这个对象的组件和组装方式分开.</li><li>当构造对象时要求对这个对象具有不同的行为.</li></ul><h2 id="建造者模式结构"><a href="#建造者模式结构" class="headerlink" title="建造者模式结构"></a>建造者模式结构</h2><p><img src="https://raw.githubusercontent.com/NanYinIU/PicRoom/master/img/20190601231729.png" alt="建造者模式类图"></p><p>上图为建造者模式类图:其中CharacterBuilder 和 Characters 中的属性相同,CharacterBuilder 存在的目的就是多种构造不同行为的Characters .</p><p>具体可以看下面代码实例</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>角色实体</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Characters</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 角色构造器内有多个角色属性</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> String skill;</span><br><span class="line">    <span class="keyword">private</span> String weapon;</span><br><span class="line">    <span class="comment">// 使用构造器来构造实体 其中实体属性有builder中来</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Characters</span><span class="params">(CharacterBuilder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = builder.getName();</span><br><span class="line">        <span class="keyword">this</span>.age = builder.getAge();</span><br><span class="line">        <span class="keyword">this</span>.sex = builder.getSex();</span><br><span class="line">        <span class="keyword">this</span>.skill = builder.getSkill();</span><br><span class="line">        <span class="keyword">this</span>.weapon = builder.getWeapon();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showCharacterBoard</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"人物 ： "</span> + <span class="keyword">this</span>.name + <span class="string">" 年龄 ："</span> + <span class="keyword">this</span>.age + <span class="string">" 性别："</span> + <span class="keyword">this</span>.sex + <span class="string">" 技能："</span> +<span class="keyword">this</span>.skill + <span class="string">" 武器："</span> + <span class="keyword">this</span>.weapon);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>角色构建器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CharacterBuilder</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 与角色实体保持相同的属性 </span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> String skill;</span><br><span class="line">    <span class="keyword">private</span> String weapon;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSkill</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> skill;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getWeapon</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> weapon;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//构造基本属性的构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CharacterBuilder <span class="title">buildBasicAttributes</span><span class="params">(String name , <span class="keyword">int</span> age, String sex)</span></span>&#123;</span><br><span class="line">        <span class="comment">//保证姓名不能为空</span></span><br><span class="line">        <span class="keyword">if</span>(name == <span class="keyword">null</span> || <span class="string">""</span>.equals(name))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"name can not be empty "</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">            <span class="keyword">this</span>.age = age;</span><br><span class="line">            <span class="keyword">this</span>.sex = sex;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> CharacterBuilder <span class="title">buildSkill</span><span class="params">(String skill)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.skill = skill;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CharacterBuilder <span class="title">billdWeapon</span><span class="params">(String weapon)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.weapon = weapon;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成角色实体</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Characters <span class="title">build</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Characters(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBuildCharacter</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 链式调用,最后使用build方法新建一个角色实体</span></span><br><span class="line">        Characters characters = <span class="keyword">new</span> CharacterBuilder()</span><br><span class="line">                .buildBasicAttributes(<span class="string">"jack"</span>,<span class="number">18</span>,<span class="string">"man"</span>)</span><br><span class="line">                .buildSkill(<span class="string">"Emission laser"</span>)</span><br><span class="line">                .billdWeapon(<span class="string">"Laser Cannon"</span>)</span><br><span class="line">                .build();</span><br><span class="line">                <span class="comment">//打印角色属性面板</span></span><br><span class="line">        characters.showCharacterBoard();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Connected to the target VM, address: &apos;127.0.0.1:57347&apos;, transport: &apos;socket&apos;</span><br><span class="line">人物 ： jack 年龄 ：18 性别：man 技能：Emission laser 武器：Laser Cannon</span><br><span class="line">Disconnected from the target VM, address: &apos;127.0.0.1:57347&apos;, transport: &apos;socket&apos;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;设计模式之建造者模式&quot;&gt;&lt;a href=&quot;#设计模式之建造者模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式之建造者模式&quot;&gt;&lt;/a&gt;设计模式之建造者模式&lt;/h1&gt;&lt;p&gt;将复杂对象的构造与其表示分开，以便相同的构造过程可以创建不同的表示。&lt;/p&gt;
      
    
    </summary>
    
      <category term="设计模式" scheme="https://nanyiniu.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="Java" scheme="https://nanyiniu.github.io/tags/Java/"/>
    
      <category term="设计模式" scheme="https://nanyiniu.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
</feed>
