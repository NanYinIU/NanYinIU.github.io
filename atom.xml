<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>NanYin的博客</title>
  
  <subtitle>记录生活点滴</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://nanyiniu.github.io/"/>
  <updated>2019-08-12T05:12:51.738Z</updated>
  <id>https://nanyiniu.github.io/</id>
  
  <author>
    <name>NanYin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2019-08-05-SpringBoot启动原理</title>
    <link href="https://nanyiniu.github.io/2019/08/05/2019-08-05-SpringBoot%E5%90%AF%E5%8A%A8%E5%8E%9F%E7%90%86/"/>
    <id>https://nanyiniu.github.io/2019/08/05/2019-08-05-SpringBoot启动原理/</id>
    <published>2019-08-05T00:12:35.000Z</published>
    <updated>2019-08-12T05:12:51.738Z</updated>
    
    <content type="html"><![CDATA[<h3 id="调用callRunners"><a href="#调用callRunners" class="headerlink" title="调用callRunners"></a>调用callRunners</h3><h2 id="启动过程图解"><a href="#启动过程图解" class="headerlink" title="启动过程图解"></a>启动过程图解</h2><p>使用一张简单的流程图将上面所有的主要方法串联起来，来查看SpringBoot的启动流程。</p><p><img src="https://raw.githubusercontent.com/NanYinIU/PicRoom/master/img/20190811124925.png" alt="图3"></p><p>在整个启动流程的过程中又一个重要的组件就是listeners.它来监听应用运行的过程。在程序中的体现就是特定的节点调用listeners的回调方法。具体的调用listeners过程如下图所展示的：</p><p><img src="https://raw.githubusercontent.com/NanYinIU/PicRoom/master/img/20190811125247.png" alt="图4"></p><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>这篇文章根据代码来分析SpringBoot的启动过程。分析的比较潦草，有些地方分析的不清晰或者分析出错的地方，欢迎指正，共同进步！。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;调用callRunners&quot;&gt;&lt;a href=&quot;#调用callRunners&quot; class=&quot;headerlink&quot; title=&quot;调用callRunners&quot;&gt;&lt;/a&gt;调用callRunners&lt;/h3&gt;&lt;h2 id=&quot;启动过程图解&quot;&gt;&lt;a href=&quot;#启动过
      
    
    </summary>
    
      <category term="博客" scheme="https://nanyiniu.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="SpringBoot" scheme="https://nanyiniu.github.io/categories/%E5%8D%9A%E5%AE%A2/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="https://nanyiniu.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>2019-07-15-SpringBoot的WEB开发之国际化</title>
    <link href="https://nanyiniu.github.io/2019/07/16/2019-07-15-SpringBoot%E7%9A%84WEB%E5%BC%80%E5%8F%91%E4%B9%8B%E5%9B%BD%E9%99%85%E5%8C%96/"/>
    <id>https://nanyiniu.github.io/2019/07/16/2019-07-15-SpringBoot的WEB开发之国际化/</id>
    <published>2019-07-16T05:49:25.000Z</published>
    <updated>2019-08-12T05:12:51.737Z</updated>
    
    <content type="html"><![CDATA[<p>重启程序，进行测试：</p><p><img src="https://i.loli.net/2019/07/16/5d2ded6219ee739593.gif" alt="测试成果"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><h4 id="如何在SpringBoot中使用国际化"><a href="#如何在SpringBoot中使用国际化" class="headerlink" title="如何在SpringBoot中使用国际化"></a>如何在SpringBoot中使用国际化</h4><ol><li>编写国际化相关的 <code>ResourceBundle</code>文件，也就是对应的语言配置文件如：<code>index_en_US.properties</code>,<code>index_zh_CN.properties</code>，注意这个<strong>文件格式是固定的<code>xxx_语言代码_大写的国家代码</code>，并且必须是properties文件</strong>。</li><li>编写<code>html</code>接收国际化变量，使用<code>Thymeleaf</code>引擎可以使用语法<code>#{}</code>来使用国际化变量。</li></ol><h4 id="如何改造"><a href="#如何改造" class="headerlink" title="如何改造"></a>如何改造</h4><p>因为SpringBoot默认实现了<code>LocaleResolver</code>,并且标注了<code>ConditionalOnMissingBean</code>注解，所以，只需要自己实现<code>LocaleResolver</code>类，重写相关方法，就可以达到改造的目的。需要注意的是，<strong>在注册<code>bean</code>的时候，方法名必须<code>localeResolver</code>,或者指定<code>bean</code>的名称为<code>localeResolver</code>。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;重启程序，进行测试：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/07/16/5d2ded6219ee739593.gif&quot; alt=&quot;测试成果&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;header
      
    
    </summary>
    
      <category term="博客" scheme="https://nanyiniu.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="SpringBoot" scheme="https://nanyiniu.github.io/categories/%E5%8D%9A%E5%AE%A2/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="https://nanyiniu.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>2019-07-13-SpringBoot的WEB开发</title>
    <link href="https://nanyiniu.github.io/2019/07/15/2019-07-13-SpringBoot%E7%9A%84WEB%E5%BC%80%E5%8F%91/"/>
    <id>https://nanyiniu.github.io/2019/07/15/2019-07-13-SpringBoot的WEB开发/</id>
    <published>2019-07-15T13:25:42.000Z</published>
    <updated>2019-08-12T05:12:51.741Z</updated>
    
    <content type="html"><![CDATA[<h2 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h2><p><img src="https://raw.githubusercontent.com/NanYinIU/PicRoom/master/img/20190713180029.png" alt="结果"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;测试结果&quot;&gt;&lt;a href=&quot;#测试结果&quot; class=&quot;headerlink&quot; title=&quot;测试结果&quot;&gt;&lt;/a&gt;测试结果&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/NanYinIU/PicRoom/m
      
    
    </summary>
    
      <category term="博客" scheme="https://nanyiniu.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="SpringBoot" scheme="https://nanyiniu.github.io/categories/%E5%8D%9A%E5%AE%A2/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="https://nanyiniu.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>2019-07-10-SpringBoot的日志</title>
    <link href="https://nanyiniu.github.io/2019/07/13/2019-07-10-SpringBoot%E7%9A%84%E6%97%A5%E5%BF%97/"/>
    <id>https://nanyiniu.github.io/2019/07/13/2019-07-10-SpringBoot的日志/</id>
    <published>2019-07-13T03:23:13.000Z</published>
    <updated>2019-08-12T05:12:51.740Z</updated>
    
    <content type="html"><![CDATA[<h4 id="使用自定义的配置文件"><a href="#使用自定义的配置文件" class="headerlink" title="使用自定义的配置文件"></a>使用自定义的配置文件</h4><h4 id="更换log4j2作为日志框架"><a href="#更换log4j2作为日志框架" class="headerlink" title="更换log4j2作为日志框架"></a>更换log4j2作为日志框架</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;使用自定义的配置文件&quot;&gt;&lt;a href=&quot;#使用自定义的配置文件&quot; class=&quot;headerlink&quot; title=&quot;使用自定义的配置文件&quot;&gt;&lt;/a&gt;使用自定义的配置文件&lt;/h4&gt;&lt;h4 id=&quot;更换log4j2作为日志框架&quot;&gt;&lt;a href=&quot;#更换log4j
      
    
    </summary>
    
      <category term="博客" scheme="https://nanyiniu.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="SpringBoot" scheme="https://nanyiniu.github.io/categories/%E5%8D%9A%E5%AE%A2/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="https://nanyiniu.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>2019-07-08-SpringBoot的配置文件（拓展）</title>
    <link href="https://nanyiniu.github.io/2019/07/13/2019-07-08-SpringBoot%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%EF%BC%88%E6%8B%93%E5%B1%95%EF%BC%89/"/>
    <id>https://nanyiniu.github.io/2019/07/13/2019-07-08-SpringBoot的配置文件（拓展）/</id>
    <published>2019-07-13T02:28:40.000Z</published>
    <updated>2019-08-12T05:12:51.739Z</updated>
    
    <content type="html"><![CDATA[<p>加载的基本过程：</p><ol><li>Spring Boot在启动时扫描项目所依赖的JAR包，寻找包含spring.factories文件的JAR包</li><li>根据spring.factories配置加载AutoConfigure类</li><li>根据 @Conditional注解的条件，进行自动配置并将Bean注入Spring Context</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;加载的基本过程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Spring Boot在启动时扫描项目所依赖的JAR包，寻找包含spring.factories文件的JAR包&lt;/li&gt;
&lt;li&gt;根据spring.factories配置加载AutoConfigure类&lt;/li&gt;
&lt;li&gt;根据 @
      
    
    </summary>
    
      <category term="博客" scheme="https://nanyiniu.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="SpringBoot" scheme="https://nanyiniu.github.io/categories/%E5%8D%9A%E5%AE%A2/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="https://nanyiniu.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>2019-01-01-Mysql中出现Invalid_default_value_for_CREATE_TIME的错误</title>
    <link href="https://nanyiniu.github.io/2019/07/12/2019-01-01-Mysql%E4%B8%AD%E5%87%BA%E7%8E%B0Invalid_default_value_for_CREATE_TIME%E7%9A%84%E9%94%99%E8%AF%AF/"/>
    <id>https://nanyiniu.github.io/2019/07/12/2019-01-01-Mysql中出现Invalid_default_value_for_CREATE_TIME的错误/</id>
    <published>2019-07-12T01:36:48.000Z</published>
    <updated>2019-08-12T05:12:51.766Z</updated>
    
    <content type="html"><![CDATA[<p>我使用第二种方法解决了问题。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我使用第二种方法解决了问题。&lt;/p&gt;

      
    
    </summary>
    
      <category term="博客" scheme="https://nanyiniu.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="MySql" scheme="https://nanyiniu.github.io/categories/%E5%8D%9A%E5%AE%A2/MySql/"/>
    
    
      <category term="MySql" scheme="https://nanyiniu.github.io/tags/MySql/"/>
    
  </entry>
  
  <entry>
    <title>2019-07-11-使用Mysql的外键</title>
    <link href="https://nanyiniu.github.io/2019/07/11/2019-07-11-%E4%BD%BF%E7%94%A8Mysql%E7%9A%84%E5%A4%96%E9%94%AE/"/>
    <id>https://nanyiniu.github.io/2019/07/11/2019-07-11-使用Mysql的外键/</id>
    <published>2019-07-11T15:05:42.000Z</published>
    <updated>2019-08-12T05:12:51.765Z</updated>
    
    <content type="html"><![CDATA[<p><code>index_name</code> 指的是外键的标识，如果子表已经显式的定义了可以支持外键的索引（上面例子中的<code>par_ind</code>），则忽略。否则，mysql会依照以下规则隐式的创建一个外键索引。</p><ul><li>如果定义<code>CONSTRAINT symbol</code> 值，则使用这个值，否则使用外键名 <code>index_name</code>.</li><li>如果上面两个都没有定义，外键名使用引用外键列的名称。</li></ul><h2 id="更新-删除行为"><a href="#更新-删除行为" class="headerlink" title="更新/删除行为"></a>更新/删除行为</h2><p>Mysql如何使用外键来保证参照的完整性。</p><p>对于支持外键的innoDB存储引擎来说，MYSQL拒绝在子表中插入或删除在父表中没有匹配到的外键候选值。</p><p>当父表中的外键候选值发生变化的时候，根据不同的行为策略，来影响子表中对应的外键的键值。具体的策略如下：</p><h3 id="CASCADE-【级联】"><a href="#CASCADE-【级联】" class="headerlink" title="CASCADE 【级联】"></a><code>CASCADE</code> 【级联】</h3><p>如果在父表中删除和更新数据，会自动的删除和更新子表中的匹配到的所有数据。支持删除级联<code>ON DELETE CASCADE</code>和更新级联<code>ON UPDATE CASCADE</code>,两个表之间，不要定义几个这样的子句，这些子句作用域父表或子表中的同一列。</p><h3 id="SET-NULL-【置空】"><a href="#SET-NULL-【置空】" class="headerlink" title="SET NULL 【置空】"></a><code>SET NULL</code> 【置空】</h3><p>如果在父表中删除和更新数据，则自动的置空<code>NULL</code>子表中的外键对应的字段。如果在更新或删除操作中指定了<code>ON DELETE SET NULL</code>或者<code>ON UPDATE SET NULL</code> 时，必须保障*<em>子表外键的那个字段没有设置为 <code>NOT NULL</code> *</em></p><h3 id="RESTRICT-【限制】"><a href="#RESTRICT-【限制】" class="headerlink" title="RESTRICT 【限制】"></a><code>RESTRICT</code> 【限制】</h3><p>如果在伏笔啊哦中删除和更新数据，子表拒绝删除或更新对应字段内容。</p><h3 id="NO-ACTION【无动作】"><a href="#NO-ACTION【无动作】" class="headerlink" title="NO ACTION【无动作】"></a><code>NO ACTION</code>【无动作】</h3><p><code>NO ACTION</code> 是标准SQL中的关键字，在mysql中<code>NO ACTION</code>和<code>RESTRICT</code>的作用相同，都是在在修改或者删除之前去检查从表中是否有对应的数据，如果有，拒绝操作。</p><p>但是有些数据库系统会有延迟检查功能，会导致NO Action 会延迟检查是否有对应数据，但是<strong>MYSQL外键的检查是立即执行的，所以RESTRICT和NO ACTION是完全相同的</strong></p><h3 id="SET-DEFAULT"><a href="#SET-DEFAULT" class="headerlink" title="SET DEFAULT"></a><code>SET DEFAULT</code></h3><p>需要注意的是，set default只是MySQL 解析器认可，但是InnoDB和NDB 拒绝在定义表时，出现ON DELETE SET DEFAULT or ON UPDATE SET DEFAULT 语句。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;index_name&lt;/code&gt; 指的是外键的标识，如果子表已经显式的定义了可以支持外键的索引（上面例子中的&lt;code&gt;par_ind&lt;/code&gt;），则忽略。否则，mysql会依照以下规则隐式的创建一个外键索引。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果定义&lt;code
      
    
    </summary>
    
      <category term="博客" scheme="https://nanyiniu.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="MySql" scheme="https://nanyiniu.github.io/categories/%E5%8D%9A%E5%AE%A2/MySql/"/>
    
    
      <category term="MySql" scheme="https://nanyiniu.github.io/tags/MySql/"/>
    
  </entry>
  
  <entry>
    <title>2019-07-06-SpringBoot的配置文件</title>
    <link href="https://nanyiniu.github.io/2019/07/09/2019-07-06-SpringBoot%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    <id>https://nanyiniu.github.io/2019/07/09/2019-07-06-SpringBoot的配置文件/</id>
    <published>2019-07-09T13:38:00.000Z</published>
    <updated>2019-08-12T05:12:51.741Z</updated>
    
    <content type="html"><![CDATA[<p>将<code>HelloService</code>手动通过配置类的方式添加到容器中，作用和使用xml的方式一样，但是更简单，更容易看懂。</p><p><img src="https://raw.githubusercontent.com/NanYinIU/PicRoom/master/img/20190707181447.png" alt="结果"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;将&lt;code&gt;HelloService&lt;/code&gt;手动通过配置类的方式添加到容器中，作用和使用xml的方式一样，但是更简单，更容易看懂。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/NanYinIU/PicRoom
      
    
    </summary>
    
      <category term="博客" scheme="https://nanyiniu.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="SpringBoot" scheme="https://nanyiniu.github.io/categories/%E5%8D%9A%E5%AE%A2/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="https://nanyiniu.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>2019-07-04-SpringBoot深入自动配置</title>
    <link href="https://nanyiniu.github.io/2019/07/07/2019-07-04-SpringBoot%E6%B7%B1%E5%85%A5%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE/"/>
    <id>https://nanyiniu.github.io/2019/07/07/2019-07-04-SpringBoot深入自动配置/</id>
    <published>2019-07-07T08:47:02.000Z</published>
    <updated>2019-08-12T05:12:51.741Z</updated>
    
    <content type="html"><![CDATA[<p>excludeFilters的作用是指定哪些类型不符合组件扫描的条件，也就是排除掉指定的类。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;excludeFilters的作用是指定哪些类型不符合组件扫描的条件，也就是排除掉指定的类。&lt;/p&gt;

      
    
    </summary>
    
      <category term="博客" scheme="https://nanyiniu.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="SpringBoot" scheme="https://nanyiniu.github.io/categories/%E5%8D%9A%E5%AE%A2/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="https://nanyiniu.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>2019-07-03-SpringBoot与微服务简介</title>
    <link href="https://nanyiniu.github.io/2019/07/04/2019-07-03-SpringBoot%E4%B8%8E%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%AE%80%E4%BB%8B/"/>
    <id>https://nanyiniu.github.io/2019/07/04/2019-07-03-SpringBoot与微服务简介/</id>
    <published>2019-07-04T15:17:49.000Z</published>
    <updated>2019-08-12T05:12:51.740Z</updated>
    
    <content type="html"><![CDATA[<p>保存之后使用<code>mvn package</code>命令打成jar包，可以在输出信息中找出打完的jar包的位置。<br>使用<code>java -jar xxxxxx.jar</code>命令运行程序。</p><h2 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h2><p>微服务其实是一种架构风格，一个应用应该是一组小型服务组成，小型服务通过http api的方式进行沟通。每一个小型服务都是一个功能元素，能够独立替换和独立升级的应用单元。</p><p>详细请参考<code>martinfowler.com</code> 中的这篇微服务文章：<a href="https://martinfowler.com/microservices" target="_blank" rel="noopener">微服务</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;保存之后使用&lt;code&gt;mvn package&lt;/code&gt;命令打成jar包，可以在输出信息中找出打完的jar包的位置。&lt;br&gt;使用&lt;code&gt;java -jar xxxxxx.jar&lt;/code&gt;命令运行程序。&lt;/p&gt;
&lt;h2 id=&quot;微服务&quot;&gt;&lt;a href=&quot;#微服务
      
    
    </summary>
    
      <category term="博客" scheme="https://nanyiniu.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="SpringBoot" scheme="https://nanyiniu.github.io/categories/%E5%8D%9A%E5%AE%A2/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="https://nanyiniu.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>2019-06-28-设计模式之命令模式</title>
    <link href="https://nanyiniu.github.io/2019/07/02/2019-06-28-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/"/>
    <id>https://nanyiniu.github.io/2019/07/02/2019-06-28-设计模式之命令模式/</id>
    <published>2019-07-02T11:57:45.000Z</published>
    <updated>2019-08-12T05:12:51.729Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="博客" scheme="https://nanyiniu.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="设计模式" scheme="https://nanyiniu.github.io/categories/%E5%8D%9A%E5%AE%A2/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://nanyiniu.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>2019-06-27-设计模式之迭代器模式</title>
    <link href="https://nanyiniu.github.io/2019/07/02/2019-06-27-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>https://nanyiniu.github.io/2019/07/02/2019-06-27-设计模式之迭代器模式/</id>
    <published>2019-07-02T11:10:57.000Z</published>
    <updated>2019-08-12T05:12:51.735Z</updated>
    
    <content type="html"><![CDATA[<p>简单而强大的迭代器模式。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;简单而强大的迭代器模式。&lt;/p&gt;

      
    
    </summary>
    
      <category term="博客" scheme="https://nanyiniu.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="设计模式" scheme="https://nanyiniu.github.io/categories/%E5%8D%9A%E5%AE%A2/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://nanyiniu.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>2019-05-28-设计模式之策略模式</title>
    <link href="https://nanyiniu.github.io/2019/06/28/2019-05-28-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>https://nanyiniu.github.io/2019/06/28/2019-05-28-设计模式之策略模式/</id>
    <published>2019-06-28T05:11:58.000Z</published>
    <updated>2019-08-12T05:12:51.729Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="博客" scheme="https://nanyiniu.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="设计模式" scheme="https://nanyiniu.github.io/categories/%E5%8D%9A%E5%AE%A2/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://nanyiniu.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>2019-05-27-设计模式之责任链模式</title>
    <link href="https://nanyiniu.github.io/2019/06/28/2019-05-27-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/"/>
    <id>https://nanyiniu.github.io/2019/06/28/2019-05-27-设计模式之责任链模式/</id>
    <published>2019-06-28T02:48:17.000Z</published>
    <updated>2019-08-12T05:12:51.731Z</updated>
    
    <content type="html"><![CDATA[<p>public class King {<br>    private static RequestHandler chain;<br>    private void buildChain() {<br>        chain = new OrcCommander(new OrcOfficer(null));<br>    }<br>    private void makeRequest(Request req) {<br>        chain.handleRequest(req);<br>    }<br>    public static void main(String[] args) {<br>        King king = new King();<br>        king.buildChain();<br>        king.makeRequest(new Request(RequestType.DEFEND_CASTLE, “defend castle”));<br>        king.makeRequest(new Request(RequestType.TORTURE_PRISONER, “torture prisoner”));<br>    }<br>}</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;public class King {&lt;br&gt;    private static RequestHandler chain;&lt;br&gt;    private void buildChain() {&lt;br&gt;        chain = new OrcCommander(ne
      
    
    </summary>
    
      <category term="博客" scheme="https://nanyiniu.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="设计模式" scheme="https://nanyiniu.github.io/categories/%E5%8D%9A%E5%AE%A2/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://nanyiniu.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>2019-06-19-设计模式之状态模式</title>
    <link href="https://nanyiniu.github.io/2019/06/27/2019-06-19-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/"/>
    <id>https://nanyiniu.github.io/2019/06/27/2019-06-19-设计模式之状态模式/</id>
    <published>2019-06-27T12:46:33.000Z</published>
    <updated>2019-08-12T05:12:51.732Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="博客" scheme="https://nanyiniu.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="设计模式" scheme="https://nanyiniu.github.io/categories/%E5%8D%9A%E5%AE%A2/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://nanyiniu.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>2019-06-26-PlantUML类图使用总结</title>
    <link href="https://nanyiniu.github.io/2019/06/27/2019-06-26-PlantUML%E7%B1%BB%E5%9B%BE%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"/>
    <id>https://nanyiniu.github.io/2019/06/27/2019-06-26-PlantUML类图使用总结/</id>
    <published>2019-06-27T12:33:40.000Z</published>
    <updated>2019-08-12T05:12:51.735Z</updated>
    
    <content type="html"><![CDATA[<h5 id="一、依赖关系"><a href="#一、依赖关系" class="headerlink" title="一、依赖关系"></a>一、依赖关系</h5><p>依赖是一种使用的关系，代码中体现到依赖的关系的情况:<code>局部变量</code>、<code>方法的参数或者对静态方法的调用</code>,依赖是最弱的一种关联。依赖关系使用虚线和普通的小箭头来实现，箭头指向被依赖的对象。如图中的x依赖y一样，所以指向y,这个被x依赖的对象。</p><h5 id="二、关联关系"><a href="#二、关联关系" class="headerlink" title="二、关联关系"></a>二、关联关系</h5><p>关联是拥有的关系，如玩家与游戏中的角色一样。关联可能是单向的，也可能是双向的，也同样能够自己关联自己。代码中体现到关联的关系的情况：<code>成员变量</code>。关联关系使用实线和小尖头来实现，箭头指向被关联的对象。</p><h5 id="三、组合关系"><a href="#三、组合关系" class="headerlink" title="三、组合关系"></a>三、组合关系</h5><p>组合关系是<code>整体与部分</code>的关系，但是如果整体不存在，那部分也不能存在。就如同公司与部门一样，公司解散了，部门也就不存在了。和关联关系相同，在代码中的体现也是<code>成员变量</code>。组合关系使用空心的菱形和实线来表示。</p><h5 id="四、聚合关系"><a href="#四、聚合关系" class="headerlink" title="四、聚合关系"></a>四、聚合关系</h5><p>聚合关系是<code>整体与部分</code>的关系，但是和组合关系不同的是，聚合关系中的<code>部分</code>可以脱离整体而存在，就如同麦当劳中的套餐与汉堡一样。在代码中的体现同样是<code>成员变量</code>。聚合关系使用实心的菱形和实线来表示。</p><p>所以可以说聚合关系和组合关系是关系更加确定，更加紧密的关联关系。</p><h5 id="各关系的强弱顺序"><a href="#各关系的强弱顺序" class="headerlink" title="各关系的强弱顺序"></a>各关系的强弱顺序</h5><blockquote><p>泛化= 实现&gt; 组合&gt; 聚合&gt; 关联&gt; 依赖</p></blockquote><p>PlantUML支持更多的更复杂的情景下的图形绘制，具体可以查看<a href="http://plantuml.com/zh/index" target="_blank" rel="noopener">PlantUML的中文网站</a>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;一、依赖关系&quot;&gt;&lt;a href=&quot;#一、依赖关系&quot; class=&quot;headerlink&quot; title=&quot;一、依赖关系&quot;&gt;&lt;/a&gt;一、依赖关系&lt;/h5&gt;&lt;p&gt;依赖是一种使用的关系，代码中体现到依赖的关系的情况:&lt;code&gt;局部变量&lt;/code&gt;、&lt;code&gt;方法的参
      
    
    </summary>
    
      <category term="博客" scheme="https://nanyiniu.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="工具" scheme="https://nanyiniu.github.io/categories/%E5%8D%9A%E5%AE%A2/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="工具" scheme="https://nanyiniu.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>2019-06-25-设计模式之备忘录模式</title>
    <link href="https://nanyiniu.github.io/2019/06/26/2019-06-25-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/"/>
    <id>https://nanyiniu.github.io/2019/06/26/2019-06-25-设计模式之备忘录模式/</id>
    <published>2019-06-26T12:40:43.000Z</published>
    <updated>2019-08-12T05:12:51.731Z</updated>
    
    <content type="html"><![CDATA[<p>在游戏存档后死亡，再重复读存档，得到之前存档之前的状态。游戏不会主动存档和读取存档，只会记录存档中的内容，而玩家会主动从游戏中读取存档，然后恢复到存档的状态。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在游戏存档后死亡，再重复读存档，得到之前存档之前的状态。游戏不会主动存档和读取存档，只会记录存档中的内容，而玩家会主动从游戏中读取存档，然后恢复到存档的状态。&lt;/p&gt;

      
    
    </summary>
    
      <category term="博客" scheme="https://nanyiniu.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="设计模式" scheme="https://nanyiniu.github.io/categories/%E5%8D%9A%E5%AE%A2/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://nanyiniu.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>2019-06-14-设计模式之代理模式</title>
    <link href="https://nanyiniu.github.io/2019/06/26/2019-06-14-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    <id>https://nanyiniu.github.io/2019/06/26/2019-06-14-设计模式之代理模式/</id>
    <published>2019-06-26T02:35:38.000Z</published>
    <updated>2019-08-12T05:12:51.729Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="博客" scheme="https://nanyiniu.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="设计模式" scheme="https://nanyiniu.github.io/categories/%E5%8D%9A%E5%AE%A2/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://nanyiniu.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>2019-06-24-设计模式之观察者模式</title>
    <link href="https://nanyiniu.github.io/2019/06/24/2019-06-24-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>https://nanyiniu.github.io/2019/06/24/2019-06-24-设计模式之观察者模式/</id>
    <published>2019-06-24T05:24:33.000Z</published>
    <updated>2019-08-12T05:12:51.730Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="博客" scheme="https://nanyiniu.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="设计模式" scheme="https://nanyiniu.github.io/categories/%E5%8D%9A%E5%AE%A2/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://nanyiniu.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>2019-05-29-设计模式之工厂模式</title>
    <link href="https://nanyiniu.github.io/2019/06/19/2019-05-29-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>https://nanyiniu.github.io/2019/06/19/2019-05-29-设计模式之工厂模式/</id>
    <published>2019-06-19T07:55:40.000Z</published>
    <updated>2019-08-12T05:12:51.730Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="博客" scheme="https://nanyiniu.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="设计模式" scheme="https://nanyiniu.github.io/categories/%E5%8D%9A%E5%AE%A2/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://nanyiniu.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
</feed>
