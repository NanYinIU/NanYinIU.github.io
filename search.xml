<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2019-08-05-SpringBoot启动原理</title>
      <link href="/2019/08/05/2019-08-05-SpringBoot%E5%90%AF%E5%8A%A8%E5%8E%9F%E7%90%86/"/>
      <url>/2019/08/05/2019-08-05-SpringBoot%E5%90%AF%E5%8A%A8%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h3 id="调用callRunners"><a href="#调用callRunners" class="headerlink" title="调用callRunners"></a>调用callRunners</h3><h2 id="启动过程图解"><a href="#启动过程图解" class="headerlink" title="启动过程图解"></a>启动过程图解</h2><p>使用一张简单的流程图将上面所有的主要方法串联起来，来查看SpringBoot的启动流程。</p><p><img src="https://raw.githubusercontent.com/NanYinIU/PicRoom/master/img/20190811124925.png" alt="图3"></p><p>在整个启动流程的过程中又一个重要的组件就是listeners.它来监听应用运行的过程。在程序中的体现就是特定的节点调用listeners的回调方法。具体的调用listeners过程如下图所展示的：</p><p><img src="https://raw.githubusercontent.com/NanYinIU/PicRoom/master/img/20190811125247.png" alt="图4"></p><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>这篇文章根据代码来分析SpringBoot的启动过程。分析的比较潦草，有些地方分析的不清晰或者分析出错的地方，欢迎指正，共同进步！。</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-07-17-SpringBoot错误处理机制</title>
      <link href="/2019/07/17/2019-07-17-SpringBoot%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6/"/>
      <url>/2019/07/17/2019-07-17-SpringBoot%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<p>通过以上的设置，可以得到如下结果：</p><ul><li>如果是 /hello?name=abc的时候抛出NoAuthException异常 跳转到4xx页面</li><li>如果是 /hello?name=123的时候抛出NoUserExcetion的异常 跳转到404页面</li><li>如果没有访问地址也会到404页面</li></ul><h3 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h3><ul><li>访问/hello?name=abc 跳转到4xx页面</li></ul><p><img src="https://raw.githubusercontent.com/NanYinIU/PicRoom/master/img/20190718194227.png" alt="4xx"></p><ul><li>访问/hello?name=123 跳转到404页面</li></ul><p><img src="https://raw.githubusercontent.com/NanYinIU/PicRoom/master/img/20190718194426.png" alt="400"></p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>在考虑对web错误页面处理的角度，无非就是两个方面：</p><h3 id="一、-页面样式"><a href="#一、-页面样式" class="headerlink" title="一、 页面样式"></a>一、 页面样式</h3><p>​    在有模版引擎的情况下，通过<code>DefaultErrorController</code>在<code>/error</code>上的访问处理，来自动渲染在<code>template/error/</code>目录下的对应的<code>错误code.html</code>的的展示,如404.html。并且支持模糊匹配，如创建4xx.html页面，那么如果没有发现特定的错误代码页面，则自动的使用4xx页面。</p><h3 id="二、-页面内容"><a href="#二、-页面内容" class="headerlink" title="二、 页面内容"></a>二、 页面内容</h3><p>页面内容可以通过继承<code>DefaultErrorAttributes</code>类来进行简单的实现，如果想全部替换掉SpringBoot的默认全部的返回内容，则需要实现<code>ErrorAttributes</code>进行实现，需要注意的是必须放到容器中才能生效。</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-07-15-SpringBoot的WEB开发之国际化</title>
      <link href="/2019/07/16/2019-07-15-SpringBoot%E7%9A%84WEB%E5%BC%80%E5%8F%91%E4%B9%8B%E5%9B%BD%E9%99%85%E5%8C%96/"/>
      <url>/2019/07/16/2019-07-15-SpringBoot%E7%9A%84WEB%E5%BC%80%E5%8F%91%E4%B9%8B%E5%9B%BD%E9%99%85%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>重启程序，进行测试：</p><p><img src="https://i.loli.net/2019/07/16/5d2ded6219ee739593.gif" alt="测试成果"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><h4 id="如何在SpringBoot中使用国际化"><a href="#如何在SpringBoot中使用国际化" class="headerlink" title="如何在SpringBoot中使用国际化"></a>如何在SpringBoot中使用国际化</h4><ol><li>编写国际化相关的 <code>ResourceBundle</code>文件，也就是对应的语言配置文件如：<code>index_en_US.properties</code>,<code>index_zh_CN.properties</code>，注意这个<strong>文件格式是固定的<code>xxx_语言代码_大写的国家代码</code>，并且必须是properties文件</strong>。</li><li>编写<code>html</code>接收国际化变量，使用<code>Thymeleaf</code>引擎可以使用语法<code>#{}</code>来使用国际化变量。</li></ol><h4 id="如何改造"><a href="#如何改造" class="headerlink" title="如何改造"></a>如何改造</h4><p>因为SpringBoot默认实现了<code>LocaleResolver</code>,并且标注了<code>ConditionalOnMissingBean</code>注解，所以，只需要自己实现<code>LocaleResolver</code>类，重写相关方法，就可以达到改造的目的。需要注意的是，<strong>在注册<code>bean</code>的时候，方法名必须<code>localeResolver</code>,或者指定<code>bean</code>的名称为<code>localeResolver</code>。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-07-13-SpringBoot的WEB开发</title>
      <link href="/2019/07/15/2019-07-13-SpringBoot%E7%9A%84WEB%E5%BC%80%E5%8F%91/"/>
      <url>/2019/07/15/2019-07-13-SpringBoot%E7%9A%84WEB%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h2 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h2><p><img src="https://raw.githubusercontent.com/NanYinIU/PicRoom/master/img/20190713180029.png" alt="结果"></p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-07-10-SpringBoot的日志</title>
      <link href="/2019/07/13/2019-07-10-SpringBoot%E7%9A%84%E6%97%A5%E5%BF%97/"/>
      <url>/2019/07/13/2019-07-10-SpringBoot%E7%9A%84%E6%97%A5%E5%BF%97/</url>
      
        <content type="html"><![CDATA[<h4 id="使用自定义的配置文件"><a href="#使用自定义的配置文件" class="headerlink" title="使用自定义的配置文件"></a>使用自定义的配置文件</h4><h4 id="更换log4j2作为日志框架"><a href="#更换log4j2作为日志框架" class="headerlink" title="更换log4j2作为日志框架"></a>更换log4j2作为日志框架</h4>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-07-08-SpringBoot的配置文件（拓展）</title>
      <link href="/2019/07/13/2019-07-08-SpringBoot%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%EF%BC%88%E6%8B%93%E5%B1%95%EF%BC%89/"/>
      <url>/2019/07/13/2019-07-08-SpringBoot%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%EF%BC%88%E6%8B%93%E5%B1%95%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>加载的基本过程：</p><ol><li>Spring Boot在启动时扫描项目所依赖的JAR包，寻找包含spring.factories文件的JAR包</li><li>根据spring.factories配置加载AutoConfigure类</li><li>根据 @Conditional注解的条件，进行自动配置并将Bean注入Spring Context</li></ol>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-01-01-Mysql中出现Invalid_default_value_for_CREATE_TIME的错误</title>
      <link href="/2019/07/12/2019-01-01-Mysql%E4%B8%AD%E5%87%BA%E7%8E%B0Invalid_default_value_for_CREATE_TIME%E7%9A%84%E9%94%99%E8%AF%AF/"/>
      <url>/2019/07/12/2019-01-01-Mysql%E4%B8%AD%E5%87%BA%E7%8E%B0Invalid_default_value_for_CREATE_TIME%E7%9A%84%E9%94%99%E8%AF%AF/</url>
      
        <content type="html"><![CDATA[<p>我使用第二种方法解决了问题。</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-07-11-使用Mysql的外键</title>
      <link href="/2019/07/11/2019-07-11-%E4%BD%BF%E7%94%A8Mysql%E7%9A%84%E5%A4%96%E9%94%AE/"/>
      <url>/2019/07/11/2019-07-11-%E4%BD%BF%E7%94%A8Mysql%E7%9A%84%E5%A4%96%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<p><code>index_name</code> 指的是外键的标识，如果子表已经显式的定义了可以支持外键的索引（上面例子中的<code>par_ind</code>），则忽略。否则，mysql会依照以下规则隐式的创建一个外键索引。</p><ul><li>如果定义<code>CONSTRAINT symbol</code> 值，则使用这个值，否则使用外键名 <code>index_name</code>.</li><li>如果上面两个都没有定义，外键名使用引用外键列的名称。</li></ul><h2 id="更新-删除行为"><a href="#更新-删除行为" class="headerlink" title="更新/删除行为"></a>更新/删除行为</h2><p>Mysql如何使用外键来保证参照的完整性。</p><p>对于支持外键的innoDB存储引擎来说，MYSQL拒绝在子表中插入或删除在父表中没有匹配到的外键候选值。</p><p>当父表中的外键候选值发生变化的时候，根据不同的行为策略，来影响子表中对应的外键的键值。具体的策略如下：</p><h3 id="CASCADE-【级联】"><a href="#CASCADE-【级联】" class="headerlink" title="CASCADE 【级联】"></a><code>CASCADE</code> 【级联】</h3><p>如果在父表中删除和更新数据，会自动的删除和更新子表中的匹配到的所有数据。支持删除级联<code>ON DELETE CASCADE</code>和更新级联<code>ON UPDATE CASCADE</code>,两个表之间，不要定义几个这样的子句，这些子句作用域父表或子表中的同一列。</p><h3 id="SET-NULL-【置空】"><a href="#SET-NULL-【置空】" class="headerlink" title="SET NULL 【置空】"></a><code>SET NULL</code> 【置空】</h3><p>如果在父表中删除和更新数据，则自动的置空<code>NULL</code>子表中的外键对应的字段。如果在更新或删除操作中指定了<code>ON DELETE SET NULL</code>或者<code>ON UPDATE SET NULL</code> 时，必须保障*<em>子表外键的那个字段没有设置为 <code>NOT NULL</code> *</em></p><h3 id="RESTRICT-【限制】"><a href="#RESTRICT-【限制】" class="headerlink" title="RESTRICT 【限制】"></a><code>RESTRICT</code> 【限制】</h3><p>如果在伏笔啊哦中删除和更新数据，子表拒绝删除或更新对应字段内容。</p><h3 id="NO-ACTION【无动作】"><a href="#NO-ACTION【无动作】" class="headerlink" title="NO ACTION【无动作】"></a><code>NO ACTION</code>【无动作】</h3><p><code>NO ACTION</code> 是标准SQL中的关键字，在mysql中<code>NO ACTION</code>和<code>RESTRICT</code>的作用相同，都是在在修改或者删除之前去检查从表中是否有对应的数据，如果有，拒绝操作。</p><p>但是有些数据库系统会有延迟检查功能，会导致NO Action 会延迟检查是否有对应数据，但是<strong>MYSQL外键的检查是立即执行的，所以RESTRICT和NO ACTION是完全相同的</strong></p><h3 id="SET-DEFAULT"><a href="#SET-DEFAULT" class="headerlink" title="SET DEFAULT"></a><code>SET DEFAULT</code></h3><p>需要注意的是，set default只是MySQL 解析器认可，但是InnoDB和NDB 拒绝在定义表时，出现ON DELETE SET DEFAULT or ON UPDATE SET DEFAULT 语句。</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-07-06-SpringBoot的配置文件</title>
      <link href="/2019/07/09/2019-07-06-SpringBoot%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
      <url>/2019/07/09/2019-07-06-SpringBoot%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>将<code>HelloService</code>手动通过配置类的方式添加到容器中，作用和使用xml的方式一样，但是更简单，更容易看懂。</p><p><img src="https://raw.githubusercontent.com/NanYinIU/PicRoom/master/img/20190707181447.png" alt="结果"></p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-07-04-SpringBoot深入自动配置</title>
      <link href="/2019/07/07/2019-07-04-SpringBoot%E6%B7%B1%E5%85%A5%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE/"/>
      <url>/2019/07/07/2019-07-04-SpringBoot%E6%B7%B1%E5%85%A5%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>excludeFilters的作用是指定哪些类型不符合组件扫描的条件，也就是排除掉指定的类。</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-07-03-SpringBoot与微服务简介</title>
      <link href="/2019/07/04/2019-07-03-SpringBoot%E4%B8%8E%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%AE%80%E4%BB%8B/"/>
      <url>/2019/07/04/2019-07-03-SpringBoot%E4%B8%8E%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<p>保存之后使用<code>mvn package</code>命令打成jar包，可以在输出信息中找出打完的jar包的位置。<br>使用<code>java -jar xxxxxx.jar</code>命令运行程序。</p><h2 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h2><p>微服务其实是一种架构风格，一个应用应该是一组小型服务组成，小型服务通过http api的方式进行沟通。每一个小型服务都是一个功能元素，能够独立替换和独立升级的应用单元。</p><p>详细请参考<code>martinfowler.com</code> 中的这篇微服务文章：<a href="https://martinfowler.com/microservices" target="_blank" rel="noopener">微服务</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-06-28-设计模式之命令模式</title>
      <link href="/2019/07/02/2019-06-28-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/07/02/2019-06-28-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-06-27-设计模式之迭代器模式</title>
      <link href="/2019/07/02/2019-06-27-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/07/02/2019-06-27-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>简单而强大的迭代器模式。</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-05-28-设计模式之策略模式</title>
      <link href="/2019/06/28/2019-05-28-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/06/28/2019-05-28-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-05-27-设计模式之责任链模式</title>
      <link href="/2019/06/28/2019-05-27-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/06/28/2019-05-27-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>public class King {<br>    private static RequestHandler chain;<br>    private void buildChain() {<br>        chain = new OrcCommander(new OrcOfficer(null));<br>    }<br>    private void makeRequest(Request req) {<br>        chain.handleRequest(req);<br>    }<br>    public static void main(String[] args) {<br>        King king = new King();<br>        king.buildChain();<br>        king.makeRequest(new Request(RequestType.DEFEND_CASTLE, “defend castle”));<br>        king.makeRequest(new Request(RequestType.TORTURE_PRISONER, “torture prisoner”));<br>    }<br>}</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-06-19-设计模式之状态模式</title>
      <link href="/2019/06/27/2019-06-19-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/06/27/2019-06-19-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-06-26-PlantUML类图使用总结</title>
      <link href="/2019/06/27/2019-06-26-PlantUML%E7%B1%BB%E5%9B%BE%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"/>
      <url>/2019/06/27/2019-06-26-PlantUML%E7%B1%BB%E5%9B%BE%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h5 id="一、依赖关系"><a href="#一、依赖关系" class="headerlink" title="一、依赖关系"></a>一、依赖关系</h5><p>依赖是一种使用的关系，代码中体现到依赖的关系的情况:<code>局部变量</code>、<code>方法的参数或者对静态方法的调用</code>,依赖是最弱的一种关联。依赖关系使用虚线和普通的小箭头来实现，箭头指向被依赖的对象。如图中的x依赖y一样，所以指向y,这个被x依赖的对象。</p><h5 id="二、关联关系"><a href="#二、关联关系" class="headerlink" title="二、关联关系"></a>二、关联关系</h5><p>关联是拥有的关系，如玩家与游戏中的角色一样。关联可能是单向的，也可能是双向的，也同样能够自己关联自己。代码中体现到关联的关系的情况：<code>成员变量</code>。关联关系使用实线和小尖头来实现，箭头指向被关联的对象。</p><h5 id="三、组合关系"><a href="#三、组合关系" class="headerlink" title="三、组合关系"></a>三、组合关系</h5><p>组合关系是<code>整体与部分</code>的关系，但是如果整体不存在，那部分也不能存在。就如同公司与部门一样，公司解散了，部门也就不存在了。和关联关系相同，在代码中的体现也是<code>成员变量</code>。组合关系使用空心的菱形和实线来表示。</p><h5 id="四、聚合关系"><a href="#四、聚合关系" class="headerlink" title="四、聚合关系"></a>四、聚合关系</h5><p>聚合关系是<code>整体与部分</code>的关系，但是和组合关系不同的是，聚合关系中的<code>部分</code>可以脱离整体而存在，就如同麦当劳中的套餐与汉堡一样。在代码中的体现同样是<code>成员变量</code>。聚合关系使用实心的菱形和实线来表示。</p><p>所以可以说聚合关系和组合关系是关系更加确定，更加紧密的关联关系。</p><h5 id="各关系的强弱顺序"><a href="#各关系的强弱顺序" class="headerlink" title="各关系的强弱顺序"></a>各关系的强弱顺序</h5><blockquote><p>泛化= 实现&gt; 组合&gt; 聚合&gt; 关联&gt; 依赖</p></blockquote><p>PlantUML支持更多的更复杂的情景下的图形绘制，具体可以查看<a href="http://plantuml.com/zh/index" target="_blank" rel="noopener">PlantUML的中文网站</a>。</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-06-25-设计模式之备忘录模式</title>
      <link href="/2019/06/26/2019-06-25-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/06/26/2019-06-25-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>在游戏存档后死亡，再重复读存档，得到之前存档之前的状态。游戏不会主动存档和读取存档，只会记录存档中的内容，而玩家会主动从游戏中读取存档，然后恢复到存档的状态。</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-06-14-设计模式之代理模式</title>
      <link href="/2019/06/26/2019-06-14-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/06/26/2019-06-14-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-06-24-设计模式之观察者模式</title>
      <link href="/2019/06/24/2019-06-24-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/06/24/2019-06-24-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-05-29-设计模式之工厂模式</title>
      <link href="/2019/06/19/2019-05-29-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/06/19/2019-05-29-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-01-30-利用springboot构建SpringData+JAP+RestFul应用</title>
      <link href="/2019/06/19/2019-01-30-%E5%88%A9%E7%94%A8springboot%E6%9E%84%E5%BB%BASpringData+JAP+RestFul%E5%BA%94%E7%94%A8/"/>
      <url>/2019/06/19/2019-01-30-%E5%88%A9%E7%94%A8springboot%E6%9E%84%E5%BB%BASpringData+JAP+RestFul%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>这样可以访问localhost:3000的时候可以访问到Index文件内容。</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-02-17-使用IDEA设置springboot热部署</title>
      <link href="/2019/06/19/2019-02-17-%E4%BD%BF%E7%94%A8IDEA%E8%AE%BE%E7%BD%AEspringboot%E7%83%AD%E9%83%A8%E7%BD%B2/"/>
      <url>/2019/06/19/2019-02-17-%E4%BD%BF%E7%94%A8IDEA%E8%AE%BE%E7%BD%AEspringboot%E7%83%AD%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h2 id="IDEA"><a href="#IDEA" class="headerlink" title="IDEA"></a>IDEA</h2><h3 id="在IDEA中添加配置如下"><a href="#在IDEA中添加配置如下" class="headerlink" title="在IDEA中添加配置如下"></a>在IDEA中添加配置如下</h3><ol><li>打开 setting ,搜索 <code>compiler</code> 后，把 <code>Build Project automaticial</code> 选项勾上</li></ol><p><img src="https://raw.githubusercontent.com/NanYinIU/PicRoom/master/img/20190531171258.png" alt="compiler"></p><ol start="2"><li>使用  <code>ctrl+shift+A</code>  快捷键打开窗口，并搜索 <code>Registry...</code> 。勾选 <code>compiler.automake.allow.when.app.running</code> </li></ol><p><img src="https://raw.githubusercontent.com/NanYinIU/PicRoom/master/img/20190531171606.png" alt="running"></p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2018-10-28-Junit4 2</title>
      <link href="/2019/06/19/2018-10-28-Junit4%202/"/>
      <url>/2019/06/19/2018-10-28-Junit4%202/</url>
      
        <content type="html"><![CDATA[<p>经过以上的步骤执行完一个test。</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2018-10-28-Junit4</title>
      <link href="/2019/06/19/2018-10-28-Junit4/"/>
      <url>/2019/06/19/2018-10-28-Junit4/</url>
      
        <content type="html"><![CDATA[<p>经过以上的步骤执行完一个test。</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2018-04-08-markdown基本语法</title>
      <link href="/2019/06/18/2018-04-08-markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
      <url>/2019/06/18/2018-04-08-markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<hr><p>layout:     post<br>title:      “MarkDown基本语法”<br>subtitle:   “为了博客的正常编辑，在正式整理之前，把markdown的基本语法先整理一下，万一忘了还能找个地方看看。。”<br>date:       2018-04-04 12:00:00<br>author:     “NanYin”<br>header-img: “img/home-bg.jpg”<br>tags:<br>    - markdown<br>    - 语法<br>categories:</p><ul><li>Markdown<br>copyright: true</li></ul><hr><h1 id="Markdown语法总结"><a href="#Markdown语法总结" class="headerlink" title="Markdown语法总结"></a>Markdown语法总结</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>其实markdown语法很简洁，并且相当多的博客，还有重要的github上的readme也是用markdown进行编辑。所以有必要整理一下。废话不多说，进入正文</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>一个 Markdown 段落是由一个或多个连续的文本行组成，它的前后要有一个以上的空行（空行的定义是显示上看起来像是空的，便会被视为空行。比方说，若某一行只包含空格和制表符，则该行也会被视为空行）。普通段落不该用空格或制表符来缩进。</p><p>在编辑的过程当中每编辑一块的内容，就要空一行，否则会出问题。。。</p><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a><strong>标题</strong></h3><p>markdown支持两种标题的语法，类 Setext 和类 atx 形式。<br>类 Setext 形式是用底线的形式，利用 = （最高阶标题）和 - （第二阶标题），例如：</p><blockquote><p>This is an H1</p><p>=============</p><p>This is an H2</p><p>-————</p></blockquote><p>效果</p><blockquote><h1 id="This-is-an-H1"><a href="#This-is-an-H1" class="headerlink" title="This is an H1"></a>This is an H1</h1><h2 id="This-is-an-H2"><a href="#This-is-an-H2" class="headerlink" title="This is an H2"></a>This is an H2</h2></blockquote><p>也能使用atx 使用 # 来进行1-6阶的划分 如：</p><blockquote><p># This is an H1</p><p>## This is an H2</p></blockquote><p>效果</p><blockquote><h1 id="This-is-an-H1-1"><a href="#This-is-an-H1-1" class="headerlink" title="This is an H1"></a>This is an H1</h1><h2 id="This-is-an-H2-1"><a href="#This-is-an-H2-1" class="headerlink" title="This is an H2"></a>This is an H2</h2></blockquote><h3 id="区块引用"><a href="#区块引用" class="headerlink" title="区块引用"></a><strong>区块引用</strong></h3><blockquote><p>区块应用 使用 &gt; 符号进行标识 。<br>能每行都使用 &gt; 进行标识，也能只在第一行标识效果相同</p></blockquote><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a><strong>列表</strong></h3><ol><li>无序列表 可以使用*号或者+号或者-号都是一样的</li><li>有序列表 可以使用数字加英文.加空格使用有序列表</li></ol><h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><p>三个以上的* 就是分割线</p><hr><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>Markdown 支持两种形式的链接语法： 行内式和参考式两种形式。</p><p>不管是哪一种，链接文字都是用 [方括号] 来标记。</p><p>要建立一个行内式的链接，只要在方块括号后面紧接着圆括号并插入网址链接即可，如果你还想要加上链接的 title 文字，只要在网址后面，用双引号把 title 文字包起来即可，例如：</p><blockquote><p>This is [an example](<a href="http://example.com/" target="_blank" rel="noopener">http://example.com/</a> “Title”) inline link.</p></blockquote><blockquote><p>[This link](<a href="http://example.net/" target="_blank" rel="noopener">http://example.net/</a>) has no title attribute.</p></blockquote><p> 效果</p><p> This is <a href="http://example.com/" title="Title" target="_blank" rel="noopener">an example</a> inline link.</p><p><a href="http://example.net/" target="_blank" rel="noopener">This link</a> has no title attribute.</p><p>下面是一个参考式链接的范例：</p><p>I get 10 times more traffic from [Google] [1] than from<br>[Yahoo] [2] or [MSN] [3].</p><p>[1]: <a href="http://google.com/" target="_blank" rel="noopener">http://google.com/</a>        “Google”</p><p>[2]: <a href="http://search.yahoo.com/" target="_blank" rel="noopener">http://search.yahoo.com/</a>  “Yahoo Search”</p><p>[3]: <a href="http://search.msn.com/" target="_blank" rel="noopener">http://search.msn.com/</a>    “MSN Search”</p><p>I get 10 times more traffic from <a href="http://google.com/" title="Google" target="_blank" rel="noopener">Google</a> than from<br><a href="http://search.yahoo.com/" title="Yahoo Search" target="_blank" rel="noopener">Yahoo</a> or <a href="http://search.msn.com/" title="MSN Search" target="_blank" rel="noopener">MSN</a>.</p><h3 id="强调"><a href="#强调" class="headerlink" title="强调"></a><strong>强调</strong></h3><p>使用两个<em>*或者_表示强调 使用一个</em>或者一个_表示斜体</p><p>如： <strong>helloworld</strong> <em>helloworld</em></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h3><p>使用`符号来使用代码块<br>行内代码使用`包起来 如 <code>print()</code></p><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a><strong>图片</strong></h3><p>同样的图片也有行内式和参考式<br>向链接一样只不过在前面多个 !</p><h3 id="大概语法就是这么多-markdown简单方便，推荐使用。。"><a href="#大概语法就是这么多-markdown简单方便，推荐使用。。" class="headerlink" title="大概语法就是这么多 markdown简单方便，推荐使用。。"></a>大概语法就是这么多 markdown简单方便，推荐使用。。</h3><p>自己写这种东西自己感觉写的都好菜，可能没有什么写博客的习惯，慢慢写吧，总有一天会整体清晰的。算了，自己看吧  :)</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2018-04-10-bash学习记录</title>
      <link href="/2019/06/18/2018-04-10-bash%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
      <url>/2019/06/18/2018-04-10-bash%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<ol start="24"><li><p><strong>| 管道</strong> 非常基础的概念 如 ls|grep .. 。</p></li><li><p>&amp;：后台执行  &amp;&amp; 和 || ：逻辑操作符</p></li><li><p>+ - * % 各自意义就不详细解释了</p></li></ol><p>资料引用 <a href="http://tldp.org/LDP/abs/html/index.html" target="_blank" rel="noopener">Advanced Bash-Scripting Guide</a> 文章特别详尽，有兴趣非常鼓励看原文。这里我只做了部分比较常用的比较容易理解的部分做了精简（原谅我英文不好 :) 破产版总结 - - ）。</p><p>作为bash学习总结的第一篇文章，篇幅不大，尽量做到简单，详尽易懂。当遇到问题能够回头看一看，希望能够起到好的作用！！</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2018-04-12-bash_exitCode</title>
      <link href="/2019/06/18/2018-04-12-bash_exitCode/"/>
      <url>/2019/06/18/2018-04-12-bash_exitCode/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2018-04-16-bash_operationAndRelatedTopics</title>
      <link href="/2019/06/18/2018-04-16-bash_operationAndRelatedTopics/"/>
      <url>/2019/06/18/2018-04-16-bash_operationAndRelatedTopics/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>需要注意的是</strong>bash不能理解浮点数，他会默认把浮点数当作字符串来处理。</p></blockquote><blockquote><p>需要在脚本中使用 <code>bc</code>来计算浮点数</p></blockquote><h3 id="三-其他操作符"><a href="#三-其他操作符" class="headerlink" title="三.其他操作符"></a>三.其他操作符</h3><ul><li><p>按位操作：</p><p>  <code>&lt;&lt;</code> : bitwise left shift (multiplies by 2 for each shift position)</p><p>  <code>&gt;&gt;</code>: bitwise right shift (divides by 2 for each shift position)</p><p>  <code>&amp;,|，～，^</code> : 分别对应 位与，位或，位否,异或</p></li><li><p>逻辑操作</p><p>  <code>！</code> ：非</p><p>  <code>&amp;&amp;</code> ： AND</p><p>  <code>||</code>  ： OR</p></li><li><p>杂项</p><p>  <code>，</code> ：逗号操作符，连接多个计算表达式，但是需要注意的是，这样只能返回最后一个算式的值</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> <span class="string">"t1 = ((5 + 3, 7 - 1, 15 - 4))"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"t1 = <span class="variable">$t1</span>"</span>            <span class="comment"># t1 = 11</span></span><br><span class="line"><span class="comment"># Here t1 is set to the result of the last operation. Why?</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">let</span> <span class="string">"t2 = ((a = 9, 15 / 3))"</span>      <span class="comment"># Set "a" and calculate "t2".</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"t2 = <span class="variable">$t2</span>    a = <span class="variable">$a</span>"</span>         <span class="comment"># t2 = 5    a = 9</span></span><br><span class="line">`</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2018-04-17-Java设计模式第一篇</title>
      <link href="/2019/06/18/2018-04-17-Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%AC%E4%B8%80%E7%AF%87/"/>
      <url>/2019/06/18/2018-04-17-Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%AC%E4%B8%80%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<hr><p>layout:     post<br>title:      “Java设计模式学习记录（一）”<br>subtitle:   “Java设计模式分类和原则”<br>date:       2018-04-17 15:00:00<br>author:     “NanYin”<br>header-img: “img/home-bg.jpg”<br>tags:<br>    - Java<br>    - 设计模式<br>categories:<br>    - 设计模式</p><h2 id="copyright-true"><a href="#copyright-true" class="headerlink" title="copyright: true"></a>copyright: true</h2><h1 id="Java设计模式学习记录（一）"><a href="#Java设计模式学习记录（一）" class="headerlink" title="Java设计模式学习记录（一）"></a>Java设计模式学习记录（一）</h1><p>每次学习完设计模式，过一阵就忘了，所以写几篇博客记录下，让自己的记忆更深刻一下。</p><p>推荐 <a href="https://www.cnblogs.com/malihe/p/6891920.html" target="_blank" rel="noopener">Java中23种设计模式–超快速入门及举例代码</a> 这篇博客。能快速了解设计模式。</p><p>推荐github上的项目<a href="https://github.com/iluwatar/java-design-patterns" target="_blank" rel="noopener">java-design-patterns</a> 有例子源码，可以通过具体例子了解设计模式。</p><h2 id="Java设计模式的基本分类"><a href="#Java设计模式的基本分类" class="headerlink" title="Java设计模式的基本分类"></a>Java设计模式的基本分类</h2><p>java的设计模式大体上分为三大类：</p><ul><li><p>创建型模式（5种）：工厂方法模式，抽象工厂模式，单例模式，建造者模式，原型模式。</p></li><li><p>结构型模式（7种）：适配器模式，装饰器模式，代理模式，外观模式，桥接模式，组合模式，享元模式。</p></li><li><p>行为型模式（11种）：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式</p></li></ul><h2 id="设计模式遵循的原则有六个"><a href="#设计模式遵循的原则有六个" class="headerlink" title="设计模式遵循的原则有六个"></a>设计模式遵循的原则有六个</h2><ul><li><p><strong>开闭原则（Open Close Principle）</strong></p><p>  　对扩展开放，对修改关闭。</p></li><li><p><strong>里氏代换原则（Liskov Substitution Principle）</strong></p><p>  只有当衍生类可以替换掉基类，软件单位的功能不受到影响时，基类才能真正被复用，而衍生类也能够在基类的基础上增加新的行为。</p></li><li><p><strong>依赖倒转原则（Dependence Inversion Principle）</strong></p><p>  　　这个是开闭原则的基础，对接口编程，依赖于抽象而不依赖于具体。</p></li><li><p><strong>接口隔离原则（Interface Segregation Principle）</strong></p><p>  使用多个隔离的接口来降低耦合度。</p></li><li><p><strong>迪米特法则（最少知道原则）（Demeter Principle）</strong></p><p>  一个实体应当尽量少的与其他实体之间发生相互作用，使得系统功能模块相对独立。</p></li><li><p><strong>合成复用原则（Composite Reuse Principle）</strong></p><p>  　原则是尽量使用合成/聚合的方式，而不是使用继承。继承实际上破坏了类的封装性，超类的方法可能会被子类修改。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2018-06-06-正则表达式</title>
      <link href="/2019/06/18/2018-06-06-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2019/06/18/2018-06-06-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<hr><p>layout:     post<br>title:      “正则表达式的入门”<br>subtitle:   “关于正则表达式的基本语法”<br>date:       2018-06-06 17:00:00<br>author:     “NanYin”<br>header-img: “img/home-bg.jpg”<br>tags:</p><ul><li>正则表达式</li><li>Linux<br>categories:</li><li>Linux<br>copyright: true</li></ul><hr><h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p>最近会时常遇到编写正则表达式，所以现在写一篇正则表达式的文章来简单记录一下学习正则的过程。</p><p>在这个网站有正则表达式的中文文档 -》 <a href="http://tool.oschina.net/uploads/apidocs/jquery/regexp.html" target="_blank" rel="noopener">正则表达式手册</a></p><h2 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h2><p>一般使用反斜杠 \ 来转义特殊字符 如在正则中有特殊意义的* 或者. 如果要使用原意则需要使用\来进行转义 如 \*。下面介绍几个具体的实例。</p><ol><li>^ 匹配输入字符串的开始位置</li><li>$ 匹配输入字符串的结束位置</li><li>. 匹配除去换行符之外的所有字符</li><li>* 匹配前面字符0次或者多次</li><li>? 匹配前面大的字符0次或者1次</li><li>+ 匹配前面字符一次或多次</li><li>\w 匹配字母或者数字</li><li>\s 匹配任意空白</li><li>\d 匹配数字</li><li>\b 匹配单词的开始或者结束</li></ol><p>一般使用 ^ 开头并且以 $ 结束，如验证5-12位数字的时候可以这样写 <code>^\d{5,12}$</code> 当字符串为 <code>&quot;hello world</code> 是，使用$时匹配到一处，而使用\b时会匹配到四处，分别为每个单词的开头和结尾。</p><p>特殊字符非常重要，是正则表达式的基本。在上面的例子中使用到了重复，也就是{m,n} m和n是重复的次数，如果n存在，那么就重复m到n次如果不存在，就重复m次。</p><h2 id="字符匹配"><a href="#字符匹配" class="headerlink" title="字符匹配"></a>字符匹配</h2><p><strong>当使用到非特殊字符的时候</strong>，可以使用中括号，如 [aeiou]用来表示其中的字符都可以匹配到。比如 字符串 <code>‘how hello’</code> 使用到正则表达式 <code>h[oe]</code> 这样可以提示匹配到两处</p><p><strong>当需要使用与特殊字符相反的含义的时候</strong> 使用反斜杠+大写字符的格式来进行匹配。比如匹配非字母和数字的字符就应该使用<code>\W</code>(因为使用匹配字母和数字的特殊字符是\w)。非特殊字符的反义使用^号。如[^aeiou]表示原因字符意外的任意字符。</p><p><strong>当想匹配多种情况的时候</strong>，比如我想匹配x或者y字符串那么就使用 x|y 来表示匹配x或者y。这样可以解决很多二义性的匹配串。</p><h2 id="分组的匹配"><a href="#分组的匹配" class="headerlink" title="分组的匹配"></a>分组的匹配</h2><p>当想对一个字符串进行重复，那么可以使用分组的功能。使用小括号来实现。典型的ip地址的匹配就可以这样使用(\d{1,3}.){3}\d{1,3}</p><p>使用 <code>\\+数字</code> 的形式 来实现重复那个分组的操作<br>如 <code>\b(\w+)\b\s+\1\b</code> 就可以匹配相同的字符串。</p><h2 id="贪婪模式"><a href="#贪婪模式" class="headerlink" title="贪婪模式"></a>贪婪模式</h2><p>当使用?紧跟其他任何一个其他限制符之后比如. * 之后，匹配模式是非贪婪的，尽可能少的匹配搜素的所有字符串。比如搜多ppppppp字符串，使用‘o+?’会匹配到单个o</p><h2 id="关于-的后续"><a href="#关于-的后续" class="headerlink" title="关于 的后续"></a>关于 的后续</h2><ul><li><p>(?:pattern) 匹配pattern但不获取结果。这在使用|来组合一个模式的各个部分非常有用，比如常规匹配两种字符串“username|userManner”可以使用user(?:name|Manner)来简写。</p></li><li><p>(?=pattern) 正向肯定预查。比如windows(?=95|03|NT)能够匹配到windows95中的windows而不能匹配到windowsxp中的windows</p></li><li><p>(?!pattern) 正向否定预查。与上面的意思相似，就是能够匹配到非的指定条件。比如windows(?!95|03|NT`能够匹配到windowsxp中的windows而不能匹配到windows95中的windows</p></li><li><p>(?&lt;=pattern) 反向肯定预查。和第一个很相近，只不过方向不同。</p></li><li><p>(?&lt;!) 反向否定预查 。</p></li></ul><p>这次的正则表达式就先总结到这里，以后肯定会遇到更多的关于正则的问题。有时间一定还要读读<a href="https://www.regular-expressions.info/" target="_blank" rel="noopener">英文的正则教程</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2018-06-11-bash_07_bash中的循环和分支</title>
      <link href="/2019/06/18/2018-06-11-bash_07_bash%E4%B8%AD%E7%9A%84%E5%BE%AA%E7%8E%AF%E5%92%8C%E5%88%86%E6%94%AF/"/>
      <url>/2019/06/18/2018-06-11-bash_07_bash%E4%B8%AD%E7%9A%84%E5%BE%AA%E7%8E%AF%E5%92%8C%E5%88%86%E6%94%AF/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2018-06-12-bash_08_bash中的循环和分支（二）</title>
      <link href="/2019/06/18/2018-06-12-bash_08_bash%E4%B8%AD%E7%9A%84%E5%BE%AA%E7%8E%AF%E5%92%8C%E5%88%86%E6%94%AF%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2019/06/18/2018-06-12-bash_08_bash%E4%B8%AD%E7%9A%84%E5%BE%AA%E7%8E%AF%E5%92%8C%E5%88%86%E6%94%AF%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2018-06-16-bash_09_命令置换</title>
      <link href="/2019/06/18/2018-06-16-bash_09_%E5%91%BD%E4%BB%A4%E7%BD%AE%E6%8D%A2/"/>
      <url>/2019/06/18/2018-06-16-bash_09_%E5%91%BD%E4%BB%A4%E7%BD%AE%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<p>今天的内容有点少。。。</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2018-06-19-bash_09-bash命令篇（一）</title>
      <link href="/2019/06/18/2018-06-19-bash_09-bash%E5%91%BD%E4%BB%A4%E7%AF%87%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2019/06/18/2018-06-19-bash_09-bash%E5%91%BD%E4%BB%A4%E7%AF%87%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2018-06-23-关于elementryOS挂起之后唤醒时黑屏问题</title>
      <link href="/2019/06/18/2018-06-23-%E5%85%B3%E4%BA%8EelementryOS%E6%8C%82%E8%B5%B7%E4%B9%8B%E5%90%8E%E5%94%A4%E9%86%92%E6%97%B6%E9%BB%91%E5%B1%8F%E9%97%AE%E9%A2%98/"/>
      <url>/2019/06/18/2018-06-23-%E5%85%B3%E4%BA%8EelementryOS%E6%8C%82%E8%B5%B7%E4%B9%8B%E5%90%8E%E5%94%A4%E9%86%92%E6%97%B6%E9%BB%91%E5%B1%8F%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<hr><p>layout:     post<br>title:      “关于ElementryOS图形界面挂起之后唤醒后出现黑屏问题”<br>subtitle:   “关于ElementryOS图形界面挂起之后唤醒后出现黑屏问题”<br>date:       2018-06-23 12:00:00<br>author:     “NanYin”<br>header-img: “img/bg_1.jpg”<br>tags:<br>    - Linux<br>categories:<br>    - Linux</p><h2 id="copyright-true"><a href="#copyright-true" class="headerlink" title="copyright: true"></a>copyright: true</h2><h1 id="关于ElementryOS图形界面挂起之后唤醒后出现黑屏问题"><a href="#关于ElementryOS图形界面挂起之后唤醒后出现黑屏问题" class="headerlink" title="关于ElementryOS图形界面挂起之后唤醒后出现黑屏问题"></a>关于ElementryOS图形界面挂起之后唤醒后出现黑屏问题</h1><p>这两天在ElementryOs上踩到了坑，为了以后少踩点这种坑，打算以后将这种小问题也写下来。</p><p>如何解决：安装  <code>xserver-xorg</code></p><p>在ElementryOS的终端中使用 <code>$ sudo apt-get install xserver-xorg</code>  我使用这个方法可以解决问题</p><p>解决时间：2018-6-23 版本：ElementryOS Loki 0.4</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2018-06-24-bash_10_bash命令篇（二）</title>
      <link href="/2019/06/18/2018-06-24-bash_10_bash%E5%91%BD%E4%BB%A4%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2019/06/18/2018-06-24-bash_10_bash%E5%91%BD%E4%BB%A4%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<ul><li><p>nl nl和cat -b有着相似的意义，都能够连同行号打印出来，不同的是，nl可以将空行去除掉。</p></li><li><p>iconv 这个命令能够将文件转换编码，如utf-8转换成utf-16这类的转化。</p></li></ul><h3 id="这类命令真的很多，需要积累的东西也很多，我在这里就做个简单的说明，具体的使用可以-man-命令-查看具体的使用方法。也是学习的一种方式！！"><a href="#这类命令真的很多，需要积累的东西也很多，我在这里就做个简单的说明，具体的使用可以-man-命令-查看具体的使用方法。也是学习的一种方式！！" class="headerlink" title="这类命令真的很多，需要积累的东西也很多，我在这里就做个简单的说明，具体的使用可以 man 命令 查看具体的使用方法。也是学习的一种方式！！"></a>这类命令真的很多，需要积累的东西也很多，我在这里就做个简单的说明，具体的使用可以 man 命令 查看具体的使用方法。也是学习的一种方式！！</h3>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2018-06-27-bash_11_bash命令篇（三）</title>
      <link href="/2019/06/18/2018-06-27-bash_11_bash%E5%91%BD%E4%BB%A4%E7%AF%87%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>/2019/06/18/2018-06-27-bash_11_bash%E5%91%BD%E4%BB%A4%E7%AF%87%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<ol start="3"><li>let: 表达式可以应用在let命令当中。</li></ol><h3 id="其实在我使用linux系统的几年里，感觉命令不能死记硬背，多用自然就会掌握了。但是有些比较冷门的命令还是背下来比较好-。"><a href="#其实在我使用linux系统的几年里，感觉命令不能死记硬背，多用自然就会掌握了。但是有些比较冷门的命令还是背下来比较好-。" class="headerlink" title="其实在我使用linux系统的几年里，感觉命令不能死记硬背，多用自然就会掌握了。但是有些比较冷门的命令还是背下来比较好 - -。"></a>其实在我使用linux系统的几年里，感觉命令不能死记硬背，多用自然就会掌握了。但是有些比较冷门的命令还是背下来比较好 - -。</h3>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2018-06-28-bash_12_bash管理员命令</title>
      <link href="/2019/06/18/2018-06-28-bash_12_bash%E7%AE%A1%E7%90%86%E5%91%98%E5%91%BD%E4%BB%A4/"/>
      <url>/2019/06/18/2018-06-28-bash_12_bash%E7%AE%A1%E7%90%86%E5%91%98%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<ul><li><p>chown 命令可以改变文件所属的用户或者用户组。也可以简单的理解给用户某些文件的权限。</p></li><li><p>chgrp 命令可以改变用户所属组。</p></li><li><p>useradd 可以为系统添加一个用户，并且在创建该用户的home文件夹。删除用户可以使用userdel命令进行删除。</p></li><li><p>usermod 命令可以改变用户属性，可以是密码也可以是用户组之类的</p></li><li><p>id 命令可以打印出用户及所在用户组的用户名和组名以及对应的id值</p></li><li><p>whoami 打印出当前用户的用户名称</p></li><li><p>passwd 设置，更改和管理用户的密码</p></li></ul><h2 id="基本信息和状态"><a href="#基本信息和状态" class="headerlink" title="基本信息和状态"></a>基本信息和状态</h2><ul><li><p>uname 可以输出系统的具体参数如内核版本等信息。</p></li><li><p>arch 可以输出系统基于多少位</p></li><li><p>nc （netcat）是用于连接和侦听TCP和UDP端口的完整工具包。</p></li><li><p>lsdev 输出设备，也就是硬件信息</p></li><li><p>df 格式化输出文件系统占用比 一般使用df -h</p></li><li><p>stat 输出文件的状态信息。</p></li></ul><h2 id="系统工作流"><a href="#系统工作流" class="headerlink" title="系统工作流"></a>系统工作流</h2><ul><li><p>ps 查看进程信息 通常后面加 <code>ax</code> 或者 <code>aux</code> 使用。</p></li><li><p>pstree 以树形结构展示进程信息。</p></li><li><p>top 输出cpu的信息使用 -b参数以text的形式输出。能够以静态的方式查看。</p></li><li><p>nice用于指定进程调节优先级的命令。</p></li><li><p>pidof 可以输出具体进程的id 如：<code>pidof xclock</code> 会输出 xclock的进程id号。</p></li></ul><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><ul><li><p>nmap 网络映射和端口扫描（现在只记得大学时网络攻防里用过windows里有个工具叫nmap什么的。。）参数有很多。。</p></li><li><p>ifconfig 最熟的查看网络接口设置。</p></li><li><p>netstat 输出网络状态和信息，如路由表和连接状态等。</p></li><li><p>ip 可以查询和设置ip和访问网卡设别信息</p></li></ul><h2 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h2><ul><li><p>mount 挂载文件系统</p></li><li><p>umount 卸载设备</p></li><li><p>sync 强制立即从缓冲区写入数据以来达到立即更新数据的目的。</p></li><li><p>mkswap swapon swapoff 分别对应格式化为交换分区，启动交换分区，关闭交换分区。</p></li><li><p>fdisk 创建或更改分区表，也就是用来分区的工具。非常常见。当时我还是选择cfdisk</p></li><li><p>lspci 输出总线信息，和连接总线的设备信息。</p></li></ul><h3 id="其实还有很多命令没有涉及到，如果想练习这些基本的系统命令的话，可以跟着arch-wiki-装一遍arch，装完后这里的命令就都能记住了。"><a href="#其实还有很多命令没有涉及到，如果想练习这些基本的系统命令的话，可以跟着arch-wiki-装一遍arch，装完后这里的命令就都能记住了。" class="headerlink" title="其实还有很多命令没有涉及到，如果想练习这些基本的系统命令的话，可以跟着arch wiki 装一遍arch，装完后这里的命令就都能记住了。"></a>其实还有很多命令没有涉及到，如果想练习这些基本的系统命令的话，可以跟着arch wiki 装一遍arch，装完后这里的命令就都能记住了。</h3>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2018-07-01-bash_13_bash中的输入输出</title>
      <link href="/2019/06/18/2018-07-01-bash_13_bash%E4%B8%AD%E7%9A%84%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/"/>
      <url>/2019/06/18/2018-07-01-bash_13_bash%E4%B8%AD%E7%9A%84%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/</url>
      
        <content type="html"><![CDATA[<h3 id="其实在linux-下一切都是文件。把所有都想成文件就好理解的多了。"><a href="#其实在linux-下一切都是文件。把所有都想成文件就好理解的多了。" class="headerlink" title="其实在linux 下一切都是文件。把所有都想成文件就好理解的多了。"></a>其实在linux 下一切都是文件。把所有都想成文件就好理解的多了。</h3>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2018-07-03-bash_14_bash中的函数</title>
      <link href="/2019/06/18/2018-07-03-bash_14_bash%E4%B8%AD%E7%9A%84%E5%87%BD%E6%95%B0/"/>
      <url>/2019/06/18/2018-07-03-bash_14_bash%E4%B8%AD%E7%9A%84%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2018-07-06-bash_15_终章</title>
      <link href="/2019/06/18/2018-07-06-bash_15_%E7%BB%88%E7%AB%A0/"/>
      <url>/2019/06/18/2018-07-06-bash_15_%E7%BB%88%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<ul><li>zero 为指定目的的文件来清零（指定大小的文件）</li></ul><h3 id="以上就是我在bash学习中的所有内容，当然会在以后写一些实际的bash脚本。这个bash学习系列就写到这。"><a href="#以上就是我在bash学习中的所有内容，当然会在以后写一些实际的bash脚本。这个bash学习系列就写到这。" class="headerlink" title="以上就是我在bash学习中的所有内容，当然会在以后写一些实际的bash脚本。这个bash学习系列就写到这。"></a>以上就是我在bash学习中的所有内容，当然会在以后写一些实际的bash脚本。这个bash学习系列就写到这。</h3>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2018-07-12-bash问题总结</title>
      <link href="/2019/06/18/2018-07-12-bash%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"/>
      <url>/2019/06/18/2018-07-12-bash%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h3 id="关于-var-var是变量名"><a href="#关于-var-var是变量名" class="headerlink" title="关于${!var} var是变量名"></a>关于${!var} var是变量名</h3><p>使用${!var}的作用是当ver不存在的时候会原样输出，也就是显示${var}</p><h3 id="关于bash中的trap命令的使用"><a href="#关于bash中的trap命令的使用" class="headerlink" title="关于bash中的trap命令的使用"></a>关于bash中的trap命令的使用</h3><p>trap可以强化bash脚本，让脚本更加稳定。</p><h4 id="trap的使用方式"><a href="#trap的使用方式" class="headerlink" title="trap的使用方式"></a>trap的使用方式</h4><p>trap有三种使用方式，对应这不同的对信号的回应方式。</p><ol><li>trap ”something“ signal</li></ol><p>其中”something“ 是在接受signal信号之后作出的命令</p><ol start="2"><li>trap signal </li></ol><p>trap不指定任何命令，接受信号的默认操作，默认操作是结束进程的运行</p><ol start="3"><li>trap “” signal</li></ol><p>trap命令指定一个空命令串，允许忽视信号</p><h4 id="常用信号"><a href="#常用信号" class="headerlink" title="常用信号"></a>常用信号</h4><ul><li><p>HUB(1) 挂起，通常因终端掉线或用户退出而引发</p></li><li><p>INT(2) 中断，通常因按下Ctrl+C组合键而引发</p></li><li><p>QUIT(3) 退出，通常因按下Ctrl+/组合键而引发</p></li><li><p>ABRT(6) 中止，通常因某些严重的执行错误而引发</p></li><li><p>ALRM(14) 报警，通常用来处理超时</p></li><li><p>TERM(15) 终止，通常在系统关机时发送</p></li><li><p>KILL(9) 杀死进程</p></li><li><p>STOP 停止进程执行</p></li></ul><p>更过的信号 可以使用 trap -l 命令来查看</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2018-07-15-idea快捷键</title>
      <link href="/2019/06/18/2018-07-15-idea%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
      <url>/2019/06/18/2018-07-15-idea%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<hr><p>layout:     post<br>title:      “IDEA 中的快捷键”<br>subtitle:   “IDEA 中的经常用到的快捷键”<br>date:       2018-07-12 17:00:00<br>author:     “NanYin”<br>header-img: “img/home-bg.jpg”<br>tags:<br>    - idea<br>copyright: ture<br>categories:</p><pre><code>- 工具</code></pre><hr><h1 id="IDEA-中的快捷键"><a href="#IDEA-中的快捷键" class="headerlink" title="IDEA 中的快捷键"></a>IDEA 中的快捷键</h1><p>以前经常用idea开发，但是竟然没有怎么使用到idea的快捷键。。没有真正的使用到idea中非常重要的特性。今天正好看到了有一篇微信公众号里文章总结了关于常用的idea快捷键。<br>遂而也想小小总结一下，希望在以后的开发中多用快捷键，提高开发效率。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><ol><li><p>ctrl+alt+o = 优化导入的包</p></li><li><p>alt+insert = 加入代码</p></li><li><p>ctrl+alt+T = 生成try–catch结构</p></li><li><p>alt+回车   = 导入包</p></li><li><p>ctrl+alt+l = 格式化代码</p></li><li><p>ctrl+e     = 最近更改的代码</p></li><li><p>Shift+F6   = 重构-重命名 包、类、方法、变量、甚至注释等</p></li></ol><h2 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h2><ol><li><p>ctrl+Shift+backspace =回到上次编辑的地方</p></li><li><p>ctrl+alt+left/right = 回到前后编辑的地方</p></li><li><p>Shift+Shift 在目录中查找类</p></li><li><p>ctrl+n 查找类</p></li><li><p>ctrl+Shift+n 查找文件</p></li><li><p>ctrl+e 打开最近文件</p></li><li><p>ctrl+f 文件内容查找</p></li><li><p>ctrl+shift+f 全局内容查找</p></li><li><p>ctrl+w 快速选中</p></li><li><p>ctrl+b/ctrl+alt+b 对应这回溯到父类和到子类的快捷键</p></li></ol><h2 id="对行的删除，复制，粘贴操作可以使用vim插件来实现"><a href="#对行的删除，复制，粘贴操作可以使用vim插件来实现" class="headerlink" title="对行的删除，复制，粘贴操作可以使用vim插件来实现"></a>对行的删除，复制，粘贴操作可以使用vim插件来实现</h2><h2 id="最后vim的十大快捷键（copy的）"><a href="#最后vim的十大快捷键（copy的）" class="headerlink" title="最后vim的十大快捷键（copy的）"></a>最后vim的十大快捷键（copy的）</h2><p>Ø  Top #10切来切去：Ctrl+Tab</p><p>Ø  Top #9选你所想：Ctrl+W</p><p>Ø  Top #8代码生成：Template/Postfix +Tab</p><p>Ø  Top #7发号施令：Ctrl+Shift+A</p><p>Ø  Top #6无处藏身：Shift+Shift</p><p>Ø  Top #5自动完成：Ctrl+Shift+Enter</p><p>Ø  Top #4创造万物：Alt+Insert</p><p>太难割舍，前三名并列吧！</p><p>Ø  Top #1智能补全：Ctrl+Shift+Space</p><p>Ø  Top #1自我修复：Alt+Enter</p><p>Ø  Top #1重构一切：Ctrl+Shift+Alt+T</p><h2 id="另外补充"><a href="#另外补充" class="headerlink" title="另外补充"></a>另外补充</h2><ol><li><p>alt+1 project视图</p></li><li><p>alt+7 类方法结构</p></li><li><p>alt+home 显示导航栏</p></li><li><p>shift+f6 重命名</p></li><li><p>ctrl+shift+加号 折叠代码</p></li></ol><p>关闭tab页其实是有必要的</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2018-07-25-stackOverFlow上的热门问题</title>
      <link href="/2019/06/18/2018-07-25-stackOverFlow%E4%B8%8A%E7%9A%84%E7%83%AD%E9%97%A8%E9%97%AE%E9%A2%98/"/>
      <url>/2019/06/18/2018-07-25-stackOverFlow%E4%B8%8A%E7%9A%84%E7%83%AD%E9%97%A8%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2018-10-04-ArrayList的源码查看</title>
      <link href="/2019/06/18/2018-10-04-ArrayList%E7%9A%84%E6%BA%90%E7%A0%81%E6%9F%A5%E7%9C%8B/"/>
      <url>/2019/06/18/2018-10-04-ArrayList%E7%9A%84%E6%BA%90%E7%A0%81%E6%9F%A5%E7%9C%8B/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2018-10-08-LinkedList的源码查看</title>
      <link href="/2019/06/18/2018-10-08-LinkedList%E7%9A%84%E6%BA%90%E7%A0%81%E6%9F%A5%E7%9C%8B/"/>
      <url>/2019/06/18/2018-10-08-LinkedList%E7%9A%84%E6%BA%90%E7%A0%81%E6%9F%A5%E7%9C%8B/</url>
      
        <content type="html"><![CDATA[<h4 id="offer方法"><a href="#offer方法" class="headerlink" title="offer方法"></a>offer方法</h4><p>实际上 <code>offer</code> 是调用的 <code>add</code> 方法，但是区别就在 <code>linkedlist</code> 继承了 <code>Dequ</code> 和 <code>List</code> 父类。一般当 <code>queue</code> 用的时候要用 <code>offer/push/pop</code>  而当使用 <code>list</code> 的时候用 <code>add/remove</code> 。</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2018-10-10-hashmap的源码查看</title>
      <link href="/2019/06/18/2018-10-10-hashmap%E7%9A%84%E6%BA%90%E7%A0%81%E6%9F%A5%E7%9C%8B/"/>
      <url>/2019/06/18/2018-10-10-hashmap%E7%9A%84%E6%BA%90%E7%A0%81%E6%9F%A5%E7%9C%8B/</url>
      
        <content type="html"><![CDATA[<p>这是几个非常常用的hashMap的方法和基本的数据结构源码的分析查看。就当做笔记记录一下。</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2018-10-15-Enum类及相关拓展</title>
      <link href="/2019/06/18/2018-10-15-Enum%E7%B1%BB%E5%8F%8A%E7%9B%B8%E5%85%B3%E6%8B%93%E5%B1%95/"/>
      <url>/2019/06/18/2018-10-15-Enum%E7%B1%BB%E5%8F%8A%E7%9B%B8%E5%85%B3%E6%8B%93%E5%B1%95/</url>
      
        <content type="html"><![CDATA[<p><code>EnumSet</code> 相对于 <code>EnumMap</code> 等同于 <code>hashSet</code> 相对于 <code>HashMap</code> 的存在，很好理解。</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2018-10-15-HashSet和HashTable的源码分析</title>
      <link href="/2019/06/18/2018-10-15-HashSet%E5%92%8CHashTable%E7%9A%84%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
      <url>/2019/06/18/2018-10-15-HashSet%E5%92%8CHashTable%E7%9A%84%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>通过上面的代码可以看出HashTable和HashMap的结构还是有差异的，HashMap是纵向的列表当出现相同的hash值的时候，扩展出横向列表，当横向的列表到达一定的长度的时候，这个横向的链表就会自动整理成红黑树的形式，而hashTable不存在横向的这种结构的，当count&gt;=阈值的时候就会把Hash重置，使之不会出现hash值重复的情况。可以说hashTable比较hashMap的结构更简单，但是效率会比HashMap的低。</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2018-10-17-Java中的栈和队列</title>
      <link href="/2019/06/18/2018-10-17-Java%E4%B8%AD%E7%9A%84%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/"/>
      <url>/2019/06/18/2018-10-17-Java%E4%B8%AD%E7%9A%84%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<p>这几个方法和linkedList类中的对应的方法非常像，所以其实LindedList也可以当作栈用。</p><h2 id="Queue-队列"><a href="#Queue-队列" class="headerlink" title="Queue 队列"></a>Queue 队列</h2><p>队列和栈相反，是一个先进后出的数据结构，想成现实中的排队再明白不过了。</p><h3 id="offer-方法和-pull方法"><a href="#offer-方法和-pull方法" class="headerlink" title="offer 方法和 pull方法"></a>offer 方法和 pull方法</h3><p>offer方法可以将元素放入队列当中，pull可以将元素从头部移除。</p><h3 id="add方法和remove方法"><a href="#add方法和remove方法" class="headerlink" title="add方法和remove方法"></a>add方法和remove方法</h3><p>add和remove方法分别调用offer和pull方法，不同的是，如果队列满了，add方法会抛出异常，而offer方法会返回null。如果队列空了，remove方法会抛出异常，而pull方法会返回null。</p><p>以后会提及队列的实现类以及Dequ相关类。</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2018-10-24-Java中Deque及其子类</title>
      <link href="/2019/06/18/2018-10-24-Java%E4%B8%ADDeque%E5%8F%8A%E5%85%B6%E5%AD%90%E7%B1%BB/"/>
      <url>/2019/06/18/2018-10-24-Java%E4%B8%ADDeque%E5%8F%8A%E5%85%B6%E5%AD%90%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<p>总结一下，ArrayDeque实现了双端队列的特点，能够完成栈和队列的功能，效率比同样继承Deque的LinkedList效率高，因为在ArrayDeque中的计算大部分为位运算。ArrayDeque逻辑上循环的数组，但实际上并不是。</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2018-11-08-String和StringBuffer和StringBuilder的联系和区别</title>
      <link href="/2019/06/18/2018-11-08-String%E5%92%8CStringBuffer%E5%92%8CStringBuilder%E7%9A%84%E8%81%94%E7%B3%BB%E5%92%8C%E5%8C%BA%E5%88%AB/"/>
      <url>/2019/06/18/2018-11-08-String%E5%92%8CStringBuffer%E5%92%8CStringBuilder%E7%9A%84%E8%81%94%E7%B3%BB%E5%92%8C%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2018-12-18-关于SpringMvc使用DELETE和PUT请求时405错误</title>
      <link href="/2019/06/18/2018-12-18-%E5%85%B3%E4%BA%8ESpringMvc%E4%BD%BF%E7%94%A8DELETE%E5%92%8CPUT%E8%AF%B7%E6%B1%82%E6%97%B6405%E9%94%99%E8%AF%AF/"/>
      <url>/2019/06/18/2018-12-18-%E5%85%B3%E4%BA%8ESpringMvc%E4%BD%BF%E7%94%A8DELETE%E5%92%8CPUT%E8%AF%B7%E6%B1%82%E6%97%B6405%E9%94%99%E8%AF%AF/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2018-4-11-bash_变量</title>
      <link href="/2019/06/18/2018-4-11-bash_%E5%8F%98%E9%87%8F/"/>
      <url>/2019/06/18/2018-4-11-bash_%E5%8F%98%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<p>可以看出使用$()的作用和使用``的作用相同，都可以对命令进行包裹。</p><h2 id="bash变量没有类型"><a href="#bash变量没有类型" class="headerlink" title="bash变量没有类型"></a>bash变量没有类型</h2><p>不像其他的很多编程语言，bash脚本中的变量是没有类型的。无类型的变量是把双刃剑，一方面更加灵活，另一方面会渗透一些小的问题。</p><p>所以bash提供声明变量，会在后面的章节对声明变量的参数等信息详细列出来。</p><h2 id="特殊的变量类型-Special-Variable-Types"><a href="#特殊的变量类型-Special-Variable-Types" class="headerlink" title="特殊的变量类型(Special Variable Types)"></a>特殊的变量类型(Special Variable Types)</h2><ul><li><p>本地变量：变量只能在代码块和函数中可见</p></li><li><p>系统变量：变量影响shell的行为和用户的接口（比如设置Java环境变量）</p><p>  如果脚本需要设置环境变量那么就去 <code>export ..</code></p></li><li><p>位置参数：</p><p>  $0是脚本名称，1-9等对应其位置，10之后要使用大括号扩起来。$#对应最后一个元素</p><p>  使用shift命令可以将位置参数重新排列，实际上就是向左移动一级。</p></li></ul><h3 id="这次篇幅较小，主要讲了讲bash中的变量和位置参数的含义和使用，属于非常基础，非常容易理解的部分。"><a href="#这次篇幅较小，主要讲了讲bash中的变量和位置参数的含义和使用，属于非常基础，非常容易理解的部分。" class="headerlink" title="这次篇幅较小，主要讲了讲bash中的变量和位置参数的含义和使用，属于非常基础，非常容易理解的部分。"></a>这次篇幅较小，主要讲了讲bash中的变量和位置参数的含义和使用，属于非常基础，非常容易理解的部分。</h3>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2018-12-18-Pop!_Os的Ibus输入法上方panel图标消失的问题</title>
      <link href="/2019/06/18/2018-12-18-Pop!_Os%E7%9A%84Ibus%E8%BE%93%E5%85%A5%E6%B3%95%E4%B8%8A%E6%96%B9panel%E5%9B%BE%E6%A0%87%E6%B6%88%E5%A4%B1%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2019/06/18/2018-12-18-Pop!_Os%E7%9A%84Ibus%E8%BE%93%E5%85%A5%E6%B3%95%E4%B8%8A%E6%96%B9panel%E5%9B%BE%E6%A0%87%E6%B6%88%E5%A4%B1%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>解决！！</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-01-04-Ubuntu配置全过程 2</title>
      <link href="/2019/06/18/2019-01-04-Ubuntu%E9%85%8D%E7%BD%AE%E5%85%A8%E8%BF%87%E7%A8%8B%202/"/>
      <url>/2019/06/18/2019-01-04-Ubuntu%E9%85%8D%E7%BD%AE%E5%85%A8%E8%BF%87%E7%A8%8B%202/</url>
      
        <content type="html"><![CDATA[<p>其中会让你输入密码，输入就行了。</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2018-10-29-什么是消息中间件，RPC框架，数据库中间件</title>
      <link href="/2019/06/18/2018-10-29-%E4%BB%80%E4%B9%88%E6%98%AF%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6%EF%BC%8CRPC%E6%A1%86%E6%9E%B6%EF%BC%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
      <url>/2019/06/18/2018-10-29-%E4%BB%80%E4%B9%88%E6%98%AF%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6%EF%BC%8CRPC%E6%A1%86%E6%9E%B6%EF%BC%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD%E9%97%B4%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<hr><p>title: “消息中间件，RPC框架，数据库中间件的概念认知”<br>date: “2018-10-29 22:05”<br>author:     “NanYin”<br>copyright: ture<br>tags:<br>    - Java<br>categories:</p><pre><code>- Java</code></pre><hr><h1 id="消息中间件，RPC框架，数据库中间件的概念认知"><a href="#消息中间件，RPC框架，数据库中间件的概念认知" class="headerlink" title="消息中间件，RPC框架，数据库中间件的概念认知"></a>消息中间件，RPC框架，数据库中间件的概念认知</h1><h2 id="消息中间件"><a href="#消息中间件" class="headerlink" title="消息中间件"></a>消息中间件</h2><h3 id="什么是消息中间件"><a href="#什么是消息中间件" class="headerlink" title="什么是消息中间件"></a>什么是消息中间件</h3><p>对中间件的理解大概就是具体业务和底层逻辑解耦的组件。相当于前端业务和底层逻辑的中间桥梁。</p><p>消息中间件是在分布式系统中发送和接受消息的基础服务设施。</p><h3 id="能够做什么？"><a href="#能够做什么？" class="headerlink" title="能够做什么？"></a>能够做什么？</h3><ul><li>业务解耦：交易系统不需要知道短信通知服务的存在，只需要发布消息</li><li>削峰填谷：比如上游系统的吞吐能力高于下游系统，在流量洪峰时可能会冲垮下游系统，消息中间件可以在峰值时堆积消息，而在峰值过去后下游系统慢慢消费消息解决流量洪峰的问题</li><li>事件驱动：系统与系统之间可以通过消息传递的形式驱动业务，以流式的模型处理</li></ul><h2 id="RPC框架"><a href="#RPC框架" class="headerlink" title="RPC框架"></a>RPC框架</h2><h3 id="什么是RPC框架"><a href="#什么是RPC框架" class="headerlink" title="什么是RPC框架"></a>什么是RPC框架</h3><p>远程过程调用协议RPC（Remote Procedure Call Protocol) 两台服务器A，B，一个应用部署在A服务器上，想要调用B服务器上应用提供的函数/方法，<br>由于不在一个内存空间，不能直接调用，需要通过网络来表达调用的语义和传达调用的数据。</p><h3 id="能够做什么？-1"><a href="#能够做什么？-1" class="headerlink" title="能够做什么？"></a>能够做什么？</h3><ul><li>建立客户端和服务器之间的TCP链接，不同的RPC协议，有不同的连接寻址方式。</li><li>在发起远程调用时，由于网络协议是二进制的，所以在传输前要进行对传输实体进行转换二进制的过程，也是就序列化过程（Serialize），通过寻址和二进制的数据传输到服务器端</li><li>在接受到数据后，需要进行反序列化过程解析二进制数据。</li></ul><p>其实就是解决在分布式下，横向拓展的前提下，不同服务器相互调用方法的问题。</p><h2 id="数据库中间件"><a href="#数据库中间件" class="headerlink" title="数据库中间件"></a>数据库中间件</h2><h3 id="什么是数据库中间件"><a href="#什么是数据库中间件" class="headerlink" title="什么是数据库中间件"></a>什么是数据库中间件</h3><p>同样在分布式的架构中，数据库也放到不同的服务器上，需要通过中间的路由进行调用。这个路由实际上就是数据库中间件。</p><h3 id="能够做什么？-2"><a href="#能够做什么？-2" class="headerlink" title="能够做什么？"></a>能够做什么？</h3><ul><li>实现读写分离，但是每个服务器上都需要有一份完整的数据库</li><li>实现分库分表，通过消息中间件进行查询分派到某一个特定的服务器上，通过这个服务器查询出内容返回到消息中间件，再通过中间件返回到客户端。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-01-04-Ubuntu配置全过程</title>
      <link href="/2019/06/18/2019-01-04-Ubuntu%E9%85%8D%E7%BD%AE%E5%85%A8%E8%BF%87%E7%A8%8B/"/>
      <url>/2019/06/18/2019-01-04-Ubuntu%E9%85%8D%E7%BD%AE%E5%85%A8%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>其中会让你输入密码，输入就行了。</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-01-25-过程问题</title>
      <link href="/2019/06/18/2019-01-25-%E8%BF%87%E7%A8%8B%E9%97%AE%E9%A2%98/"/>
      <url>/2019/06/18/2019-01-25-%E8%BF%87%E7%A8%8B%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-01-29-基本Llinux命令(必须掌握)</title>
      <link href="/2019/06/18/2019-01-29-%E5%9F%BA%E6%9C%ACLlinux%E5%91%BD%E4%BB%A4(%E5%BF%85%E9%A1%BB%E6%8E%8C%E6%8F%A1)/"/>
      <url>/2019/06/18/2019-01-29-%E5%9F%BA%E6%9C%ACLlinux%E5%91%BD%E4%BB%A4(%E5%BF%85%E9%A1%BB%E6%8E%8C%E6%8F%A1)/</url>
      
        <content type="html"><![CDATA[<hr><p>layout:     post<br>title:      “Linux常用命令整理”<br>date:       2019-01-29 12:00:00<br>author:     “NanYin”<br>copyright: ture<br>tags:<br>    - Linux<br>categories:</p><pre><code>- Linux</code></pre><hr><h1 id="linux中必须掌握的基本命令"><a href="#linux中必须掌握的基本命令" class="headerlink" title="linux中必须掌握的基本命令"></a>linux中必须掌握的基本命令</h1><p>在开始前，我推荐安装 <a href="https://github.com/tldr-pages/tldr" target="_blank" rel="noopener">trdr（too long dont read）</a>工具，用来简化man命令，来实现查看命令含义和用法的作用。</p><h2 id="一-、系统工作命令"><a href="#一-、系统工作命令" class="headerlink" title="一 、系统工作命令"></a>一 、系统工作命令</h2><ol><li><p><code>echo</code></p><p><code>echo</code>命令一般用于shell中打印变量或者字符串的作用，主要用来显示和提醒。</p><ul><li>输出一段信息 如：<code>echo &quot;hello world&quot;</code> 其中<code>&quot;</code>不是必须的 </li><li>输出一段带环境变量的信息 如：<code>echo &quot;My Path is $PATH&quot;</code> </li><li>输出并不带换行符号 如：<code>echo  -n &quot;Hello World&quot;</code></li><li>输出一段激活转依字符 如： <code>echo -e &quot;Column 1 \t Column 2&quot;</code></li></ul></li><li><p><code>date</code> </p><p><code>date</code> 命令主要用来设置和打印系统时间。</p><ul><li>输出默认时区格式的事件 <code>date +&quot;%c&quot;</code></li><li>输出当前事件按照UTC和iso格式输出 <code>date -u +&quot;%Y-%m-%dT%H:%M:%SZ&quot;</code></li><li>输出事件戳 <code>date +&quot;%s&quot;</code></li></ul></li><li><p><code>reboot</code> 命令主要用来重启系统</p><ul><li>重启系统 <code>reboot</code></li><li>强制重启 <code>reboot -f</code></li></ul></li><li><p><code>poweroff</code> 命令用户关机</p></li><li><p><code>wget</code> 命令 用于从web中下载文件，支持 <code>http</code>,<code>https</code>,<code>ftp</code></p><ul><li>获取URL中的内容到<code>foo</code>中 <code>wget https://example.com/foo</code></li><li>获取URL中的内容到bar中 <code>wget -O bar https://example.com/foo</code></li><li>继续未完成的下载 <code>wget -c https://example.com</code></li><li>后台下载 <code>wget -q https://example.com</code></li></ul></li><li><p><code>ps</code>命令主要用于查看正在运行的进程的信息</p><ul><li>打印全部正在执行的进程 <code>ps aux</code></li><li>打印全部正在执行的进程并且伴有完整的命令串 <code>ps auxww</code></li><li>通过 <code>grep</code> 管道过滤 <code>ps aux | grep &quot;tomcat&quot;</code></li><li>得到进程的父进程<code>pid</code> :<code>ps -o ppid= -p pid</code> </li></ul></li><li><p><code>top</code>命令 主要用户动态的实时的显示正在运行的程序</p><ul><li><code>top -i</code> 不显示空闲或者是僵尸进程</li><li><code>top -u $user</code> 显示指定用户的进程 </li><li><code>top -p PID</code> 只显示指定进程PID</li><li><code>top -p $(pgrep -d &#39;,&#39; process_name)</code> 通过进程名来查询</li></ul></li><li><p><code>pidof</code> 命令主要用于查找指定进程的id号</p><ul><li><code>pidof -s</code> 进返回一个进程号</li><li><code>pidof</code> -c 仅显示具有相同root目录下的进程</li></ul></li></ol><h2 id="二、系统状态"><a href="#二、系统状态" class="headerlink" title="二、系统状态"></a>二、系统状态</h2><ol><li><code>ifconfig</code> 命令主要用于网络接口的查看和配置</li></ol><ul><li><code>Ifconfig eth0</code> 查看etho0接口网络设置</li><li><code>ifconfig -a</code> 查看所有接口的详细信息</li><li><code>ifconfig eth0 down</code> 关闭接口eth0</li><li><code>ifconfig eth0 ipaddr</code> 设置端口ip地址</li></ul><ol start="2"><li><code>uname</code> 打印出现当前机器和系统的相关信息</li></ol><ul><li><code>uname -n</code> 打印当前的<code>hostname</code></li><li><code>uname -a</code> 打印当前可用的系统的信息，包括硬件软件。</li></ul><ol start="3"><li><code>who</code> 打印哪些用户登录再这台机器上</li></ol><ul><li><code>who</code> 显示<code>username</code>等比较全的信息</li><li><code>who am i</code> 打印出当前用户 </li></ul><ol start="4"><li><code>last</code> 用于查看当前用户最近的登录信息</li></ol><h2 id="三、文件和目录"><a href="#三、文件和目录" class="headerlink" title="三、文件和目录"></a>三、文件和目录</h2><ol><li><p><code>pwd</code> 用于打印当前目录</p></li><li><p><code>cd</code> 用于切换目录</p></li><li><p><code>ls</code> 用于罗列目录下的文件或者文件夹</p></li></ol><ul><li><code>ls -l</code>按行罗列文件或文件夹</li><li><code>ls -a</code> 显示所有文件，包括隐藏的文件。</li><li><code>ls -lh</code> 按照大小排泄排列</li></ul><ol start="4"><li><code>touch</code> 命令主要用于改变文件的访问时间和修改时间。</li></ol><ul><li><code>touch filename</code> 以当前时间创建文件</li><li><code>touch -t yyyy-mm-dd filename</code> 以某一时间来改变文件时间</li></ul><ol start="5"><li><code>mkdir</code> 命令主要用于创建文件</li></ol><ul><li><code>mkdir dir</code> 创建文件夹</li><li><code>mkdir -p /path/dir</code> 创建指定路径下的文件</li></ul><ol start="6"><li><code>cp</code> 命令主要用于文件的复制</li></ol><ul><li><code>cp path/to/file.ext path/to/copy.ext</code> 复制文件到另一个地址</li><li><code>cp path/to/file.ext path/to/target_parent_directory</code> 复制文件到指定地址，并且保持文件名不变</li><li><code>cp -r path/to/directory path/to/copy</code> 递归的复制整个文件夹及其中的内容到指定目录</li><li><code>cp -i *.txt path/to/target_directory</code> 以交互的模式复制文件到指定文件夹中</li></ul><ol start="7"><li><code>mv</code> 命令主要用于移动文件</li></ol><ul><li><code>mv source target</code> 移动文件</li><li><code>mv -f</code> 强制移动，覆盖现有文件时不要提示</li></ul><ol start="8"><li><code>rm</code>命令主要用于删除文件</li></ol><ul><li><code>rm path/to/file path/to/another/file</code> 删除特定文件夹中的文件</li><li><code>rm -r path/to/directory</code> 递归删除文件夹及文件夹中的文件</li><li><code>rm -rf</code> 递归删除，并且不要提示信息</li></ul><ol start="9"><li><code>dd</code> 命令主要用于转化和复制文件,制作usb镜像</li></ol><ul><li>Clone a drive to another drive with 4MB block and ignore error <code>dd if=/dev/source_drive of=/dev/dest_drive bs=4m conv=noerror</code></li></ul><ol start="10"><li><code>file</code>命令主要用于确定文件类型</li></ol><ul><li><code>file filename</code> 输出文件类型</li><li><code>file -s filename</code> 用于特殊的文件或者设备文件。</li></ul><h2 id="四、文本编辑命令"><a href="#四、文本编辑命令" class="headerlink" title="四、文本编辑命令"></a>四、文本编辑命令</h2><ol><li><code>cat</code> 打印和串联文件</li></ol><ul><li><code>cat file</code> 打印文件内容到标准输出</li><li><code>cat file1 file2  &gt; targetFile</code> 将多个文件内容串联到目标文件中</li><li><code>cat -n file</code> 打印出行数到标准输出</li></ul><ol start="2"><li><code>more</code> 用于互动的阅读文件内容，可以上下滚动</li></ol><ul><li><code>more file</code> 打开文件，<code>&lt;space&gt;</code>用于移动到下一页，<code>/</code>用于搜索文件内容， <code>q</code>用于退出当前界面</li></ul><ol start="3"><li><code>head</code> 输出文件开始的部分</li></ol><ul><li><code>head -n count_of_line filename</code> 查看文件的前n行</li><li><code>head -c number_of_byte filename</code> 查看文件的前n个字节</li></ul><ol start="4"><li><code>tail</code> 输出文件最后的部分</li></ol><ul><li><code>tail -n num file</code>打印出文件最后num行 </li><li><code>tail -n +num file</code> 打印出文件从num开始的几行</li><li><code>tail -f file</code> 保持阅读状态直到 <code>Ctrl + c</code></li></ul><ol start="5"><li><code>wc</code>命令用于统计文件的单词，字节，行数 </li></ol><ul><li><code>wc -l filename</code> 统计文件的行数</li><li><code>wc -w filename</code> 统计文件的字数</li><li><code>wc -c filename</code> 统计文件的字节数</li></ul><ol start="6"><li><code>显示文件的状态</code> </li></ol><ul><li><code>stat filename</code> 显示文件的属性比如大小，权限等。</li><li><code>stat -x filename</code>格式化显示文件的详细属性信息。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-01-29-基本Llinux命令(必须掌握) 2</title>
      <link href="/2019/06/18/2019-01-29-%E5%9F%BA%E6%9C%ACLlinux%E5%91%BD%E4%BB%A4(%E5%BF%85%E9%A1%BB%E6%8E%8C%E6%8F%A1)%202/"/>
      <url>/2019/06/18/2019-01-29-%E5%9F%BA%E6%9C%ACLlinux%E5%91%BD%E4%BB%A4(%E5%BF%85%E9%A1%BB%E6%8E%8C%E6%8F%A1)%202/</url>
      
        <content type="html"><![CDATA[<hr><p>layout:     post<br>title:      “Linux常用命令整理”<br>subtitle:   “linux中必须掌握的基本命令”<br>date:       2019-01-29 12:00:00<br>author:     “NanYin”<br>header-img: “img/Linux/linux_bg.jpg”<br>tags:</p><pre><code>- Linux</code></pre><hr><h1 id="linux中必须掌握的基本命令"><a href="#linux中必须掌握的基本命令" class="headerlink" title="linux中必须掌握的基本命令"></a>linux中必须掌握的基本命令</h1><p>在开始前，我推荐安装 <a href="https://github.com/tldr-pages/tldr" target="_blank" rel="noopener">trdr（too long dont read）</a>工具，用来简化man命令，来实现查看命令含义和用法的作用。</p><h2 id="一-、系统工作命令"><a href="#一-、系统工作命令" class="headerlink" title="一 、系统工作命令"></a>一 、系统工作命令</h2><ol><li><p><code>echo</code></p><p><code>echo</code>命令一般用于shell中打印变量或者字符串的作用，主要用来显示和提醒。</p><ul><li>输出一段信息 如：<code>echo &quot;hello world&quot;</code> 其中<code>&quot;</code>不是必须的 </li><li>输出一段带环境变量的信息 如：<code>echo &quot;My Path is $PATH&quot;</code> </li><li>输出并不带换行符号 如：<code>echo  -n &quot;Hello World&quot;</code></li><li>输出一段激活转依字符 如： <code>echo -e &quot;Column 1 \t Column 2&quot;</code></li></ul></li><li><p><code>date</code> </p><p><code>date</code> 命令主要用来设置和打印系统时间。</p><ul><li>输出默认时区格式的事件 <code>date +&quot;%c&quot;</code></li><li>输出当前事件按照UTC和iso格式输出 <code>date -u +&quot;%Y-%m-%dT%H:%M:%SZ&quot;</code></li><li>输出事件戳 <code>date +&quot;%s&quot;</code></li></ul></li><li><p><code>reboot</code> 命令主要用来重启系统</p><ul><li>重启系统 <code>reboot</code></li><li>强制重启 <code>reboot -f</code></li></ul></li><li><p><code>poweroff</code> 命令用户关机</p></li><li><p><code>wget</code> 命令 用于从web中下载文件，支持 <code>http</code>,<code>https</code>,<code>ftp</code></p><ul><li>获取URL中的内容到<code>foo</code>中 <code>wget https://example.com/foo</code></li><li>获取URL中的内容到bar中 <code>wget -O bar https://example.com/foo</code></li><li>继续未完成的下载 <code>wget -c https://example.com</code></li><li>后台下载 <code>wget -q https://example.com</code></li></ul></li><li><p><code>ps</code>命令主要用于查看正在运行的进程的信息</p><ul><li>打印全部正在执行的进程 <code>ps aux</code></li><li>打印全部正在执行的进程并且伴有完整的命令串 <code>ps auxww</code></li><li>通过 <code>grep</code> 管道过滤 <code>ps aux | grep &quot;tomcat&quot;</code></li><li>得到进程的父进程<code>pid</code> :<code>ps -o ppid= -p pid</code> </li></ul></li><li><p><code>top</code>命令 主要用户动态的实时的显示正在运行的程序</p><ul><li><code>top -i</code> 不显示空闲或者是僵尸进程</li><li><code>top -u $user</code> 显示指定用户的进程 </li><li><code>top -p PID</code> 只显示指定进程PID</li><li><code>top -p $(pgrep -d &#39;,&#39; process_name)</code> 通过进程名来查询</li></ul></li><li><p><code>pidof</code> 命令主要用于查找指定进程的id号</p><ul><li><code>pidof -s</code> 进返回一个进程号</li><li><code>pidof</code> -c 仅显示具有相同root目录下的进程</li></ul></li></ol><h2 id="二、系统状态"><a href="#二、系统状态" class="headerlink" title="二、系统状态"></a>二、系统状态</h2><ol><li><code>ifconfig</code> 命令主要用于网络接口的查看和配置</li></ol><ul><li><code>Ifconfig eth0</code> 查看etho0接口网络设置</li><li><code>ifconfig -a</code> 查看所有接口的详细信息</li><li><code>ifconfig eth0 down</code> 关闭接口eth0</li><li><code>ifconfig eth0 ipaddr</code> 设置端口ip地址</li></ul><ol start="2"><li><code>uname</code> 打印出现当前机器和系统的相关信息</li></ol><ul><li><code>uname -n</code> 打印当前的<code>hostname</code></li><li><code>uname -a</code> 打印当前可用的系统的信息，包括硬件软件。</li></ul><ol start="3"><li><code>who</code> 打印哪些用户登录再这台机器上</li></ol><ul><li><code>who</code> 显示<code>username</code>等比较全的信息</li><li><code>who am i</code> 打印出当前用户 </li></ul><ol start="4"><li><code>last</code> 用于查看当前用户最近的登录信息</li></ol><h2 id="三、文件和目录"><a href="#三、文件和目录" class="headerlink" title="三、文件和目录"></a>三、文件和目录</h2><ol><li><p><code>pwd</code> 用于打印当前目录</p></li><li><p><code>cd</code> 用于切换目录</p></li><li><p><code>ls</code> 用于罗列目录下的文件或者文件夹</p></li></ol><ul><li><code>ls -l</code>按行罗列文件或文件夹</li><li><code>ls -a</code> 显示所有文件，包括隐藏的文件。</li><li><code>ls -lh</code> 按照大小排泄排列</li></ul><ol start="4"><li><code>touch</code> 命令主要用于改变文件的访问时间和修改时间。</li></ol><ul><li><code>touch filename</code> 以当前时间创建文件</li><li><code>touch -t yyyy-mm-dd filename</code> 以某一时间来改变文件时间</li></ul><ol start="5"><li><code>mkdir</code> 命令主要用于创建文件</li></ol><ul><li><code>mkdir dir</code> 创建文件夹</li><li><code>mkdir -p /path/dir</code> 创建指定路径下的文件</li></ul><ol start="6"><li><code>cp</code> 命令主要用于文件的复制</li></ol><ul><li><code>cp path/to/file.ext path/to/copy.ext</code> 复制文件到另一个地址</li><li><code>cp path/to/file.ext path/to/target_parent_directory</code> 复制文件到指定地址，并且保持文件名不变</li><li><code>cp -r path/to/directory path/to/copy</code> 递归的复制整个文件夹及其中的内容到指定目录</li><li><code>cp -i *.txt path/to/target_directory</code> 以交互的模式复制文件到指定文件夹中</li></ul><ol start="7"><li><code>mv</code> 命令主要用于移动文件</li></ol><ul><li><code>mv source target</code> 移动文件</li><li><code>mv -f</code> 强制移动，覆盖现有文件时不要提示</li></ul><ol start="8"><li><code>rm</code>命令主要用于删除文件</li></ol><ul><li><code>rm path/to/file path/to/another/file</code> 删除特定文件夹中的文件</li><li><code>rm -r path/to/directory</code> 递归删除文件夹及文件夹中的文件</li><li><code>rm -rf</code> 递归删除，并且不要提示信息</li></ul><ol start="9"><li><code>dd</code> 命令主要用于转化和复制文件,制作usb镜像</li></ol><ul><li>Clone a drive to another drive with 4MB block and ignore error <code>dd if=/dev/source_drive of=/dev/dest_drive bs=4m conv=noerror</code></li></ul><ol start="10"><li><code>file</code>命令主要用于确定文件类型</li></ol><ul><li><code>file filename</code> 输出文件类型</li><li><code>file -s filename</code> 用于特殊的文件或者设备文件。</li></ul><h2 id="四、文本编辑命令"><a href="#四、文本编辑命令" class="headerlink" title="四、文本编辑命令"></a>四、文本编辑命令</h2><ol><li><code>cat</code> 打印和串联文件</li></ol><ul><li><code>cat file</code> 打印文件内容到标准输出</li><li><code>cat file1 file2  &gt; targetFile</code> 将多个文件内容串联到目标文件中</li><li><code>cat -n file</code> 打印出行数到标准输出</li></ul><ol start="2"><li><code>more</code> 用于互动的阅读文件内容，可以上下滚动</li></ol><ul><li><code>more file</code> 打开文件，<code>&lt;space&gt;</code>用于移动到下一页，<code>/</code>用于搜索文件内容， <code>q</code>用于退出当前界面</li></ul><ol start="3"><li><code>head</code> 输出文件开始的部分</li></ol><ul><li><code>head -n count_of_line filename</code> 查看文件的前n行</li><li><code>head -c number_of_byte filename</code> 查看文件的前n个字节</li></ul><ol start="4"><li><code>tail</code> 输出文件最后的部分</li></ol><ul><li><code>tail -n num file</code>打印出文件最后num行 </li><li><code>tail -n +num file</code> 打印出文件从num开始的几行</li><li><code>tail -f file</code> 保持阅读状态直到 <code>Ctrl + c</code></li></ul><ol start="5"><li><code>wc</code>命令用于统计文件的单词，字节，行数 </li></ol><ul><li><code>wc -l filename</code> 统计文件的行数</li><li><code>wc -w filename</code> 统计文件的字数</li><li><code>wc -c filename</code> 统计文件的字节数</li></ul><ol start="6"><li><code>显示文件的状态</code> </li></ol><ul><li><code>stat filename</code> 显示文件的属性比如大小，权限等。</li><li><code>stat -x filename</code>格式化显示文件的详细属性信息。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-04-08-悲观锁和乐观锁</title>
      <link href="/2019/06/18/2019-04-08-%E6%82%B2%E8%A7%82%E9%94%81%E5%92%8C%E4%B9%90%E8%A7%82%E9%94%81/"/>
      <url>/2019/06/18/2019-04-08-%E6%82%B2%E8%A7%82%E9%94%81%E5%92%8C%E4%B9%90%E8%A7%82%E9%94%81/</url>
      
        <content type="html"><![CDATA[<p><code>比较替换(compareAndSwap)</code>是一个原子操作，也是一个自旋操作，等待一个周期再次尝试。</p><h4 id="CAS操作的缺点"><a href="#CAS操作的缺点" class="headerlink" title="CAS操作的缺点"></a>CAS操作的缺点</h4><ol><li>ABA问题，何谓ABA：当两个线程读取到当前值为A，其中一个线程把值改为B后再把B改为A，这是另外一个线程使用cas操作读取到的值仍然是A，CAS会认为这个值从来没有变过，这就是ABA问题。也就是说遗失掉中间的过程，在链式的操作总更能体会到ABA问题的严重性。 </li><li>自旋时间过长，消耗CPU资源。 </li><li>只能对单个共享变量的原子性操作 </li></ol>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-04-12-Java中常用关键字</title>
      <link href="/2019/06/18/2019-04-12-Java%E4%B8%AD%E5%B8%B8%E7%94%A8%E5%85%B3%E9%94%AE%E5%AD%97/"/>
      <url>/2019/06/18/2019-04-12-Java%E4%B8%AD%E5%B8%B8%E7%94%A8%E5%85%B3%E9%94%AE%E5%AD%97/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-04-22-Synchronized关键字总结</title>
      <link href="/2019/06/18/2019-04-22-Synchronized%E5%85%B3%E9%94%AE%E5%AD%97%E6%80%BB%E7%BB%93/"/>
      <url>/2019/06/18/2019-04-22-Synchronized%E5%85%B3%E9%94%AE%E5%AD%97%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>实际上double-check也是懒汉模式的一种，能够保证线程安全。很完美。。</p><h3 id="synchronzied底层实现"><a href="#synchronzied底层实现" class="headerlink" title="synchronzied底层实现"></a><code>synchronzied</code>底层实现</h3><p>synchronized 同步<code>语句块</code>的实现使用的是<code>monitorenter</code> 和<code>monitorexit</code> 指令，其中 <code>monitorenter</code> 指令指向同步代码块的开始位置，<code>monitorexit</code> 指令则指明同步代码块的结束位置。</p><blockquote><p> synchronized 修饰的<code>方法</code>并没有 monitorenter 指令和 monitorexit 指令，取得代之的确实是 ACC_SYNCHRONIZED 标识，该标识指明了该方法是一个同步方法，JVM 通过该 ACC_SYNCHRONIZED 访问标志来辨别一个方法是否声明为同步方法，从而执行相应的同步调用。</p></blockquote><h3 id="volatile和synachronized的区别"><a href="#volatile和synachronized的区别" class="headerlink" title="volatile和synachronized的区别"></a><code>volatile</code>和<code>synachronized</code>的区别</h3><ol><li>volatile是线程同步的轻量级实现，所以说使用volatile的性能肯定要强于synchronized。</li><li>volatile作用于变量，而synachronzied作用于方法和代码块。</li><li>多线程间使用volatile不会发生阻塞，而使用synachronized可能发生阻塞</li><li>volatile保证变量在多线程间的可见性，向虚拟机声明这个变量不稳定，需要每次都从主存中获取，而synchronized既能够保证可见性，又能保证原子性。        </li></ol>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-04-23-线程池代码解析</title>
      <link href="/2019/06/18/2019-04-23-%E7%BA%BF%E7%A8%8B%E6%B1%A0%E4%BB%A3%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
      <url>/2019/06/18/2019-04-23-%E7%BA%BF%E7%A8%8B%E6%B1%A0%E4%BB%A3%E7%A0%81%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="AQS「AbstractQueuedSynchronizer」-队列同步器"><a href="#AQS「AbstractQueuedSynchronizer」-队列同步器" class="headerlink" title="AQS「AbstractQueuedSynchronizer」 队列同步器"></a>AQS「AbstractQueuedSynchronizer」 队列同步器</h2><p>AQS的使用方式是继承,之类通过继承AQS,实现抽象方法来实现管理同步器. 其中上文中的ThreadPoolExcutor中的Worker就是继承AQS来实现的.</p><p>AQS使用一个全局变量state来表示当前的锁的状态,如果state&gt;0,说明已经获取到了锁,如果state=0,说明释放了锁.</p><p>AQS依靠CLH队列完成对状态的管理.当前线程如果获取同步状态失败时，AQS则会将当前线程已经等待状态等信息构造成一个节点（Node）并将其加入到CLH同步队列，同时会阻塞当前线程，当同步状态释放时，会把首节点唤醒（公平锁），使其再次尝试获取同步状态。</p><p>其中CLH的一个节点包括了:当前的状态,前驱,后继,当前节点保存的线程.</p><p>具体的AQS过程可以参考<a href="https://juejin.im/entry/5ae02a7c6fb9a07ac76e7b70" target="_blank" rel="noopener">QAS原理</a></p><h2 id="补充的countDownLatch和cyclicBarrier的区别"><a href="#补充的countDownLatch和cyclicBarrier的区别" class="headerlink" title="补充的countDownLatch和cyclicBarrier的区别"></a>补充的countDownLatch和cyclicBarrier的区别</h2><p><img src="https://camo.githubusercontent.com/5c19d9e66ffaf3d7193b01948279db9b9b3b98d3/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f4a6176612532302545372541382538422545352542412538462545352539312539382545352542462538352545352541342538372545462542432539412545352542392542362545352538462539312545372539462541352545382541462538362545372542332542422545372542422539462545362538302542422545372542422539332f4151533333332e706e67" alt="区别"></p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-04-24-JVM相关知识整理</title>
      <link href="/2019/06/18/2019-04-24-JVM%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/"/>
      <url>/2019/06/18/2019-04-24-JVM%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<hr><p>layout:     post<br>title:      “JVM基本知识整理”<br>subtitle:   “关于java的内存空间,对象的创建过程和对象的定位方式概念上的整理”<br>date:       2019-04-24 12:00:00<br>author:     “NanYin”<br>copyright: ture<br>tags:<br>    - JVM<br>    - Java<br>categories:<br>    - Java</p><pre><code>- JVM</code></pre><hr><h1 id="java内存空间"><a href="#java内存空间" class="headerlink" title="java内存空间"></a>java内存空间</h1><p><img src="https://i.loli.net/2019/05/12/5cd7c7e477235.jpg" alt="内存空间"></p><p>其中如图中所展示的，按功能分了大致分为两类，一类为线程共享的JAVA堆和元数据区和直接内存，另一类是线程私有的虚拟机栈，方法区栈和程序计数器。 </p><p>下面针对这几种区域来详细将这几个区域分别的作用是什么。 </p><h2 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h2><p>程序计数器是一块较小的内存空间，可以看作是当前线程执行程序的字节码的的行号的指示器。字节码解释器工作时通过改变程序计数器的值来改变将要选取的下一个指令。并且由于每个线程执行的运行的指令不同，每个线程有个字的程序计数器，并且互不干扰。所以程序计数器被称作是线程私有的。这种线程私有的区域有着很明显的特征就是生命周期和当前线程的周期保持一致。并且需要注意的是程序计数器是内存中唯一一个不会出现<code>outOfMemory</code>的区域。 </p><p> 程序计数器有两个作用： </p><p> A: 字节码解释器通过读取程序计数器的值来选取下一条将要执行的语句。 </p><p>B:在多线程切换的情况下，记录当前线程执行的位置，方便于切换回时进程运行的位置。 </p><h2 id="虚拟机栈"><a href="#虚拟机栈" class="headerlink" title="虚拟机栈"></a>虚拟机栈</h2><p>Java内存可以粗糙的分为堆内存和栈内存，所谓的堆就是图中的java堆（<code>Heap</code>），而所谓的栈就是指的虚拟机栈（<code>VM Stack</code>）的局部变量表。虚拟机栈是由一个个栈针构成的，可以想为一个方法为一个栈针，随着方法的被调用完成（完成的条件有两个，一个是return，另外一个是发生异常），对应着方法的栈针出栈。栈针中都包含：局部变量表，操作数栈，动态链接和方法出口。<strong>局部变量表主要存放了编译器可知的各种数据类型</strong>（boolean、byte、char、short、int、float、long、double）、<strong>对象引用</strong>（reference类型，它不同于对象本身，可能是一个指向对象起始地址的引用指针，也可能是指向一个代表对象的句柄或其他与此对象相关的位置） </p><p><img src="https://i.loli.net/2019/05/12/5cd7cb63399f3.jpg" alt="虚拟机栈结构"></p><h2 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h2><p>本地方法栈同样是线程私有的,区别是java虚拟机栈是用于java字节码的,而本地方法栈是用来执行Native方法的.结构都和虚拟机栈的结构相同. </p><h2 id="Java堆"><a href="#Java堆" class="headerlink" title="Java堆"></a>Java堆</h2><p>Java堆是整个虚拟机中最大的一块区域,是线程共享的区域,再虚拟机启动时创建,该块存在的唯一目的就是存放类的事例和数组. </p><h2 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h2><p>和Java堆一样都是线程共享的区域,主要用于存放已经被虚拟机加载的类信息,常量,静态变量和已经被编译后的代码等数据.方法区和永久代的关系很像Java中接口和类的关系，类实现了接口，而永久代就是HotSpot虚拟机对虚拟机规范中方法区的一种实现方式。 也就是说，永久代是HotSpot的概念，方法区是Java虚拟机规范中的定义，是一种规范，而永久代是一种实现，一个是标准一个是实现，其他的虚拟机实现并没有永久带这一说法。 </p><h2 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h2><p>原来的运行时常量池是方法区的一部分,而在1.7之后,讲运行时常量池放到堆(Heap)中开辟了一个区域专门用来放运行时常量池.运行时常量池中遥遥包括两部分,一部分是实际存在的字面量,所谓字面量包括[1.文本字符串,2.被声明为final的常量,基本数据类型…..],另一部分是符号引用,包含[类和结构的名称,字段的名称,方法的名称]</p><p><img src="https://i.loli.net/2019/05/12/5cd7cbf57ba27.jpg" alt="运行时常量池"></p><h2 id="元数据区"><a href="#元数据区" class="headerlink" title="元数据区"></a>元数据区</h2><p>替代了永久代,使用的是直接内存,什么是直接内存,它有能够干什么? 首先直接内存区域不是虚拟机运行时数据区的一部分,也不是虚拟机定义的一部分,但是经常会使用到.</p><blockquote><p>JDK1.4 中新加入的 <strong>NIO(New Input/Output) 类</strong>，引入了一种基于<strong>通道（Channel）</strong> 与<strong>缓存区（Buffer）</strong> 的 I/O 方式，它可以直接使用 Native 函数库直接分配堆外内存，然后通过一个存储在 Java 堆中的 DirectByteBuffer 对象作为这块内存的引用进行操作。这样就能在一些场景中显著提高性能，因为<strong>避免了在 Java 堆和 Native 堆之间来回复制数据</strong>。</p></blockquote><p>本机直接内存的分配不会收到 Java 堆的限制，但是，既然是内存就会受到本机总内存大小以及处理器寻址空间的限制。</p><h1 id="对象的创建过程"><a href="#对象的创建过程" class="headerlink" title="对象的创建过程"></a>对象的创建过程</h1><p><img src="https://i.loli.net/2019/05/12/5cd7cbf57ba27.jpg" alt="对象的创建过程"></p><p>对象的创建过程分为上图中的5步 </p><ol><li>类加载检查:当虚拟机遇到new的时候,会检查这个类是否存在,是否被加载,解释和初始化过,如果没有则进行类的初始化过程. </li><li>分配内存:再进行类加载检查后,会在堆内存中为新的对象分配内存,分配的规则有两种,一种是指针碰撞,另一种是空闲列表,针对不同的垃圾回收器会使用不同的方法.第一种方法指针碰撞的原理大致为它会将分配过的内存和未分配的内存间建立一个指针,当分配内存的时候,向为分配内存的地方移动新的对象的大小的位置,适用于比较规整的内存空间.第二种方法是维护一个分配内存的列表,每次分配内存都想列表中添加相关记录,表明这些对象在哪. </li><li>初始化零值:保证在分配完内存后,为分配的内存区域初始化为零值 </li><li>设置对象头:虚拟机对对象的各种设置信息,保存在对象头中. </li><li>执行init方法:在执行init方法前,从虚拟机的角度来看其实对象已经生成了,但是在程序员的角度对象并没有生成,只有在init方法执行过后,对象才算生成. </li></ol><h1 id="对象的定位方式"><a href="#对象的定位方式" class="headerlink" title="对象的定位方式"></a>对象的定位方式</h1><p>Java虚拟机定位对象的方式主要有两种,一是使用句柄,二是直接使用指针.</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-04-28-Java_IO操作</title>
      <link href="/2019/06/18/2019-04-28-Java_IO%E6%93%8D%E4%BD%9C/"/>
      <url>/2019/06/18/2019-04-28-Java_IO%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<hr><p>layout:     post<br>title:      “Java中的各种IO操作”<br>subtitle:   “”<br>date:       2019-04-28 12:00:00<br>author:     “NanYin”<br>header-img: “img/Java相关/java.jpg”<br>copyright: ture<br>tags:<br>    - Java<br>categories:</p><pre><code>- Java</code></pre><hr><h1 id="Java中的IO操作"><a href="#Java中的IO操作" class="headerlink" title="Java中的IO操作"></a>Java中的IO操作</h1><p>Java总的来说有三类IO,效率不高,操作简单的BIO(blocking IO),非阻塞的NIO(New IO),和异步非阻塞IO,也就是升级版的NIO(Asynchronous I/O).</p><p>在学习这三类IO前,需要了解什么是阻塞.什么是异步.两个的含义有什么区别.</p><blockquote><p>同步和异步关注的是消息通信机制 (synchronous communication/ asynchronous communication)所谓同步，就是在发出一个<em>调用</em>时，在没有得到结果之前，该 <em>调用</em> 就不返回。但是一旦调用返回，就得到返回值了。换句话说，就是由<em>调用者</em>主动等待这个<em>调用</em>的结果。而异步则是相反，<em>调用</em>在发出之后，这个调用就直接返回了，所以没有返回结果。换句话说，当一个异步过程调用发出后，调用者不会立刻得到结果。而是在<em>调用</em>发出后，<em>被调用者</em>通过状态、通知来通知调用者，或通过回调函数处理这个调用。</p></blockquote><blockquote><p>阻塞和非阻塞关注的是程序在等待调用结果（消息，返回值）时的状态.阻塞调用是指调用结果返回之前，当前线程会被挂起。调用线程只有在得到结果之后才会返回。非阻塞调用指在不能立刻得到结果之前，该调用不会阻塞当前线程。</p></blockquote><h2 id="BIO"><a href="#BIO" class="headerlink" title="BIO"></a>BIO</h2><p>BIO过程就如同名字一样,是一个阻塞的IO,服务端通常为每一个客户端都建立一个独立的线程来通过调用accept()来监听客户端消息.如果想处理多个客户端请求则服务端需要建立等同数量的线程来处理这些消息,这就是普遍的一请求一应答的模型.处理完成后返回应答给客户端后销毁线程,因为线程是一个昂贵的资源,这样重复的新建线程,销毁线程,很浪费处理器资源,所以使用BIO同时能够尽可能的少创建线程,就可以用到线程池的方式实现,来达到服务端创建线程数远远小于客户端数的目的,但这种方法只是伪异步IO.</p><p>在处理链接数量少的情况下,BIO的效率还不错,并且主要逻辑模型清晰明了,代码简单.但是在上万的链接的情况下,BIO处理起来就非常吃紧了.</p><h2 id="NIO"><a href="#NIO" class="headerlink" title="NIO"></a>NIO</h2><p>NIO是一种同步非阻塞的I/O模型，在Java 1.4 中引入了NIO框架，对应 java.nio 包，提供了 Channel , Selector，Buffer等抽象。</p><blockquote><p>NIO中的N可以理解为Non-blocking，不单纯是New。它支持面向缓冲的，基于通道的I/O操作方法。 NIO提供了与传统BIO模型中的 Socket 和 ServerSocket 相对应的 SocketChannel 和 ServerSocketChannel 两种不同的套接字通道实现,两种通道都支持阻塞和非阻塞两种模式。阻塞模式使用就像传统中的支持一样，比较简单，但是性能和可靠性都不好；非阻塞模式正好与之相反。对于低负载、低并发的应用程序，可以使用同步阻塞I/O来提升开发速率和更好的维护性；对于高负载、高并发的（网络）应用，应使用 NIO 的非阻塞模式来开发。</p></blockquote><h3 id="NIO特性和NIO与传统IO的区别"><a href="#NIO特性和NIO与传统IO的区别" class="headerlink" title="NIO特性和NIO与传统IO的区别"></a>NIO特性和NIO与传统IO的区别</h3><ul><li>传统IO(BIO)是一种阻塞IO模型,而NIO是非阻塞的IO模型,区别为当线程读取数据的时候,非阻塞IO可以不用等,而阻塞IO需要一直等待IO完成后才能继续.</li><li>IO面向流,而NIO面向缓冲区.</li><li>通道(channel) NIO通过通道进行数据读写.通道是双向的,而传统的IO是单向的.通道链接的都是Buffer,所以通道可以异步的读写.</li><li>选择器(Selectors) NIO拥有选择器,而IO没有.选择器的作用就是用来使用单个线程来处理多个通道(NIO面向buffer,通道只与buffer交互).<br><img src="https://camo.githubusercontent.com/3a68153ce17be90275df07a47409afaea91aff83/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d322f536c6563746f722e706e67" alt="Selector图解"><h2 id="AIO"><a href="#AIO" class="headerlink" title="AIO"></a>AIO</h2></li></ul><p>AIO 也就是 NIO 2。在 Java 7 中引入了 NIO 的改进版 NIO 2,它是异步非阻塞的IO模型。异步 IO 是基于事件和回调机制实现的，也就是应用操作之后会直接返回，不会堵塞在那里，当后台处理完成，操作系统会通知相应的线程进行后续的操作。</p><p>AIO 是异步IO的缩写，虽然 NIO 在网络操作中，提供了非阻塞的方法，但是 NIO 的 IO 行为还是同步的。对于 NIO 来说，我们的业务线程是在 IO 操作准备好时，得到通知，接着就由这个线程自行进行 IO 操作，IO操作本身是同步的。</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-04-29-Hibernate重点总结</title>
      <link href="/2019/06/18/2019-04-29-Hibernate%E9%87%8D%E7%82%B9%E6%80%BB%E7%BB%93/"/>
      <url>/2019/06/18/2019-04-29-Hibernate%E9%87%8D%E7%82%B9%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<hr><p>layout:     post<br>title:      “Hibernate重点知识总结”<br>subtitle:   “”<br>date:       2019-04-29 12:00:00<br>author:     “NanYin”<br>header-img: “img/Java相关/java.jpg”<br>copyright: ture<br>tags:<br>    - Java<br>categories:</p><pre><code>- Hibernate</code></pre><hr><h1 id="Hibernate重点知识总结"><a href="#Hibernate重点知识总结" class="headerlink" title="Hibernate重点知识总结"></a>Hibernate重点知识总结</h1><h2 id="Hibernate的三种状态"><a href="#Hibernate的三种状态" class="headerlink" title="Hibernate的三种状态"></a>Hibernate的三种状态</h2><ol><li>瞬时态(transient):当实体还未和session关联,如new Person(“1”);</li><li>持久态(persistent): 通过get或者load得到的实体类,这时的状态都是持久态.</li><li>游离态(detached): 当通过get或者load得到持久态的对象后,执行删除delete时,这时已经脱离session.因delete而变为游离态可有save或者saveOrUpate转化为持久态.或则当session关闭后,session中的对象就变为游离态.</li></ol><h2 id="hibernate中update和saveOrUpdate的区别"><a href="#hibernate中update和saveOrUpdate的区别" class="headerlink" title="hibernate中update和saveOrUpdate的区别"></a>hibernate中update和saveOrUpdate的区别</h2><p>update只能是对象有主键时起作用,而saveOrUpdate则在对象没有主键时执行插入操作.对应的update操作只能操作游离态的对象,而不能对瞬时态的对象操作.而saveOrUpdate则两种状态的对象都可以操作.</p><h2 id="hibernate中的update和merge方法的区别"><a href="#hibernate中的update和merge方法的区别" class="headerlink" title="hibernate中的update和merge方法的区别"></a>hibernate中的update和merge方法的区别</h2><p>当执行update方法的时候,一个session中具有与当前update相同的持久化标识(identifier)的实例,使用upate操作后会报错,而使用merge后把处理自由态的po对象A的属性copy到session当中处于持久态的po的属性中，执行完成后原来是持久状态还是持久态，而我们提供的A还是自由态。</p><h2 id="hibernate中get和load的区别"><a href="#hibernate中get和load的区别" class="headerlink" title="hibernate中get和load的区别"></a>hibernate中get和load的区别</h2><p>一句话，hibernate对于load方法认为该数据在数据库中一定存在，可以放心的使用代理来延迟加载，如果在使用过程中发现了问题，只能抛异常；而对于get方法，hibernate一定要获取到真实的数据，否则返回null。</p><h2 id="hibernate中list和iterator的区别"><a href="#hibernate中list和iterator的区别" class="headerlink" title="hibernate中list和iterator的区别"></a>hibernate中list和iterator的区别</h2><p>(1)、List方式是1次性把所有的数据全部取到内存中，构造一个超大的结果集，主要的时间开销是这一步，这一步的时间开销要远远超过JDBC和 Iterator方式下构造结果集的时间开销，并且内存开销也很惊人；而对结果集的遍历操作，速度则是非常的惊人（经过测试，30万记录的内 存遍历不到100ms，由于这一步不受JDBC影响，因此结果可信）。因此，List方式适合于对结果集进行反复多次操作的情况，例如分页显示，往后往前 遍历，跳到第一行，跳到最后一行等等。</p><p>(2)、Iterator方式只取记录id到内存中，并没有把所有数据取到内存中，因此构造结果集的时间开销很小，比JDBC和List方式都要少，并且内 存开销也小很多。而对结果集的遍历的操作的时候，Iterator仍然要访问数据库，所有主要的时间开销都花在这里。因此，Iterator方式适合于只 对结果集进行1次遍历操作的情况，并且Iterator方式特别适合于从超大结果集中取少量数据，这种情况Iterator性能非常好。</p><p>总结: list把数据一次加载到内存,再进行遍历操作就非常快了.而Iterator方式只会把id放到内存中,但是再次遍历时仍然要访问数据库查询数据,适合一次遍历的情况.</p><h2 id="hibernate中的inverse属性"><a href="#hibernate中的inverse属性" class="headerlink" title="hibernate中的inverse属性"></a>hibernate中的inverse属性</h2><p>设置inverse=“false”为主控方,由主控方类维护对象间的关系.比如再many-to-one的关系中,再one的一方设置<code>inverse=&quot;true&quot;</code>这样能够提高效率,比如班级里一个老师多个学生,老师记住多个学生比较困难,而学生记住一个老师很容易.同理one-to-many.再多对多的关系中,再任意一方设置<code>inverse=&#39;true&#39;</code>即可.</p><h2 id="hibernate中的cascade属性"><a href="#hibernate中的cascade属性" class="headerlink" title="hibernate中的cascade属性"></a>hibernate中的cascade属性</h2><p>级联操作：指当主控方执行某项操作时，是否要对被关联方也执行相同的操作。</p><h2 id="什么情况下懒加载能够有效的提高效率"><a href="#什么情况下懒加载能够有效的提高效率" class="headerlink" title="什么情况下懒加载能够有效的提高效率"></a>什么情况下懒加载能够有效的提高效率</h2><p>懒加载是当用到对象的时候再从数据库加载数据,持久化来使用.从这句话中就可以理解为,因为及联的关系,一个表的数据可能会带出多张表的数据,这时候使用懒加载就能够实现效率的提高,没必要一次性把所有数据都加载出来,而是用时加载.hibernate默认是使用懒加载的,当然可以使用lazy=false来禁用懒加载.</p><h2 id="什么是hibernate的二级缓存"><a href="#什么是hibernate的二级缓存" class="headerlink" title="什么是hibernate的二级缓存"></a>什么是hibernate的二级缓存</h2><p>缓存就是将以前的数据存放到内存中,当查询数据的时候,现在内存中查询,是否有这个对象,如果没有再从数据库中查询对象,这样大大的提高了查询的效率.</p><p>Hibenate的session就是一级缓存,当查询数据的时候都会先从session中查询对象是否存在,不存在才从数据库查询.但是session是非线程安全的,多线程共享的情况下会出现问题.并且session是表示的是一段会话,表示的是一次事务,基于以上两点,所以在一次事务完成后,session就应立即关闭.所以这里说的一级缓存意义不大.</p><p>Hibernate的二级缓存其实就是使用外部缓存,如Echache或者redis等,使用配置文件配置缓存策略等.</p><h2 id="Hibernate中使用hibernateTemplate的好处有哪些"><a href="#Hibernate中使用hibernateTemplate的好处有哪些" class="headerlink" title="Hibernate中使用hibernateTemplate的好处有哪些?"></a>Hibernate中使用hibernateTemplate的好处有哪些?</h2><ol><li>HibernateTemplate简化了与Hibernate Session的交互</li><li>常见的函数简化为单个方法调用。</li><li>异常会自动捕获并转换为运行时异常</li><li>session 自动关闭</li></ol>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-05-05-Spring_Framework重点学习 2</title>
      <link href="/2019/06/18/2019-05-05-Spring_Framework%E9%87%8D%E7%82%B9%E5%AD%A6%E4%B9%A0%202/"/>
      <url>/2019/06/18/2019-05-05-Spring_Framework%E9%87%8D%E7%82%B9%E5%AD%A6%E4%B9%A0%202/</url>
      
        <content type="html"><![CDATA[<p>上面只是简单的掩饰注解的用法,但实际上业务会比这难上许多.</p><h3 id="springMVC-工作流程"><a href="#springMVC-工作流程" class="headerlink" title="springMVC 工作流程"></a>springMVC 工作流程</h3><p>先上一张图:来自<a href="https://www.cnblogs.com/xiaoxi/p/6164383.html" target="_blank" rel="noopener">https://www.cnblogs.com/xiaoxi/p/6164383.html</a><br><img src="https://i.loli.net/2019/05/12/5cd7cf13c933c.jpg" alt="SpringMvc工作原理"></p><p>由图中可以看到SpringMvc中最重要的起到中枢的是<code>DispatcherServlet</code>(前端控制器).</p><ol><li>在DispatcherServlet接受到客户端请求后,使用 <code>handlerMapping</code> 进行映射处理.在生成处理器映射器之后, 返回一个handler,如果有拦截器的化还生成拦截器.交给 <code>DispatcherServlet</code> 进行下一步处理.</li><li>第二步交给 <code>handlerAdatper</code> (处理器适器) <code>HandlerAdapter</code> 经过适配调用具体的处理器( <code>Controller</code> ，也叫后端控制器)。Controller执行完成返回ModelAndView。</li><li>第三步,DispatcherServlet将最终的结果交给 <code>viewResolver</code> 试图解析器进行视图解析</li><li>DispatcherServlet 根据返回的view进行视图渲染,最终返回给客户端用户.</li></ol>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-05-05-Spring_Framework重点学习</title>
      <link href="/2019/06/18/2019-05-05-Spring_Framework%E9%87%8D%E7%82%B9%E5%AD%A6%E4%B9%A0/"/>
      <url>/2019/06/18/2019-05-05-Spring_Framework%E9%87%8D%E7%82%B9%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>上面只是简单的掩饰注解的用法,但实际上业务会比这难上许多.</p><h3 id="springMVC-工作流程"><a href="#springMVC-工作流程" class="headerlink" title="springMVC 工作流程"></a>springMVC 工作流程</h3><p>先上一张图:来自<a href="https://www.cnblogs.com/xiaoxi/p/6164383.html" target="_blank" rel="noopener">https://www.cnblogs.com/xiaoxi/p/6164383.html</a><br><img src="https://i.loli.net/2019/05/12/5cd7cf13c933c.jpg" alt="SpringMvc工作原理"></p><p>由图中可以看到SpringMvc中最重要的起到中枢的是<code>DispatcherServlet</code>(前端控制器).</p><ol><li>在DispatcherServlet接受到客户端请求后,使用 <code>handlerMapping</code> 进行映射处理.在生成处理器映射器之后, 返回一个handler,如果有拦截器的化还生成拦截器.交给 <code>DispatcherServlet</code> 进行下一步处理.</li><li>第二步交给 <code>handlerAdatper</code> (处理器适器) <code>HandlerAdapter</code> 经过适配调用具体的处理器( <code>Controller</code> ，也叫后端控制器)。Controller执行完成返回ModelAndView。</li><li>第三步,DispatcherServlet将最终的结果交给 <code>viewResolver</code> 试图解析器进行视图解析</li><li>DispatcherServlet 根据返回的view进行视图渲染,最终返回给客户端用户.</li></ol>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-05-30-设计模式之单例模式</title>
      <link href="/2019/06/18/2019-05-30-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/06/18/2019-05-30-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-06-01-设计模式之建造者模式</title>
      <link href="/2019/06/18/2019-06-01-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/06/18/2019-06-01-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-06-02-设计模式之原型模式</title>
      <link href="/2019/06/18/2019-06-02-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/06/18/2019-06-02-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-06-02-设计模式之适配器模式</title>
      <link href="/2019/06/18/2019-06-02-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/06/18/2019-06-02-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-06-03-设计模式之桥接模式</title>
      <link href="/2019/06/18/2019-06-03-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/06/18/2019-06-03-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>上面的例子中，颜色和图形是两个独立不同的维度，两个可以分别变化。将两个维度设计为两个不同的继承的结构，在两个结构之间使用在抽象类中的关联来达到链接的目的，这个链接成为两个继承结构通信的桥梁。所以为桥接模式。</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-06-03-设计模式之组合模式</title>
      <link href="/2019/06/18/2019-06-03-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/06/18/2019-06-03-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-06-10-设计模式之装饰者模式</title>
      <link href="/2019/06/18/2019-06-10-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/06/18/2019-06-10-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-06-12-设计模式之外观模式</title>
      <link href="/2019/06/18/2019-06-12-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/06/18/2019-06-12-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-06-13-设计模式之享元模式</title>
      <link href="/2019/06/18/2019-06-13-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/06/18/2019-06-13-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-06-17-设计模式之模版模式</title>
      <link href="/2019/06/18/2019-06-17-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%A8%A1%E7%89%88%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/06/18/2019-06-17-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%A8%A1%E7%89%88%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>其实模版方法模式是创建一个算法的骨架，具体的内容由子类去填充的这个过程。</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-06-15-设计模式之访问者模式</title>
      <link href="/2019/06/18/2019-06-15-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/06/18/2019-06-15-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-06-18-Mac下idea在Dock栏一直存在图标和控制台中文乱码问题</title>
      <link href="/2019/06/18/2019-06-18-Mac%E4%B8%8Bidea%E5%9C%A8Dock%E6%A0%8F%E4%B8%80%E7%9B%B4%E5%AD%98%E5%9C%A8%E5%9B%BE%E6%A0%87%E5%92%8C%E6%8E%A7%E5%88%B6%E5%8F%B0%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/"/>
      <url>/2019/06/18/2019-06-18-Mac%E4%B8%8Bidea%E5%9C%A8Dock%E6%A0%8F%E4%B8%80%E7%9B%B4%E5%AD%98%E5%9C%A8%E5%9B%BE%E6%A0%87%E5%92%8C%E6%8E%A7%E5%88%B6%E5%8F%B0%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2018-05-05-bash_05_操作变量 2</title>
      <link href="/2019/06/18/2018-05-05-bash_05_%E6%93%8D%E4%BD%9C%E5%8F%98%E9%87%8F%202/"/>
      <url>/2019/06/18/2018-05-05-bash_05_%E6%93%8D%E4%BD%9C%E5%8F%98%E9%87%8F%202/</url>
      
        <content type="html"><![CDATA[<hr><p>layout:     post<br>title:      “bash学习记录（五） bash中关于变量的更多的知识”<br>subtitle:   “关于bash的变量的拓展和应用”<br>date:       2018-05-01 17:00:00<br>author:     “NanYin”<br>header-img: “img/home-bg.jpg”<br>tags:<br>    - bash</p><pre><code>- Linux</code></pre><hr><h1 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h1><p>bash支持很多关于字符串的操作，不过可惜的是，这些操作缺乏统一性，有一些是使用参数等，另外一些是通过内建命令<code>expr</code>命令来实现，这会导致不同的语法功能的重叠，会比较混乱，下面简单介绍一下使用参数和命令的实现字符串的操作。</p><ul><li><p>字符串长度（String Length）</p><ol><li><p>$(#string) 这里是和C语言中的strlen()是相同的。</p></li><li><p>expr length $string 同样表示string串的长度。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line">string=abcdefgHIGKL</span><br><span class="line"><span class="comment">#使用第一种方法$(#string)</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"string的长度是：<span class="variable">$&#123;#string&#125;</span>"</span></span><br><span class="line"><span class="comment">#使用第二种方法使用expr内建命令 优点简单易懂</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"string的长度是：`expr length <span class="variable">$string</span>`"</span></span><br><span class="line">`</span><br></pre></td></tr></table></figure></li></ol></li><li><p>字符串从开头匹配子字串的长度</p><p>  方法如下：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">stringZ=abcABC123ABCab </span><br><span class="line"><span class="built_in">echo</span> `expr match <span class="string">"<span class="variable">$stringZ</span>"</span> <span class="string">'abc[A-Z]*.2'</span>`</span><br><span class="line"><span class="built_in">echo</span> `expr <span class="variable">$stringZ</span> : <span class="string">'abc[A-Z]*.2'</span>`</span><br></pre></td></tr></table></figure></li><li><p>匹配到子串的位置 (index)</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> `expr index <span class="variable">$stringZ</span> <span class="string">'abc[A-Z]*.2'</span>`</span><br></pre></td></tr></table></figure></li><li><p>子字符串的截取</p><ol><li><p>${string:position} 从positon位置截取字符串string。</p></li><li><p>${string:positong:length} 从positon位置截取字符串string，并且限定截取长度为length。</p></li><li><p>expr substr $string $positon $length 意思同上。</p></li><li><p>expr match $string ‘\(substring \)’ 这里的substring是正则表达式。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#截取字符串</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;stringZ:5&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;stringZ:5:4&#125;</span></span><br><span class="line"><span class="built_in">echo</span> `expr substr <span class="variable">$stringZ</span> 5 4`</span><br><span class="line"><span class="built_in">echo</span> `expr match <span class="variable">$stringZ</span> <span class="string">'\(abc[A-Z]*.2\)'</span>`</span><br></pre></td></tr></table></figure></li></ol></li><li><p>从字符串中移除子字符串</p><ol><li><p>${string#substring} substring是子字符串。并且需要注意的是：<strong>该方法表示的是向后移除该子字符串最短匹配到的字符串。</strong></p></li><li><p>${string##substring} 与上面的正好相反。<strong>该方法表示的是向后移除该字符串最长匹配到的字符串。</strong></p></li><li><p>${string%substring} <strong>该方法表示的是由后向前移除该子字符串最短匹配到的字符串。</strong></p></li><li><p>${string%%substring} <strong>该方法表示的是由后向前移除该字符串最长匹配到的字符串。</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"移除字符串"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;stringZ#a*b&#125;</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;stringZ##a*b&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;stringZ%a*c&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;stringZ%%a*c&#125;</span></span><br><span class="line"><span class="comment">#结果：</span></span><br><span class="line"><span class="comment">#ABC123ABCabc</span></span><br><span class="line"><span class="comment">#c</span></span><br><span class="line"><span class="comment">#abcABC123ABC</span></span><br><span class="line"><span class="comment">#</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p>子字符串替换</p><ol><li><p>${string/substring/replacement}  替换第一个匹配到substring的字符串，替换为replacement。</p></li><li><p>${string//substring/replacement} 替换所有匹配到的字符。</p></li><li><p>${string/#substring/replacement} 替换由前向后匹配到的字符。</p></li><li><p>${string/%substring/replacement} 替换由后向前匹配到的字符。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"---------字符串替换---------"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;stringZ/abc/xyz&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;stringZ//abc/xyz&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;stringZ/#abc/xyz&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;stringZ/%abc/xyz&#125;</span></span><br><span class="line"><span class="comment">#结果：</span></span><br><span class="line"><span class="comment">#xyzABC123ABCabc</span></span><br><span class="line"><span class="comment">#xyzABC123ABCxyz</span></span><br><span class="line"><span class="comment">#xyzABC123ABCabc</span></span><br><span class="line"><span class="comment">#abcABC123ABCxyz</span></span><br></pre></td></tr></table></figure></li></ol></li></ul><h2 id="使用awk操作字符串"><a href="#使用awk操作字符串" class="headerlink" title="使用awk操作字符串"></a>使用awk操作字符串</h2><p>现学先卖，<a href="http://blog.jobbole.com/109089/" target="_blank" rel="noopener">三十分钟学会AWK</a>,快速了解和应用awk。</p><p>基于以上，使用awk练习。</p><p>工作流分为大致三部分， read-&gt;excute-&gt;repeat,实现对文本的处理。</p><h3 id="程序机构"><a href="#程序机构" class="headerlink" title="程序机构"></a>程序机构</h3><ul><li><p>BEGIN 语法：<code>BEGIN {awk-commands}</code> 是可以省略的部分块，主要作用是声明变量，初始化变量，</p></li><li><p>BODY块 ：<code>{commonds}</code>，是必须填写的部分，主要作用是处理文本，会对输入的每一行都执行body块中的命令，并且body是没有关键字的。</p></li></ul><p>-END ：<code>END {commands}</code>,同BEGIN，是可以省略的部分</p><h3 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h3><ul><li><p>awk命令行，可以通过执行<code>awk [-option] files</code>来实现对files文件的处理。 如 <code>awk {print} mark.txt</code> 这里就不具体举例了，开头的链接里讲的非常详细，这里只做简单的记录和查看。</p></li><li><p>使用命令文件方式 <code>awk -f command.awk marks.txt</code> 使用-f参数，可以使用文件中的命令。</p></li><li><p>awk基本选项 ： 这里不具体总结，linux环境下终端 <code>man awk</code>可以看到非常多的选项。</p></li></ul><h3 id="基本使用示例"><a href="#基本使用示例" class="headerlink" title="基本使用示例"></a>基本使用示例</h3><ol><li><p>基本打印文件内容</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ awk <span class="string">'&#123;print&#125;'</span> mark.txt </span><br><span class="line">1)  Amit    Physics  80</span><br><span class="line">2)  Rahul   Maths    90</span><br><span class="line">3)  Shyam   Biology  87</span><br><span class="line">4)  Kedar   English  85</span><br><span class="line">5)  Hari    History  89</span><br></pre></td></tr></table></figure></li><li><p>打印具体项内容</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ awk <span class="string">'&#123;print $1 "\t" $2 &#125;'</span> mark.txt</span><br><span class="line">1)      Amit</span><br><span class="line">2)      Rahul</span><br><span class="line">3)      Shyam</span><br><span class="line">4)      Kedar</span><br><span class="line">5)      Hari</span><br></pre></td></tr></table></figure></li><li><p>添加限定条件的打印内容</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ awk  <span class="string">'/a/  &#123;print $1 "\t" $2 &#125;'</span> mark.txt</span><br><span class="line">2)      Rahul</span><br><span class="line">3)      Shyam</span><br><span class="line">4)      Kedar</span><br><span class="line">5)      Hari</span><br></pre></td></tr></table></figure><p> 结果只显示匹配到a的行</p></li><li><p>打印匹配到的行数</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ awk <span class="string">'BEGIN&#123;count=0&#125; /a/ &#123; count++&#125; END&#123;print count&#125;'</span> mark.txt</span><br><span class="line">4</span><br></pre></td></tr></table></figure></li><li><p>打印字符数量超过16的行</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ awk <span class="string">'length($0) &gt; 18'</span> marks.txt</span><br><span class="line">3) Shyam   Biology   87</span><br><span class="line">4) Kedar   English   85</span><br></pre></td></tr></table></figure></li></ol><p>NOTE:在这里的参数和bash中的参数类似。$0当前行，$1之后表示对应文件的行的列。</p><h3 id="内建变量"><a href="#内建变量" class="headerlink" title="内建变量"></a>内建变量</h3><p>AWK提供了很多内建变量提供使用，能够起到很大的作用。</p><h4 id="标准awk变量"><a href="#标准awk变量" class="headerlink" title="标准awk变量"></a>标准awk变量</h4><ul><li><p>ARGC 命令行参数个数</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ awk <span class="string">'BEGIN&#123;print "argument=",ARGC&#125;'</span> one two three</span><br><span class="line">argument= 4</span><br></pre></td></tr></table></figure></li><li><p>ARGV  命令行参数数组 如 <code>ARGV[1]=...</code></p></li><li><p>CONVFMT  数字的约定格式，默认值是%.6g</p></li><li><p>ENVIRON 环境变量 </p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ awk <span class="string">'BEGIN &#123;print "User is",ENVIRON["USER"]&#125;'</span></span><br><span class="line">User is nanyin</span><br></pre></td></tr></table></figure></li><li><p>FILENAME 当前文件的名称</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ awk <span class="string">'END&#123;print "this file name is", FILENAME&#125;'</span> mark.txt</span><br><span class="line">this file name is mark.txt</span><br></pre></td></tr></table></figure></li><li><p>FS 分割符 默认是空格也可以使用-F设置分割符</p></li><li><p>NF 当前行的字段数目</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ awk <span class="string">'END&#123;print NF&#125;'</span> mark.txt</span><br><span class="line">4</span><br></pre></td></tr></table></figure></li><li><p>NR 行号 </p></li><li><p>FNR 当前文件的行号</p></li><li><p>OFS 输出字段分隔符</p></li><li><p>ORS 输出行分割符</p></li><li><p>RLENGTH 表示match函数匹配字符床的长度</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ awk <span class="string">'BEGIN &#123;if(match("One  Three","ree")) &#123;print RLENGTH&#125;&#125;'</span></span><br><span class="line">3</span><br></pre></td></tr></table></figure></li><li><p>RSTART 表示match函数第一次匹配到的位置</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ awk <span class="string">'BEGIN &#123;if(match("One  Three","ree")) &#123;print RSTART&#125;&#125;'</span> </span><br><span class="line">8</span><br></pre></td></tr></table></figure></li></ul><h3 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h3><p>与C语言的操作符基本相同，如数字的一元二元三元操作等，字符串的链接，数组元素等</p><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><p>AWK对正则的处理非常强大，通常你一个小小的正则表达式能够处理很复杂的问题。关于正则，有时间整理一篇专门关于正则的文章。</p><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>AWK支持关联数组，也就是说，不仅可以使用数字索引的数组，还可以使用字符串作为索引。删除数组元素使用delete语句</p><h3 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h3><p>流程控制if while for 与C相同</p><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>查手册吧。。一次性看不完。。。。<a href="https://www.gnu.org/software/gawk/manual/gawk.html#Built_002din" target="_blank" rel="noopener">内建函数手册</a>，这里有在这章比较重要的字符串函数。接下来就来看看有哪些函数比较重要。</p><h4 id="AWK对字符串操作的函数"><a href="#AWK对字符串操作的函数" class="headerlink" title="AWK对字符串操作的函数"></a>AWK对字符串操作的函数</h4><p> 整理出awk对字符串的几个具体函数操作。</p><ol><li><p>asort(source,dest,how) </p></li><li><p>asorti(source,dest,how)</p><p>以上两个函数的how先不解释，前两个参数分别为source数组和排序方式，第二个可以不写，默认使用第一位的进行排位。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">'BEGIN&#123;a[0]="xiaohong";a[1]="aiaolan";asort(a);for(i=2;i&gt;=0;i--) &#123;print a[i]&#125;&#125;'</span></span><br><span class="line">    xiaohong</span><br><span class="line">    aiaolan</span><br><span class="line">`</span><br></pre></td></tr></table></figure><p>asorti()函数会将顺序替换到数组的value处如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">'BEGIN&#123;a[0]="xiaohong";a[1]="aiaolan";asorti(a);for(i=2;i&gt;=0;i--) &#123;print a[i]&#125;&#125;'</span></span><br><span class="line">    1</span><br><span class="line">    0</span><br></pre></td></tr></table></figure></li><li><p>gensub(regexp,replacement,how[,target]) 类似gsub和sub</p><p>替换匹配到的正则<em>regexp</em>为replacement.如果how是g或者G(global的简写),则表示替换所有使用regexp匹配到的字符串,target是目标字符串</p><p>如果使用regexp未匹配到，则返回原始target的值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一个</span></span><br><span class="line"><span class="built_in">echo</span> a b c a d | gawk <span class="string">'&#123;print gensub(/a/,"AA",2)&#125;'</span> </span><br><span class="line">a b c AA d</span><br><span class="line"><span class="comment"># 第二个</span></span><br><span class="line">awk <span class="string">'</span></span><br><span class="line"><span class="string">BEGIN&#123;</span></span><br><span class="line"><span class="string">a="abc def"</span></span><br><span class="line"><span class="string">b = gensub(/(.+) (.+)/,"\\2 \\1","g",a)</span></span><br><span class="line"><span class="string">print b</span></span><br><span class="line"><span class="string">&#125;'</span></span><br><span class="line">def abc</span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li><p>gsub(regexp,replacement[,target]) </p><p> gsub中的‘g’其实是表示的是global,寻找目标的匹配到从左最长的，不重叠的,找到并且替换掉。</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; gsub(/Britain/, <span class="string">"United Kingdom"</span>); <span class="built_in">print</span> &#125;</span><br></pre></td></tr></table></figure><p> 返回的值为匹配到的次数</p></li><li><p>index(in,find)</p><p> 寻找in串内符合find匹配到的字符的index位置</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ awk <span class="string">'BEGIN&#123;</span></span><br><span class="line"><span class="string">quote&gt; print index("hello","lo")&#125;'</span></span><br><span class="line">4</span><br></pre></td></tr></table></figure></li><li><p>length([string]) 顾名思义，不解释了</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ awk <span class="string">'BEGIN&#123;print length("hello")&#125;'</span></span><br><span class="line">5</span><br></pre></td></tr></table></figure><p> NOTE: If no argument is supplied, length() returns the length of $0. </p></li><li><p>match(string,regexp,[,array]) </p><p> 使用正则匹配字符串，返回匹配到的位置，若未匹配到返回0</p></li><li><p>split(string,array[,fieldsep[,seps]])</p><p> 分割string字符串，使用array存放分割后产生的字符组，使用fieldsep组为分割符，seps存放每次分割产生的分割符。一个分割出来的存放到array[1]中，第二个存放到array[2]中，以此类推。如果分割符fieldsep不写，则默认分割符为空格。</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ awk <span class="string">'BEGIN&#123;print split("cul-de-sac",a,"-",seps);for(i=1;i&lt;4;i++)&#123;print a[i]&#125;&#125;'</span> </span><br><span class="line">3</span><br><span class="line">cul</span><br><span class="line">de</span><br><span class="line">sac</span><br></pre></td></tr></table></figure></li><li><p>sprintf(format,expression1,..)</p><p> 是printf的功能，并且能够返回字符串</p></li><li><p>strtonum (str)</p><p>类似java的parseInt()函数，由String字符串转成数字</p></li><li><p>sub（regexp,replacement[,target]）</p><p>最左最长匹配原则进行匹配，sub个gsub的作用相同，分割字符串，并进行替换</p></li><li><p>substr(string,start[,end])</p><p>分割字符串</p></li><li><p>tolower(string) &amp; toupper(string)</p><p>大小写转换</p></li></ol><p>关于awk的就总结到这了。。十分基础的总结。。推荐文档，清晰明了。下一篇打算先整理整理正则表达式。现在哪里都会用到正则，还是很有必要看看正则的。</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2018-05-05-bash_05_操作变量</title>
      <link href="/2019/06/18/2018-05-05-bash_05_%E6%93%8D%E4%BD%9C%E5%8F%98%E9%87%8F/"/>
      <url>/2019/06/18/2018-05-05-bash_05_%E6%93%8D%E4%BD%9C%E5%8F%98%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<hr><p>layout:     post<br>title:      “bash学习记录（五） bash中关于变量的更多的知识”<br>subtitle:   “关于bash的变量的拓展和应用”<br>date:       2018-05-01 17:00:00<br>author:     “NanYin”<br>header-img: “img/home-bg.jpg”<br>tags:<br>    - bash<br>    - Linux<br>categories:<br>    - Bash<br>copyright: true</p><hr><h1 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h1><p>bash支持很多关于字符串的操作，不过可惜的是，这些操作缺乏统一性，有一些是使用参数等，另外一些是通过内建命令<code>expr</code>命令来实现，这会导致不同的语法功能的重叠，会比较混乱，下面简单介绍一下使用参数和命令的实现字符串的操作。</p><ul><li><p>字符串长度（String Length）</p><ol><li><p>$(#string) 这里是和C语言中的strlen()是相同的。</p></li><li><p>expr length $string 同样表示string串的长度。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line">string=abcdefgHIGKL</span><br><span class="line"><span class="comment">#使用第一种方法$(#string)</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"string的长度是：<span class="variable">$&#123;#string&#125;</span>"</span></span><br><span class="line"><span class="comment">#使用第二种方法使用expr内建命令 优点简单易懂</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"string的长度是：`expr length <span class="variable">$string</span>`"</span></span><br><span class="line">`</span><br></pre></td></tr></table></figure></li></ol></li><li><p>字符串从开头匹配子字串的长度</p><p>  方法如下：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">stringZ=abcABC123ABCab </span><br><span class="line"><span class="built_in">echo</span> `expr match <span class="string">"<span class="variable">$stringZ</span>"</span> <span class="string">'abc[A-Z]*.2'</span>`</span><br><span class="line"><span class="built_in">echo</span> `expr <span class="variable">$stringZ</span> : <span class="string">'abc[A-Z]*.2'</span>`</span><br></pre></td></tr></table></figure></li><li><p>匹配到子串的位置 (index)</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> `expr index <span class="variable">$stringZ</span> <span class="string">'abc[A-Z]*.2'</span>`</span><br></pre></td></tr></table></figure></li><li><p>子字符串的截取</p><ol><li><p>${string:position} 从positon位置截取字符串string。</p></li><li><p>${string:positong:length} 从positon位置截取字符串string，并且限定截取长度为length。</p></li><li><p>expr substr $string $positon $length 意思同上。</p></li><li><p>expr match $string ‘\(substring \)’ 这里的substring是正则表达式。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#截取字符串</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;stringZ:5&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;stringZ:5:4&#125;</span></span><br><span class="line"><span class="built_in">echo</span> `expr substr <span class="variable">$stringZ</span> 5 4`</span><br><span class="line"><span class="built_in">echo</span> `expr match <span class="variable">$stringZ</span> <span class="string">'\(abc[A-Z]*.2\)'</span>`</span><br></pre></td></tr></table></figure></li></ol></li><li><p>从字符串中移除子字符串</p><ol><li><p>${string#substring} substring是子字符串。并且需要注意的是：<strong>该方法表示的是向后移除该子字符串最短匹配到的字符串。</strong></p></li><li><p>${string##substring} 与上面的正好相反。<strong>该方法表示的是向后移除该字符串最长匹配到的字符串。</strong></p></li><li><p>${string%substring} <strong>该方法表示的是由后向前移除该子字符串最短匹配到的字符串。</strong></p></li><li><p>${string%%substring} <strong>该方法表示的是由后向前移除该字符串最长匹配到的字符串。</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"移除字符串"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;stringZ#a*b&#125;</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;stringZ##a*b&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;stringZ%a*c&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;stringZ%%a*c&#125;</span></span><br><span class="line"><span class="comment">#结果：</span></span><br><span class="line"><span class="comment">#ABC123ABCabc</span></span><br><span class="line"><span class="comment">#c</span></span><br><span class="line"><span class="comment">#abcABC123ABC</span></span><br><span class="line"><span class="comment">#</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p>子字符串替换</p><ol><li><p>${string/substring/replacement}  替换第一个匹配到substring的字符串，替换为replacement。</p></li><li><p>${string//substring/replacement} 替换所有匹配到的字符。</p></li><li><p>${string/#substring/replacement} 替换由前向后匹配到的字符。</p></li><li><p>${string/%substring/replacement} 替换由后向前匹配到的字符。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"---------字符串替换---------"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;stringZ/abc/xyz&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;stringZ//abc/xyz&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;stringZ/#abc/xyz&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;stringZ/%abc/xyz&#125;</span></span><br><span class="line"><span class="comment">#结果：</span></span><br><span class="line"><span class="comment">#xyzABC123ABCabc</span></span><br><span class="line"><span class="comment">#xyzABC123ABCxyz</span></span><br><span class="line"><span class="comment">#xyzABC123ABCabc</span></span><br><span class="line"><span class="comment">#abcABC123ABCxyz</span></span><br></pre></td></tr></table></figure></li></ol></li></ul><h2 id="使用awk操作字符串"><a href="#使用awk操作字符串" class="headerlink" title="使用awk操作字符串"></a>使用awk操作字符串</h2><p>现学先卖，<a href="http://blog.jobbole.com/109089/" target="_blank" rel="noopener">三十分钟学会AWK</a>,快速了解和应用awk。</p><p>基于以上，使用awk练习。</p><p>工作流分为大致三部分， read-&gt;excute-&gt;repeat,实现对文本的处理。</p><h3 id="程序机构"><a href="#程序机构" class="headerlink" title="程序机构"></a>程序机构</h3><ul><li><p>BEGIN 语法：<code>BEGIN {awk-commands}</code> 是可以省略的部分块，主要作用是声明变量，初始化变量，</p></li><li><p>BODY块 ：<code>{commonds}</code>，是必须填写的部分，主要作用是处理文本，会对输入的每一行都执行body块中的命令，并且body是没有关键字的。</p></li></ul><p>-END ：<code>END {commands}</code>,同BEGIN，是可以省略的部分</p><h3 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h3><ul><li><p>awk命令行，可以通过执行<code>awk [-option] files</code>来实现对files文件的处理。 如 <code>awk {print} mark.txt</code> 这里就不具体举例了，开头的链接里讲的非常详细，这里只做简单的记录和查看。</p></li><li><p>使用命令文件方式 <code>awk -f command.awk marks.txt</code> 使用-f参数，可以使用文件中的命令。</p></li><li><p>awk基本选项 ： 这里不具体总结，linux环境下终端 <code>man awk</code>可以看到非常多的选项。</p></li></ul><h3 id="基本使用示例"><a href="#基本使用示例" class="headerlink" title="基本使用示例"></a>基本使用示例</h3><ol><li><p>基本打印文件内容</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ awk <span class="string">'&#123;print&#125;'</span> mark.txt </span><br><span class="line">1)  Amit    Physics  80</span><br><span class="line">2)  Rahul   Maths    90</span><br><span class="line">3)  Shyam   Biology  87</span><br><span class="line">4)  Kedar   English  85</span><br><span class="line">5)  Hari    History  89</span><br></pre></td></tr></table></figure></li><li><p>打印具体项内容</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ awk <span class="string">'&#123;print $1 "\t" $2 &#125;'</span> mark.txt</span><br><span class="line">1)      Amit</span><br><span class="line">2)      Rahul</span><br><span class="line">3)      Shyam</span><br><span class="line">4)      Kedar</span><br><span class="line">5)      Hari</span><br></pre></td></tr></table></figure></li><li><p>添加限定条件的打印内容</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ awk  <span class="string">'/a/  &#123;print $1 "\t" $2 &#125;'</span> mark.txt</span><br><span class="line">2)      Rahul</span><br><span class="line">3)      Shyam</span><br><span class="line">4)      Kedar</span><br><span class="line">5)      Hari</span><br></pre></td></tr></table></figure><p> 结果只显示匹配到a的行</p></li><li><p>打印匹配到的行数</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ awk <span class="string">'BEGIN&#123;count=0&#125; /a/ &#123; count++&#125; END&#123;print count&#125;'</span> mark.txt</span><br><span class="line">4</span><br></pre></td></tr></table></figure></li><li><p>打印字符数量超过16的行</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ awk <span class="string">'length($0) &gt; 18'</span> marks.txt</span><br><span class="line">3) Shyam   Biology   87</span><br><span class="line">4) Kedar   English   85</span><br></pre></td></tr></table></figure></li></ol><p>NOTE:在这里的参数和bash中的参数类似。$0当前行，$1之后表示对应文件的行的列。</p><h3 id="内建变量"><a href="#内建变量" class="headerlink" title="内建变量"></a>内建变量</h3><p>AWK提供了很多内建变量提供使用，能够起到很大的作用。</p><h4 id="标准awk变量"><a href="#标准awk变量" class="headerlink" title="标准awk变量"></a>标准awk变量</h4><ul><li><p>ARGC 命令行参数个数</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ awk <span class="string">'BEGIN&#123;print "argument=",ARGC&#125;'</span> one two three</span><br><span class="line">argument= 4</span><br></pre></td></tr></table></figure></li><li><p>ARGV  命令行参数数组 如 <code>ARGV[1]=...</code></p></li><li><p>CONVFMT  数字的约定格式，默认值是%.6g</p></li><li><p>ENVIRON 环境变量 </p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ awk <span class="string">'BEGIN &#123;print "User is",ENVIRON["USER"]&#125;'</span></span><br><span class="line">User is nanyin</span><br></pre></td></tr></table></figure></li><li><p>FILENAME 当前文件的名称</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ awk <span class="string">'END&#123;print "this file name is", FILENAME&#125;'</span> mark.txt</span><br><span class="line">this file name is mark.txt</span><br></pre></td></tr></table></figure></li><li><p>FS 分割符 默认是空格也可以使用-F设置分割符</p></li><li><p>NF 当前行的字段数目</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ awk <span class="string">'END&#123;print NF&#125;'</span> mark.txt</span><br><span class="line">4</span><br></pre></td></tr></table></figure></li><li><p>NR 行号 </p></li><li><p>FNR 当前文件的行号</p></li><li><p>OFS 输出字段分隔符</p></li><li><p>ORS 输出行分割符</p></li><li><p>RLENGTH 表示match函数匹配字符床的长度</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ awk <span class="string">'BEGIN &#123;if(match("One  Three","ree")) &#123;print RLENGTH&#125;&#125;'</span></span><br><span class="line">3</span><br></pre></td></tr></table></figure></li><li><p>RSTART 表示match函数第一次匹配到的位置</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ awk <span class="string">'BEGIN &#123;if(match("One  Three","ree")) &#123;print RSTART&#125;&#125;'</span> </span><br><span class="line">8</span><br></pre></td></tr></table></figure></li></ul><h3 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h3><p>与C语言的操作符基本相同，如数字的一元二元三元操作等，字符串的链接，数组元素等</p><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><p>AWK对正则的处理非常强大，通常你一个小小的正则表达式能够处理很复杂的问题。关于正则，有时间整理一篇专门关于正则的文章。</p><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>AWK支持关联数组，也就是说，不仅可以使用数字索引的数组，还可以使用字符串作为索引。删除数组元素使用delete语句</p><h3 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h3><p>流程控制if while for 与C相同</p><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>查手册吧。。一次性看不完。。。。<a href="https://www.gnu.org/software/gawk/manual/gawk.html#Built_002din" target="_blank" rel="noopener">内建函数手册</a>，这里有在这章比较重要的字符串函数。接下来就来看看有哪些函数比较重要。</p><h4 id="AWK对字符串操作的函数"><a href="#AWK对字符串操作的函数" class="headerlink" title="AWK对字符串操作的函数"></a>AWK对字符串操作的函数</h4><p> 整理出awk对字符串的几个具体函数操作。</p><ol><li><p>asort(source,dest,how) </p></li><li><p>asorti(source,dest,how)</p><p>以上两个函数的how先不解释，前两个参数分别为source数组和排序方式，第二个可以不写，默认使用第一位的进行排位。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">'BEGIN&#123;a[0]="xiaohong";a[1]="aiaolan";asort(a);for(i=2;i&gt;=0;i--) &#123;print a[i]&#125;&#125;'</span></span><br><span class="line">    xiaohong</span><br><span class="line">    aiaolan</span><br><span class="line">`</span><br></pre></td></tr></table></figure><p>asorti()函数会将顺序替换到数组的value处如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">'BEGIN&#123;a[0]="xiaohong";a[1]="aiaolan";asorti(a);for(i=2;i&gt;=0;i--) &#123;print a[i]&#125;&#125;'</span></span><br><span class="line">    1</span><br><span class="line">    0</span><br></pre></td></tr></table></figure></li><li><p>gensub(regexp,replacement,how[,target]) 类似gsub和sub</p><p>替换匹配到的正则<em>regexp</em>为replacement.如果how是g或者G(global的简写),则表示替换所有使用regexp匹配到的字符串,target是目标字符串</p><p>如果使用regexp未匹配到，则返回原始target的值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一个</span></span><br><span class="line"><span class="built_in">echo</span> a b c a d | gawk <span class="string">'&#123;print gensub(/a/,"AA",2)&#125;'</span> </span><br><span class="line">a b c AA d</span><br><span class="line"><span class="comment"># 第二个</span></span><br><span class="line">awk <span class="string">'</span></span><br><span class="line"><span class="string">BEGIN&#123;</span></span><br><span class="line"><span class="string">a="abc def"</span></span><br><span class="line"><span class="string">b = gensub(/(.+) (.+)/,"\\2 \\1","g",a)</span></span><br><span class="line"><span class="string">print b</span></span><br><span class="line"><span class="string">&#125;'</span></span><br><span class="line">def abc</span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li><p>gsub(regexp,replacement[,target]) </p><p> gsub中的‘g’其实是表示的是global,寻找目标的匹配到从左最长的，不重叠的,找到并且替换掉。</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; gsub(/Britain/, <span class="string">"United Kingdom"</span>); <span class="built_in">print</span> &#125;</span><br></pre></td></tr></table></figure><p> 返回的值为匹配到的次数</p></li><li><p>index(in,find)</p><p> 寻找in串内符合find匹配到的字符的index位置</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ awk <span class="string">'BEGIN&#123;</span></span><br><span class="line"><span class="string">quote&gt; print index("hello","lo")&#125;'</span></span><br><span class="line">4</span><br></pre></td></tr></table></figure></li><li><p>length([string]) 顾名思义，不解释了</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ awk <span class="string">'BEGIN&#123;print length("hello")&#125;'</span></span><br><span class="line">5</span><br></pre></td></tr></table></figure><p> NOTE: If no argument is supplied, length() returns the length of $0. </p></li><li><p>match(string,regexp,[,array]) </p><p> 使用正则匹配字符串，返回匹配到的位置，若未匹配到返回0</p></li><li><p>split(string,array[,fieldsep[,seps]])</p><p> 分割string字符串，使用array存放分割后产生的字符组，使用fieldsep组为分割符，seps存放每次分割产生的分割符。一个分割出来的存放到array[1]中，第二个存放到array[2]中，以此类推。如果分割符fieldsep不写，则默认分割符为空格。</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ awk <span class="string">'BEGIN&#123;print split("cul-de-sac",a,"-",seps);for(i=1;i&lt;4;i++)&#123;print a[i]&#125;&#125;'</span> </span><br><span class="line">3</span><br><span class="line">cul</span><br><span class="line">de</span><br><span class="line">sac</span><br></pre></td></tr></table></figure></li><li><p>sprintf(format,expression1,..)</p><p> 是printf的功能，并且能够返回字符串</p></li><li><p>strtonum (str)</p><p>类似java的parseInt()函数，由String字符串转成数字</p></li><li><p>sub（regexp,replacement[,target]）</p><p>最左最长匹配原则进行匹配，sub个gsub的作用相同，分割字符串，并进行替换</p></li><li><p>substr(string,start[,end])</p><p>分割字符串</p></li><li><p>tolower(string) &amp; toupper(string)</p><p>大小写转换</p></li></ol><p>关于awk的就总结到这了。。十分基础的总结。。推荐文档，清晰明了。下一篇打算先整理整理正则表达式。现在哪里都会用到正则，还是很有必要看看正则的。</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
