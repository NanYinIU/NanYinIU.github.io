<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>设计模式之状态模式</title>
      <link href="/2019/06/19/2019-06-19-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/06/19/2019-06-19-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="设计模式之状态模式"><a href="#设计模式之状态模式" class="headerlink" title="设计模式之状态模式"></a>设计模式之状态模式</h1><p>状态模式是对象的行为模式。状态模式允许一个对象在其内部状态改变的时候改变其行为。这个对象看上去就像是改变了它的类一样。</p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ul><li>对象的行为取决于其状态，并且必须根据该状态在运行时更改其行为。</li><li>通常，几个操作将包含相同的条件结构。State模式将条件的每个分支放在一个单独的类中。可以将对象的状态视为一个对象，它可以独立于其他对象而变化</li></ul><p>概括来说，状态模式将行为包装到具体的状态对象中。每个状态对象是抽象状态的子类。状态模式意图是在改变对象的内部状态的时候，行为随之改变。</p><h2 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h2><p>状态模式分为三种结构：环境角色、抽象状态角色、具体状态角色</p><p><img src="https://raw.githubusercontent.com/NanYinIU/PicRoom/master/img/20190618203143.png" alt="状态模式结构图"></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>电灯有两种基本行为 开启、关闭。但是有两个状态，正常和坏掉的状态。将共同的行为封装到统一的状态接口中，再根据不同的状态，创建子类完成不同状态形成不同的行为。</p><p>灯再正常状态下能够正常开启，正常关闭。等在坏掉的状态下，不能开启和关闭。状态模式就是根据这个逻辑抽离行为，将具体行为包装到具体状态对象中。</p><h3 id="抽象状态角色"><a href="#抽象状态角色" class="headerlink" title="抽象状态角色"></a>抽象状态角色</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">State</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">open</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="具体状态角色"><a href="#具体状态角色" class="headerlink" title="具体状态角色"></a>具体状态角色</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NormalState</span> <span class="keyword">implements</span> <span class="title">State</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"电灯开了！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"电灯关了！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ErrorState</span> <span class="keyword">implements</span> <span class="title">State</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"电灯开不了！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"电灯关不了！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="环境角色"><a href="#环境角色" class="headerlink" title="环境角色"></a>环境角色</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Context</span> </span>&#123;</span><br><span class="line">    <span class="comment">//状态参数</span></span><br><span class="line">    State state;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Context</span><span class="params">(State state)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.state = state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestToOpen</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        state.open();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestToClose</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        state.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//状态变化</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changeStageTo</span><span class="params">(State state)</span></span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.state = state;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="客户端测试"><a href="#客户端测试" class="headerlink" title="客户端测试"></a>客户端测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Context context = <span class="keyword">new</span> Context(<span class="keyword">new</span> NormalState());</span><br><span class="line">        context.requestToOpen();</span><br><span class="line">        context.requestToClose();</span><br><span class="line">        <span class="comment">//将状态变更为坏的状态</span></span><br><span class="line">        context.changeStageTo(<span class="keyword">new</span> ErrorState());</span><br><span class="line">        context.requestToOpen();</span><br><span class="line">        context.requestToClose();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac下使用idea时在dock栏一直存在java图标和控制台乱码问题</title>
      <link href="/2019/06/18/2019-06-18-Mac%E4%B8%8Bidea%E5%9C%A8Dock%E6%A0%8F%E4%B8%80%E7%9B%B4%E5%AD%98%E5%9C%A8%E5%9B%BE%E6%A0%87%E5%92%8C%E6%8E%A7%E5%88%B6%E5%8F%B0%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/"/>
      <url>/2019/06/18/2019-06-18-Mac%E4%B8%8Bidea%E5%9C%A8Dock%E6%A0%8F%E4%B8%80%E7%9B%B4%E5%AD%98%E5%9C%A8%E5%9B%BE%E6%A0%87%E5%92%8C%E6%8E%A7%E5%88%B6%E5%8F%B0%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="Mac下使用Idea相关问题"><a href="#Mac下使用Idea相关问题" class="headerlink" title="Mac下使用Idea相关问题"></a>Mac下使用Idea相关问题</h1><h2 id="使用tomcat启动IDEA项目后，dock栏一直存在JAVA图标问题"><a href="#使用tomcat启动IDEA项目后，dock栏一直存在JAVA图标问题" class="headerlink" title="使用tomcat启动IDEA项目后，dock栏一直存在JAVA图标问题"></a>使用tomcat启动IDEA项目后，dock栏一直存在JAVA图标问题</h2><p>在mac上启动idea后，存在dock栏一直存在JAVA图标的问题，如下图：</p><p><img src="https://raw.githubusercontent.com/NanYinIU/PicRoom/master/img/20190618081946.png" alt="Dock栏存在java图标问题"></p><p>解决方式：</p><p><img src="https://raw.githubusercontent.com/NanYinIU/PicRoom/master/img/20190618082435.png" alt="存在图标解决方式"></p><p>打开<code>Run/Debug configurations</code>,在<code>vm options</code>中添加如下内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Dapple.awt.UIElement=<span class="keyword">true</span></span><br></pre></td></tr></table></figure><h2 id="启动IDEA后，控制台乱码"><a href="#启动IDEA后，控制台乱码" class="headerlink" title="启动IDEA后，控制台乱码"></a>启动IDEA后，控制台乱码</h2><p><img src="https://raw.githubusercontent.com/NanYinIU/PicRoom/master/img/20190618082124.png" alt="控制台乱码"></p><p>解决方式和上一个问题相同，同样在vm options中增加参数，具体参数如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Dfile.encoding=UTF-<span class="number">8</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之模版模式</title>
      <link href="/2019/06/17/2019-06-17-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%A8%A1%E7%89%88%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/06/17/2019-06-17-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%A8%A1%E7%89%88%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="设计模式之模版方法模式"><a href="#设计模式之模版方法模式" class="headerlink" title="设计模式之模版方法模式"></a>设计模式之模版方法模式</h1><p>模版模式是类的行为模式，将部分逻辑以具体方法来实现，将其他方法声明为抽象方法来让子类来实现。不同的子类实现的方法逻辑不同，从而整体的逻辑有所差异。</p><p>这里涉及到两个角色：</p><p>一、抽象模板(Abstract Template)角色有如下责任：</p><pre><code>- 定义了一个或多个抽象操作，以便让子类实现。这些抽象操作叫做基本操作，它们是一个顶级逻辑的组成步骤。- 定义并实现了一个模板方法。这个模板方法一般是一个具体方法，它给出了一个顶级逻辑的骨架，而逻辑的组成步骤在相应的抽象操作中，推迟到子类实现。顶级逻辑也有可能调用一些具体方法。</code></pre><p>二、具体模板(Concrete Template)角色又如下责任：</p><pre><code>- 实现父类所定义的一个或多个抽象方法，它们是一个顶级逻辑的组成步骤。- 每一个抽象模板角色都可以有任意多个具体模板角色与之对应，而每一个具体模板角色都可以给出这些抽象方法（也就是顶级逻辑的组成步骤）的不同实现，从而使得顶级逻辑的实现各不相同。</code></pre><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p> 实现不变的部分一次，并将其他留给子类来实现可能需要变化的行为。</p><ul><li>需要简化代码，分离出公共的部分，抽离出一个公共的模板方法来替换所有的代码。</li><li>控制子类扩展。定义在特定点调用“钩子”操作的模板方法，从而仅允许在那些点进行扩展。</li></ul><h2 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h2><p>这里使用到模拟servlet中的httpServlet方法（简单的模拟方法中用到的模版方法）。定义一个公共的模版方法抽象类<code>HttpServletTemplate</code>，其中有两个钩子方法<code>doGet</code>和<code>doPost</code>，所谓的钩子方法就是需要由子类实现的方法。还有一个具体方法<code>service</code>来实现模版调用的作用。</p><p>模拟两个子类实现<code>HttpServletTemplate</code>实现两个钩子方法。</p><p>客户端<code>App</code>在调用的时候，直接调用两个子类的父类中的实现方法<code>service</code>实现调用模版。</p><p><img src="https://raw.githubusercontent.com/NanYinIU/PicRoom/master/img/20190617221808.png" alt="模版模式结构"></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="抽象模版类"><a href="#抽象模版类" class="headerlink" title="抽象模版类"></a>抽象模版类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpServletTemplate</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpRequestMethod method)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(method.equals(HttpRequestMethod.METHOD_GET))&#123;</span><br><span class="line">            System.out.println(<span class="string">"so something 1"</span>);</span><br><span class="line">            doGet();</span><br><span class="line">            System.out.println(<span class="string">"so something 2"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(method.equals(HttpRequestMethod.METHOD_POST))&#123;</span><br><span class="line">            doPost();</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"do nothing!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="具体模版类"><a href="#具体模版类" class="headerlink" title="具体模版类"></a>具体模版类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetClient</span> <span class="keyword">extends</span> <span class="title">HttpServletTemplate</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"this is my get methods!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PostClient</span> <span class="keyword">extends</span> <span class="title">HttpServletTemplate</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"this is my post methods!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 请求类型枚举类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> HttpRequestMethod &#123;</span><br><span class="line">    METHOD_GET,METHOD_POST,METHOD_DELETE</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="客户端调用"><a href="#客户端调用" class="headerlink" title="客户端调用"></a>客户端调用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//声明post客户端</span></span><br><span class="line">        PostClient post = <span class="keyword">new</span> PostClient();</span><br><span class="line">        <span class="comment">//调用模版</span></span><br><span class="line">        post.service(HttpRequestMethod.METHOD_POST);</span><br><span class="line">        GetClient get = <span class="keyword">new</span> GetClient();</span><br><span class="line">        get.service(HttpRequestMethod.METHOD_GET);</span><br><span class="line">        get.service(HttpRequestMethod.METHOD_POST);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实模版方法模式是创建一个算法的骨架，具体的内容由子类去填充的这个过程。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之访问者模式</title>
      <link href="/2019/06/15/2019-06-15-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/06/15/2019-06-15-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="设计模式之访问者模式"><a href="#设计模式之访问者模式" class="headerlink" title="设计模式之访问者模式"></a>设计模式之访问者模式</h1><p>访问者模式是一种复杂的行为模式。表示要对对象结构的元素执行的操作。访问者允许对对象结构中的节点定义新操作，而无需更改其操作的元素的类。</p><p>适用于数据结构相对未定的系统，它把数据结构和作用于结构上的操作之间的耦合解脱开，使得操作集合可以相对自由地演化。</p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>当遇到如下情况时，可以优先考虑使用访问者模式：</p><ol><li>对象结构中包含许多具有不同接口的对象类，并且希望对依赖于其具体类的这些对象执行操作。</li><li>需要对对象结构中的对象执行许多不同且不相关的操作，并且希望避免使用这些操作“污染”它们的类。这时就可以定义多个visitor类来完成对多个对象节点的处理。</li><li>定义对象结构的类很少改变，但是你经常想要在结构上定义新的操作。</li></ol><h2 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h2><p><strong>举个例子</strong>：在公司中，需要统计打卡记录和绩效，分别有行政部门和财务部门来实现。并且将来可能有质量部门监测研发和实施人员的工作质量。但是对研发和实施人员的考核标准有所不同。</p><h3 id="一、类图"><a href="#一、类图" class="headerlink" title="一、类图"></a>一、类图</h3><p><img src="https://raw.githubusercontent.com/NanYinIU/PicRoom/master/img/20190616105829.png" alt="类图"></p><p><code>OperateStructure</code>作为对象<code>OperateNode</code>的数据结构,并且实现类<code>OperateNodeA</code>和<code>OperateNodeB</code>行为方法有各自的实现。并且想基于这个相对固定的数据结构实现多种不同的操作<code>（visitor）</code>。这样在增加<code>visitor</code>的时候不必考虑数据结构会发生变更。</p><h3 id="二、时序"><a href="#二、时序" class="headerlink" title="二、时序"></a>二、时序</h3><p>由于调用过程比较不容易看透，这里我先使用时序图来说明调用顺序</p><p><img src="https://raw.githubusercontent.com/NanYinIU/PicRoom/master/img/20190616112121.png" alt="调用过程时序"></p><h2 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a>代码实例</h2><p>根据类图可以看出，访问者模式分为五部分：抽象节点角色 、具体节点角色 、抽象访问者角色 、具体访问者角色 、结构对象角色</p><ul><li>抽象节点角色：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">OperateNode</span> </span>&#123;</span><br><span class="line"><span class="comment">//  定义节点内都需要实现的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor visitor)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>具体节点角色：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 具体节点A 在实例中对应研发人员</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OperateNodeA</span> <span class="keyword">extends</span> <span class="title">OperateNode</span> </span>&#123;</span><br><span class="line">    <span class="comment">//绩效系数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">double</span> COEFFICIENT = <span class="number">1.2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> workDate;</span><br><span class="line"></span><br><span class="line">    OperateNodeA(<span class="keyword">int</span> workDate) &#123;</span><br><span class="line">        <span class="keyword">this</span>.workDate = workDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor visitor)</span> </span>&#123;</span><br><span class="line">        visitor.visit(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">attendance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> workDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">performance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> workDate * COEFFICIENT;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 具体节点B，在实例中对应运维人员</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OperateNodeB</span> <span class="keyword">extends</span> <span class="title">OperateNode</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> COEFFICIENT = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> workDate;</span><br><span class="line"></span><br><span class="line">    OperateNodeB(<span class="keyword">int</span> workDate) &#123;</span><br><span class="line">        <span class="keyword">this</span>.workDate = workDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor visitor)</span> </span>&#123;</span><br><span class="line">        visitor.visit(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">attendance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> workDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">performance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> workDate * COEFFICIENT;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>抽象访问者角色</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//针对结构中每一个节点分别进行各自的操作</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Visitor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">(OperateNodeA operateNodeA)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">(OperateNodeB operateNodeB)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>具体访问者角色</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 行政人员结算考勤</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VisitorA</span> <span class="keyword">implements</span> <span class="title">Visitor</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 需要对实施人员增加路上的考勤时间 模式为2</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BASIC = <span class="number">2</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(OperateNodeA operateNodeA)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> att = operateNodeA.attendance();</span><br><span class="line">        System.out.println(<span class="string">"本月该研发人员考勤为"</span>+att + <span class="string">"天"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(OperateNodeB operateNodeB)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> att =operateNodeB.attendance() + BASIC;</span><br><span class="line">        System.out.println(<span class="string">"本月该实施人员考勤为"</span>+att + <span class="string">"天"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//财务人员结算绩效</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VisitorB</span> <span class="keyword">implements</span> <span class="title">Visitor</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 研发需要添加额外绩效</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> EXTRA = <span class="number">2</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(OperateNodeA operateNodeA)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> att = operateNodeA.performance() + EXTRA;</span><br><span class="line">        System.out.println(<span class="string">"本月该研发人员绩效为 :"</span>+att );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(OperateNodeB operateNodeB)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> att =operateNodeB.performance() ;</span><br><span class="line">        System.out.println(<span class="string">"本月该研发人员绩效为 :"</span>+att );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结构对象结构</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperateStructure</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义结构体</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;OperateNode&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(OperateNode operateNode)</span></span>&#123;</span><br><span class="line">        list.add(operateNode);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//对结构体中的对象实现接收访问操作</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">action</span><span class="params">(Visitor visitor)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (OperateNode operateNode : list)&#123;</span><br><span class="line">        <span class="comment">// 目的就是使用双重分派调用来实现</span></span><br><span class="line">        <span class="comment">// 节点接受访问者与访问者访问节点的操作</span></span><br><span class="line">            operateNode.accept(visitor);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>客户端调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Visitor visitorA = <span class="keyword">new</span> VisitorA();</span><br><span class="line">        Visitor visitorB = <span class="keyword">new</span> VisitorB();</span><br><span class="line">        OperateStructure structure = <span class="keyword">new</span> OperateStructure();</span><br><span class="line">        structure.add(<span class="keyword">new</span> OperateNodeA(<span class="number">22</span>));</span><br><span class="line">        structure.add(<span class="keyword">new</span> OperateNodeB(<span class="number">22</span>));</span><br><span class="line">        structure.action(visitorA);</span><br><span class="line">        structure.action(visitorB);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">本月该研发人员考勤为22天</span><br><span class="line">本月该实施人员考勤为24天</span><br><span class="line">本月该研发人员绩效为 :28.4</span><br><span class="line">本月该研发人员绩效为 :22.0</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之代理模式</title>
      <link href="/2019/06/14/2019-06-14-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/06/14/2019-06-14-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="设计模式之代理模式"><a href="#设计模式之代理模式" class="headerlink" title="设计模式之代理模式"></a>设计模式之代理模式</h1><p>代理模式是对象的结构模式。代理模式给某一个对象提供一个代理对象，并由代理对象控制对原对象的引用。</p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ol><li>远程代理不同地址空间的对象，都当作本地化对象来处理</li><li>控制对象的访问权限。</li></ol><p>当遇到一下情况是可以使用代理模式：</p><ul><li>想控制对另一个对象的访问</li><li>懒加载</li><li>控制日志输出</li><li>计算对象引用</li><li>控制网络链接问题</li></ul><h2 id="代理模式模式结构"><a href="#代理模式模式结构" class="headerlink" title="代理模式模式结构"></a>代理模式模式结构</h2><p>浴室分为男浴室和女浴室，其中前台判断能够进入浴室的前提是没有皮肤病，如有没有，才让进入浴室。这里的前台就是一个代理，它代理来浴室，用来判断能否进入浴室的权限。这就是代理的作用。</p><p>代理模式和装饰者模式比较容易混淆。需要记住的是，两者的功能区别在于，代理模式改变的是对象的职能，控制对象的行为。而装饰者模式是对职能的增加和减少。使用场景上有所不同。</p><p><img src="https://raw.githubusercontent.com/NanYinIU/PicRoom/master/img/20190614132147.png" alt="代理模式结构图"></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>代理模式大致能够分为三部分：抽象职能类，代理类，被代理类</p><p>第一部分：抽象职能类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Person 基本信息类 和性别枚举 </span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SexEnum sex;</span><br><span class="line">    <span class="comment">//是否有皮肤病</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> hasSkinDisease;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, SexEnum sex, <span class="keyword">int</span> hasSkinDisease)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">        <span class="keyword">this</span>.hasSkinDisease = hasSkinDisease;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SexEnum <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getHasSkinDisease</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hasSkinDisease;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> SexEnum &#123;</span><br><span class="line">    MALE,FEMALE</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//抽象职能</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BathRoom</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 去澡堂泡澡</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> BathRoom <span class="title">enterBathroom</span><span class="params">(Person person)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二部分：被代理类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MaleBathRoom</span> <span class="keyword">extends</span> <span class="title">BathRoom</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BathRoom <span class="title">enterBathroom</span><span class="params">(Person p)</span> </span>&#123;</span><br><span class="line">        String sexName = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">if</span>(SexEnum.MALE.equals(p.getSex()))&#123;</span><br><span class="line">            sexName = SexEnum.MALE.toString();</span><br><span class="line">            System.out.println(<span class="string">"name : "</span>+ p.getName() +<span class="string">" sex: "</span>+ sexName +<span class="string">" go bath for male !"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三部分：代理类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BathRoomProxy</span> <span class="keyword">extends</span> <span class="title">BathRoom</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    BathRoom bathRoom;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BathRoomProxy</span><span class="params">(BathRoom bathRoom)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bathRoom = bathRoom;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BathRoom <span class="title">enterBathroom</span><span class="params">(Person person)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (person.getHasSkinDisease() == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.bathRoom.enterBathroom(person);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(person.getName() + <span class="string">" has disease."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person p1 = <span class="keyword">new</span> Person(<span class="string">"1"</span>,SexEnum.MALE,<span class="number">0</span>);</span><br><span class="line">        Person p2 = <span class="keyword">new</span> Person(<span class="string">"2"</span>,SexEnum.MALE,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        BathRoomProxy bathRoomProxy = <span class="keyword">new</span> BathRoomProxy(<span class="keyword">new</span> MaleBathRoom());</span><br><span class="line">        bathRoomProxy.enterBathroom(p1).enterBathroom(p2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name : 1 sex: MALE go bath for male !</span><br><span class="line">2 has disease.</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之享元模式</title>
      <link href="/2019/06/13/2019-06-13-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/06/13/2019-06-13-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="设计模式之享元模式"><a href="#设计模式之享元模式" class="headerlink" title="设计模式之享元模式"></a>设计模式之享元模式</h1><p>享元模式是对象的结构模式。享元模式以共享的方式高效地支持大量的细粒度对象。它用于通过尽可能多地与类似对象共享来最小化内存使用或计算开销。</p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ol><li>应用中需要大量的对象，大量的对象可能造成存储对象的开销。</li><li>对象变化的状态大多是外部状态。一旦外部状态被移除，许多对象组可被相对较少的共享对象替换。这也就是享元模式利用的点。</li><li>因为在享元模式中对象是共享的，所以在含义上的不同对象使用equels实际返回的是true。</li></ol><h2 id="享元模式结构"><a href="#享元模式结构" class="headerlink" title="享元模式结构"></a>享元模式结构</h2><p>享元模式采用一个共享来避免大量拥有相同内容对象的开销。这种开销最常见、最直观的就是内存的损耗。享元对象能做到共享的关键是区分内蕴状态(Internal State)和外蕴状态(External State)。</p><p>内蕴状态决定对象本身的状态，不会随着环境的变化而变化，而外蕰状态是由客户端将状态传递给享元对象的，外蕴状态类似同一个对象的不同的行为，内蕴状态和外蕰状态是相互独立，互不影响的。</p><p>享元模式主要这几三个部分：抽象享元类，具体享元类和享元工厂类。具体可以参考下面代码。</p><p><img src="https://raw.githubusercontent.com/NanYinIU/PicRoom/master/img/20190613005252.png" alt="享元模式"></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>在Java中，String类就符合享元模式，<code>string a = &quot;aa&quot;</code> 和 <code>string b =&quot;aa&quot;</code> 是相等的。</p><p>在下面例子中，构造抽象享元类“MyString” 和它的具体实现类，使用到相同的对象，因为享元模式，可以对这些对象进行共享使用。</p><p>第一部分：抽象享元类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyString</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">create</span><span class="params">(String outerState)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//枚举类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> InstanceType &#123;</span><br><span class="line">    INSTANCE1,INSTANCE2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二部分：具体享元类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringIns1</span> <span class="keyword">implements</span> <span class="title">MyString</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 内部状态，不可随时变化的</span></span><br><span class="line">    String innerState;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StringIns1</span><span class="params">(String innerState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.innerState = innerState;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">create</span><span class="params">(String outerState)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"create instance 1 -&gt; innerState:"</span>+<span class="keyword">this</span>.innerState);</span><br><span class="line">        <span class="comment">//外部状态，需要客户端传进来，这个值是可变化的</span></span><br><span class="line">        System.out.println(<span class="string">"create instance 1 -&gt; outerState:"</span>+outerState);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringIns2</span> <span class="keyword">implements</span> <span class="title">MyString</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    String innerState;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StringIns2</span><span class="params">(String innerState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.innerState = innerState;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">create</span><span class="params">(String outerState)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"create instance 2 -&gt; innerState:"</span>+<span class="keyword">this</span>.innerState);</span><br><span class="line">        System.out.println(<span class="string">"create instance 2 -&gt; outerState:"</span>+outerState);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三部分：享元工厂类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlyWeight</span> </span>&#123;</span><br><span class="line">    Map&lt;InstanceType,MyString&gt; store;</span><br><span class="line"></span><br><span class="line">    FlyWeight() &#123;</span><br><span class="line">        store = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MyString <span class="title">factory</span><span class="params">(InstanceType instanceType)</span></span>&#123;</span><br><span class="line">        MyString curr = store.get(instanceType);</span><br><span class="line">        <span class="keyword">if</span>(curr == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="comment">// 如果对象不存在，新建对应的对象</span></span><br><span class="line">            <span class="keyword">if</span>(instanceType.equals(InstanceType.INSTANCE1))&#123;</span><br><span class="line">            <span class="comment">// 根据内部状态决定生成哪个类型的子类</span></span><br><span class="line">                curr= <span class="keyword">new</span> StringIns1(instanceType.toString());</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(instanceType.equals(InstanceType.INSTANCE2))&#123;</span><br><span class="line">                curr= <span class="keyword">new</span> StringIns2(instanceType.toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        store.put(instanceType,curr);</span><br><span class="line">        <span class="keyword">return</span> curr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第四部分：客户端调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        FlyWeight flyWeight = <span class="keyword">new</span> FlyWeight();</span><br><span class="line">        MyString ins1 = flyWeight.factory(InstanceType.INSTANCE1);</span><br><span class="line">        MyString ins2 = flyWeight.factory(InstanceType.INSTANCE1);</span><br><span class="line">        System.out.println(ins1.equals(ins2));<span class="comment">//true 是同一个对象 内部状态相同</span></span><br><span class="line">        ins1.create(<span class="string">"*****"</span>); <span class="comment">//针对外部状态打印不同内容</span></span><br><span class="line">        ins2.create(<span class="string">"-----"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">true</span><br><span class="line">create instance 1 -&gt; innerState:INSTANCE1</span><br><span class="line">create instance 1 -&gt; outerState:*****</span><br><span class="line">create instance 1 -&gt; innerState:INSTANCE1</span><br><span class="line">create instance 1 -&gt; outerState:-----</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之外观模式</title>
      <link href="/2019/06/12/2019-06-12-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/06/12/2019-06-12-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="设计模式之外观模式"><a href="#设计模式之外观模式" class="headerlink" title="设计模式之外观模式"></a>设计模式之外观模式</h1><p>外部与一个子系统的通信必须通过一个统一的外观对象进行，为子系统中的一组接口提供一个一致的界面，使子系统更容易使用。</p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ul><li>因为子系统随着发展会变更的更复杂，客户端想更简单统一给子系统建立一个公共的调用方式。这样即使子系统的再增加可重用性而变得更加复杂，客户端也不必知道，因为客户端往往不需要针对某一个子系统进行特定的定制化。</li><li>实现了子系统与客户之间的松耦合关系，这使得子系统的组件变化不会影响到调用它的客户类，只需要调整外观类即可。</li></ul><h2 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h2><p>外观模式中客户端依靠Facade类来调用多个子系统，来达到简化客户端调用的目的。</p><p><img src="https://raw.githubusercontent.com/NanYinIU/PicRoom/master/img/20190613005252.png" alt="外观模式"></p><p>例子中，每次开机的时候都要启动mysql,apache服务，两个还好，要是有更多服务岂不是很恼人，每次都要敲一大堆命令来开启服务。这时候可以使用外观模式，将所有服务加入到外观类中，每次开机只用调用外观类中的接口就行了。来达到简化客户端使用的目的。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>第一部分：子系统接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Services</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">restart</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// mysql 服务</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MysqlService</span> <span class="keyword">implements</span> <span class="title">Services</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"mysql is started"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"mysql is stopped"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">restart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"mysql is restart"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// apache 服务</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApacheService</span> <span class="keyword">implements</span> <span class="title">Services</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"apache is started"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"apache is stopped"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">restart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"apache is restart"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二部分：外观类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Facade</span> </span>&#123;</span><br><span class="line">    List&lt;Services&gt; services;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Facade</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        services = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addService</span><span class="params">(Services services)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.services.add(services);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Services services : <span class="keyword">this</span>.services)&#123;</span><br><span class="line">            services.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Services services : <span class="keyword">this</span>.services)&#123;</span><br><span class="line">            services.stop();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">restart</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Services services : <span class="keyword">this</span>.services)&#123;</span><br><span class="line">            services.restart();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三部分：客户端调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Facade facade = <span class="keyword">new</span> Facade();</span><br><span class="line">        facade.addService(<span class="keyword">new</span> MysqlService());</span><br><span class="line">        facade.addService(<span class="keyword">new</span> ApacheService());</span><br><span class="line">        facade.start();</span><br><span class="line">        facade.stop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql is started</span><br><span class="line">apache is started</span><br><span class="line">mysql is stopped</span><br><span class="line">apache is stopped</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之装饰者模式</title>
      <link href="/2019/06/10/2019-06-10-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/06/10/2019-06-10-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="设计模式之装饰者模式"><a href="#设计模式之装饰者模式" class="headerlink" title="设计模式之装饰者模式"></a>设计模式之装饰者模式</h1><p>可以动态地将附加职责附加给对象。装饰器为子类化的方式提供了灵活的替代扩展功能。比如做梦梦到了交个女朋友，她的发型，发色，穿着都是根据场景做梦梦到的时候附加上去的。这时，就应该对“女朋友”这个对象实行装饰者模式来动态的、灵活的拓展。</p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ol><li>动态且透明地向各个对象添加职责的同时不影响其他对象。</li><li>灵活的可撤回职责。</li><li>有时候需要很多子类来用于支持每种功能的组合，这样每次增加一种功能拓展就要增加很多子类的情况。显然这样是不符合要求的。所以遇到这种多功能拓展时，需要使用装饰者模式来解决。</li></ol><h2 id="装饰者模式结构"><a href="#装饰者模式结构" class="headerlink" title="装饰者模式结构"></a>装饰者模式结构</h2><p>装饰者模式可以大致分为四种结构（本例子中的抽象构件和抽象装饰类为一个）抽象构件，具体构件，抽象装饰类，实际装饰类。</p><p><img src="https://raw.githubusercontent.com/NanYinIU/PicRoom/master/img/20190610190339.png" alt="装饰者模式"></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>第一部分：抽象构件与抽象装饰类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 制造一个假想的“女朋友”</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractGirl</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dyeHair</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">wearClothes</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二部分：实现组件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基本的功能实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NormalGirl</span> <span class="keyword">extends</span> <span class="title">AbstractGirl</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dyeHair</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"normal hair"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">wearClothes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"normal clothes"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三部分：附加装饰类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 工作中的女孩 穿正装</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WorkGirl</span> <span class="keyword">extends</span> <span class="title">AbstractGirl</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    AbstractGirl abstractGirl;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WorkGirl</span><span class="params">(AbstractGirl abstractGirl)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.abstractGirl = abstractGirl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">wearClothes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        abstractGirl.wearClothes();</span><br><span class="line">        System.out.println(<span class="string">"wearClothes after : "</span>);</span><br><span class="line">        System.out.println(<span class="string">"wear formal clothes"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实际出去逛街的女孩应该是这样的</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FashionGirl</span> <span class="keyword">extends</span> <span class="title">AbstractGirl</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    AbstractGirl abstractGirl;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FashionGirl</span><span class="params">(AbstractGirl abstractGirl)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.abstractGirl = abstractGirl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dyeHair</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        abstractGirl.dyeHair();</span><br><span class="line">        System.out.println(<span class="string">"dyeHair after : "</span>);</span><br><span class="line">        System.out.println(<span class="string">"dye blue hair"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">wearClothes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        abstractGirl.wearClothes();</span><br><span class="line">        System.out.println(<span class="string">"wearClothes after : "</span> );</span><br><span class="line">        System.out.println(<span class="string">"wear rock type clothes"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        abstractGirl.pack();</span><br><span class="line">        System.out.println(<span class="string">"wearClothes after : "</span> );</span><br><span class="line">        System.out.println(<span class="string">"take fashion pack"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后客户端的调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//先制造一个整体组件</span></span><br><span class="line">        AbstractGirl normalGirl = <span class="keyword">new</span> NormalGirl();</span><br><span class="line">        normalGirl.dyeHair();</span><br><span class="line">        <span class="comment">// 为组件添加装饰，比如这里加了个时尚的包包</span></span><br><span class="line">        AbstractGirl fashionHair = <span class="keyword">new</span> FashionGirl(normalGirl);</span><br><span class="line">        fashionHair.pack();</span><br><span class="line">        <span class="comment">//穿一套正装</span></span><br><span class="line">        AbstractGirl workClose = <span class="keyword">new</span> WorkGirl(fashionHair);</span><br><span class="line">        workClose.wearClothes();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之桥接模式</title>
      <link href="/2019/06/03/2019-06-03-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/06/03/2019-06-03-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="设计模式之桥接模式"><a href="#设计模式之桥接模式" class="headerlink" title="设计模式之桥接模式"></a>设计模式之桥接模式</h1><p>目的在于将抽象与其实现分离，以便两者可以独立变化。独立变化的同时能够根据抽象类的对象关联从而能够将两个继承结构联动起来。就像在两个结构之间建立个桥梁一样进行通信，所以叫桥接模式。</p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ol><li>如果想避免抽象类与实现的永久绑定，可以在运行时间选择和切换实现类。</li><li>抽象类和接口都应该通过子类来进行拓展，在桥接模式中，可以使用子类来进行组合的同时能够独立拓展他们。</li><li>接口的实现的变化对客户端无影响。</li><li>如果想要在多个对象类中共享实现，并且避免让客户端感知到。</li></ol><h2 id="桥接模式结构图"><a href="#桥接模式结构图" class="headerlink" title="桥接模式结构图"></a>桥接模式结构图</h2><p><img src="https://raw.githubusercontent.com/NanYinIU/PicRoom/master/img/20190603220348.png" alt="桥接模式"></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>主要分为四部分，1.抽象类 2.抽象实现类 3.接口类 4.接口实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 抽象类与抽象实现类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Colors colors;</span><br><span class="line"></span><br><span class="line">    Shape(Colors colors) &#123;</span><br><span class="line">        <span class="keyword">this</span>.colors = colors;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildShape</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 圆形实现类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShapeCircle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ShapeCircle</span><span class="params">(Colors colors)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(colors);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildShape</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"\n first step : build circle\n and second step:"</span>);</span><br><span class="line">        colors.paint();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//方形实现类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShapeSquare</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ShapeSquare</span> <span class="params">(Colors colors)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(colors);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildShape</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"\n first step : build Square\n and second step:"</span>);</span><br><span class="line">        colors.paint();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>抽象方法中引用了Colors类变量，使用实现类中的buildShape方法实现具体功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Colors</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paint</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ColorBlue</span> <span class="keyword">implements</span> <span class="title">Colors</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paint</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">" print blue !!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ColorRed</span> <span class="keyword">implements</span> <span class="title">Colors</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paint</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">" paint inner with red !!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过使用Color接口，实现类实现Colors中的paint方法实现Color</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Shape circle = <span class="keyword">new</span> ShapeCircle(<span class="keyword">new</span> ColorBlue());</span><br><span class="line">        circle.buildShape();</span><br><span class="line">        Shape square = <span class="keyword">new</span> ShapeSquare(<span class="keyword">new</span> ColorRed());</span><br><span class="line">        square.buildShape();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">结果：</span><br><span class="line"></span><br><span class="line"> first step : build circle</span><br><span class="line"> and second step:</span><br><span class="line"> print blue !!</span><br><span class="line"></span><br><span class="line"> first step : build Square</span><br><span class="line"> and second step:</span><br><span class="line"> paint red !!</span><br></pre></td></tr></table></figure><p>上面的例子中，颜色和图形是两个独立不同的维度，两个可以分别变化。将两个维度设计为两个不同的继承的结构，在两个结构之间使用在抽象类中的关联来达到链接的目的，这个链接成为两个继承结构通信的桥梁。所以为桥接模式。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之原型模式</title>
      <link href="/2019/06/02/2019-06-02-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/06/02/2019-06-02-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="设计模式之原型模式"><a href="#设计模式之原型模式" class="headerlink" title="设计模式之原型模式"></a>设计模式之原型模式</h1><p>使用原型实例指定要创建的对象类型，并通过复制此原型来创建新对象.实现方法:通过克隆方法,实现对现有对象的复制克隆.</p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ul><li>当要在运行时指定要实例化的类时，例如，通过动态加载.</li><li>避免构建与产品类层次结构相似的工厂类层次结构</li><li>当一个类的实例可以只有几个不同的状态的组合之一时.组装相应数量的原型并克隆它们可能更方便，而不是手动实例化类，每次都有适当的状态.</li><li>与对象创建相比,使用克隆成本更低</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>直接由代码看结构,其实克隆的过程就是创建对象的过程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一个细胞</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> nanyin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 23:49 2019-06-01</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cell</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Cell</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Cell</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Cell <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.clone();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Cell(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端程序:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPrototype</span><span class="params">()</span></span>&#123;</span><br><span class="line">       Cell cell = <span class="keyword">new</span> Cell();</span><br><span class="line">       cell.setName(<span class="string">"org"</span>);</span><br><span class="line">       <span class="keyword">try</span>&#123;</span><br><span class="line">           Cell cloneCell = cell.clone();</span><br><span class="line">           Assert.assertEquals(<span class="string">"org"</span>,cloneCell.getName());<span class="comment">//pass</span></span><br><span class="line">           Assert.assertEquals(cell,cloneCell);<span class="comment">//not pass</span></span><br><span class="line">       &#125;<span class="keyword">catch</span> (CloneNotSupportedException e)&#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之适配器模式</title>
      <link href="/2019/06/02/2019-06-02-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/06/02/2019-06-02-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="设计模式之适配器模式"><a href="#设计模式之适配器模式" class="headerlink" title="设计模式之适配器模式"></a>设计模式之适配器模式</h1><p>我们实际中会用到两个不同接口的类的通信,在不修改两个类的前提下,使用新的中间类来完成衔接的过程,这个中间件就是适配器.可以让两个完全不同的接口相互转化.</p><p>适配器模式允许在适配器中包装其他不兼容的对象，以使其与另一个类兼容。</p><p>就如同生活中买了港版的手机,但是附赠的是三脚插头，而大陆上用的是两脚的，需要一个适配器来将三角插头转换为两脚的。其中这个中间件就是适配器。</p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ul><li>当你想要这个类，但是类中的接口与想用的接口并不匹配</li><li>当想要去创建一个可重用的类，让它与不相关或不可预见的类合作，这个类不必要有兼容的接口</li><li>当你需要一系列的子类的时候，如果想要调整这些子类的接口方法的时候，对每一个接口子类化的这种方法是不可行的。这时就可使用适配器适配这些子类的夫类。</li></ul><h2 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h2><p><img src="https://raw.githubusercontent.com/NanYinIU/PicRoom/master/img/20190602120227.png" alt="适配器模式图"></p><p>使用client调用适配器，适配器继承与三脚插头，依赖于二脚插头。这样就可以使用三脚插头的接口调用二脚插头的方法。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 三角插头</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> nanyin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 11:13 2019-06-02</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreeLeggedPlug</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">charge</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"use three legged plug"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 二脚插头</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> nanyin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 11:13 2019-06-02</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TwoLeggedPlug</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fastCharge</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"use two legged plug for fast charge !"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//适配器 继承三角插头</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TwoLeggedPlugAdapter</span> <span class="keyword">extends</span> <span class="title">ThreeLeggedPlug</span> </span>&#123;</span><br><span class="line">    TwoLeggedPlug twoLeggedPlug;</span><br><span class="line">    <span class="comment">// 依赖于二脚插头</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TwoLeggedPlugAdapter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        twoLeggedPlug = <span class="keyword">new</span> TwoLeggedPlug();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//使用三角插头的charge方法，调用二脚插头的fastCharge方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">charge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        twoLeggedPlug.fastCharge();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//某S9港版手机</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">S9Plus</span> <span class="keyword">extends</span> <span class="title">ThreeLeggedPlug</span> </span>&#123;</span><br><span class="line">    ThreeLeggedPlug threeLeggedPlug;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">S9Plus</span><span class="params">(ThreeLeggedPlug threeLeggedPlug)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.threeLeggedPlug = threeLeggedPlug;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">charge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        threeLeggedPlug.charge();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//客户端方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCharge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 不使用适配器 使用类三角插头</span></span><br><span class="line">        ThreeLeggedPlug s9Plus = <span class="keyword">new</span> S9Plus(<span class="keyword">new</span> ThreeLeggedPlug());</span><br><span class="line">        s9Plus.charge();</span><br><span class="line">        <span class="comment">// 使用二脚插头的适配器</span></span><br><span class="line">        ThreeLeggedPlug s9PlusUseTwoLeggedPlug = <span class="keyword">new</span> S9Plus(<span class="keyword">new</span> TwoLeggedPlugAdapter());</span><br><span class="line">        s9PlusUseTwoLeggedPlug.charge();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">结果：</span><br><span class="line"></span><br><span class="line">use three legged plug</span><br><span class="line">use two legged plug for fast charge !</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之建造者模式</title>
      <link href="/2019/06/01/2019-06-01-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/06/01/2019-06-01-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="设计模式之建造者模式"><a href="#设计模式之建造者模式" class="headerlink" title="设计模式之建造者模式"></a>设计模式之建造者模式</h1><p>将复杂对象的构造与其表示分开，以便相同的构造过程可以创建不同的表示。</p><p>比如在玩游戏时的捏人物的时候,创建一个游戏任务最简单的方法时计算机自己生成一个固定的游戏任务,但是想自己构建这个人物细节的时候,这种情况下,人物的生成时一步一步生成的.再当所有类型都选择完成后,才能够创建这个人物.</p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ul><li>对象足够复杂,创建这个对象的方法应与创建这个对象的组件和组装方式分开.</li><li>当构造对象时要求对这个对象具有不同的行为.</li></ul><h2 id="建造者模式结构"><a href="#建造者模式结构" class="headerlink" title="建造者模式结构"></a>建造者模式结构</h2><p><img src="https://raw.githubusercontent.com/NanYinIU/PicRoom/master/img/20190601231729.png" alt="建造者模式类图"></p><p>上图为建造者模式类图:其中CharacterBuilder 和 Characters 中的属性相同,CharacterBuilder 存在的目的就是多种构造不同行为的Characters .</p><p>具体可以看下面代码实例</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>角色实体</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Characters</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 角色构造器内有多个角色属性</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> String skill;</span><br><span class="line">    <span class="keyword">private</span> String weapon;</span><br><span class="line">    <span class="comment">// 使用构造器来构造实体 其中实体属性有builder中来</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Characters</span><span class="params">(CharacterBuilder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = builder.getName();</span><br><span class="line">        <span class="keyword">this</span>.age = builder.getAge();</span><br><span class="line">        <span class="keyword">this</span>.sex = builder.getSex();</span><br><span class="line">        <span class="keyword">this</span>.skill = builder.getSkill();</span><br><span class="line">        <span class="keyword">this</span>.weapon = builder.getWeapon();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showCharacterBoard</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"人物 ： "</span> + <span class="keyword">this</span>.name + <span class="string">" 年龄 ："</span> + <span class="keyword">this</span>.age + <span class="string">" 性别："</span> + <span class="keyword">this</span>.sex + <span class="string">" 技能："</span> +<span class="keyword">this</span>.skill + <span class="string">" 武器："</span> + <span class="keyword">this</span>.weapon);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>角色构建器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CharacterBuilder</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 与角色实体保持相同的属性 </span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> String skill;</span><br><span class="line">    <span class="keyword">private</span> String weapon;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSkill</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> skill;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getWeapon</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> weapon;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//构造基本属性的构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CharacterBuilder <span class="title">buildBasicAttributes</span><span class="params">(String name , <span class="keyword">int</span> age, String sex)</span></span>&#123;</span><br><span class="line">        <span class="comment">//保证姓名不能为空</span></span><br><span class="line">        <span class="keyword">if</span>(name == <span class="keyword">null</span> || <span class="string">""</span>.equals(name))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"name can not be empty "</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">            <span class="keyword">this</span>.age = age;</span><br><span class="line">            <span class="keyword">this</span>.sex = sex;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> CharacterBuilder <span class="title">buildSkill</span><span class="params">(String skill)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.skill = skill;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CharacterBuilder <span class="title">billdWeapon</span><span class="params">(String weapon)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.weapon = weapon;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成角色实体</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Characters <span class="title">build</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Characters(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBuildCharacter</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 链式调用,最后使用build方法新建一个角色实体</span></span><br><span class="line">        Characters characters = <span class="keyword">new</span> CharacterBuilder()</span><br><span class="line">                .buildBasicAttributes(<span class="string">"jack"</span>,<span class="number">18</span>,<span class="string">"man"</span>)</span><br><span class="line">                .buildSkill(<span class="string">"Emission laser"</span>)</span><br><span class="line">                .billdWeapon(<span class="string">"Laser Cannon"</span>)</span><br><span class="line">                .build();</span><br><span class="line">                <span class="comment">//打印角色属性面板</span></span><br><span class="line">        characters.showCharacterBoard();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Connected to the target VM, address: &apos;127.0.0.1:57347&apos;, transport: &apos;socket&apos;</span><br><span class="line">人物 ： jack 年龄 ：18 性别：man 技能：Emission laser 武器：Laser Cannon</span><br><span class="line">Disconnected from the target VM, address: &apos;127.0.0.1:57347&apos;, transport: &apos;socket&apos;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之组合模式</title>
      <link href="/2019/06/01/2019-06-03-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/06/01/2019-06-03-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="设计模式之组合模式"><a href="#设计模式之组合模式" class="headerlink" title="设计模式之组合模式"></a>设计模式之组合模式</h1><p>将对象组合成树结构以表示部分整体层次结构。当使用树结构的上层和下层组件属性可能差别很大，所以说一般情况下需要对这两类对象进行分别处理， 但Composite允许客户端统一处理单个对象和对象组合。也就是说可以将叶子组件与整体进行一致性处理，实现的方法是组件和整体实现相同接口。</p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ol><li>想要表示对象的部分与整体之间的层次结构</li><li>想要客户端忽略组合对象和单个对象的区别，使用组合模式会统一处理最后的组合对象。</li></ol><h2 id="组合模式结构"><a href="#组合模式结构" class="headerlink" title="组合模式结构"></a>组合模式结构</h2><p><img src="https://raw.githubusercontent.com/NanYinIU/PicRoom/master/img/20190610110055.png" alt="经典模式"></p><p>最典型的情况就是多级树形菜单和文件夹结构。盗个图 - - </p><p><img src="https://raw.githubusercontent.com/NanYinIU/PicRoom/master/img/20190605154848.png" alt="组合模式结构"></p><p>上图，虽然国家，地区，城市属于不同的层级，但是都需要继承同一个接口，是客户端能够统一的调用不同层级的对象。类似多级树形菜单的结构。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>第一部分：抽象组件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这个抽象组件即完成了抽象组件的功能，又完成了“树枝”的功能，能够链接各个叶子节点</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    Integer areaLevel;</span><br><span class="line">    List&lt;Component&gt; list = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Component</span><span class="params">(String name, Integer areaLevel)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.areaLevel = areaLevel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Name : "</span>+name);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printLevel</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Area Level :"</span> + areaLevel);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 这里在抽象类的方法中直接打印子组件（ps:应统一递归输出子组件的子组件）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Component p:list</span><br><span class="line">             ) &#123;</span><br><span class="line">            System.out.println(<span class="string">"子组件："</span>+ p.name);</span><br><span class="line">            p.printName();</span><br><span class="line">            p.printLevel();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Component component)</span></span>&#123;</span><br><span class="line">       list.add(component);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二部分：树叶构件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 国家级别树叶节点</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Country</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    List&lt;Province&gt; provinceList = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Country</span><span class="params">(String name, Integer areaLevel)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, areaLevel);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Country Name :"</span> + <span class="keyword">this</span>.name);;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Province province)</span></span>&#123;</span><br><span class="line">        provinceList.add(province);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">         System.out.println(<span class="string">"当前组件:"</span>+name + <span class="string">"等级："</span>+ areaLevel);</span><br><span class="line">        <span class="keyword">for</span> (Province p:provinceList</span><br><span class="line">        ) &#123;</span><br><span class="line">            p.printAll();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printLevel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Country Level :"</span> + <span class="keyword">this</span>.areaLevel);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 省级别树叶节点</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Province</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line"></span><br><span class="line">   List&lt;City&gt; cityList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Province</span><span class="params">(String name, Integer areaLevel)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, areaLevel);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Province Name :"</span> +<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(City city)</span></span>&#123;</span><br><span class="line">       cityList.add(city);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"当前组件:"</span>+name + <span class="string">"等级："</span>+ areaLevel);</span><br><span class="line">        <span class="keyword">for</span> (City p:cityList</span><br><span class="line">        ) &#123;</span><br><span class="line">            p.printAll();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printLevel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 市级别树叶节点</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">City</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">City</span><span class="params">(String name, Integer areaLevel)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, areaLevel);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"City Name :"</span> + <span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printLevel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"City Level "</span> + <span class="keyword">this</span>.areaLevel);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"组件："</span>+ <span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三部分：客户端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Country zhongguo = <span class="keyword">new</span> Country(<span class="string">"china"</span>, <span class="number">0</span>);</span><br><span class="line">        City langfang = <span class="keyword">new</span> City(<span class="string">"langfang"</span>, <span class="number">2</span>);</span><br><span class="line">        Province hebei = <span class="keyword">new</span> Province(<span class="string">"hebei"</span>, <span class="number">1</span>);</span><br><span class="line">        zhongguo.add(hebei);</span><br><span class="line">        hebei.add(langfang);</span><br><span class="line">        zhongguo.printAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">当前组件:china 等级：0</span><br><span class="line">当前组件:hebei 等级：1</span><br><span class="line">组件：langfang</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之单例模式</title>
      <link href="/2019/05/30/2019-05-30-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/05/30/2019-05-30-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><p>意在保证一个类只有一个实例,并提供一个全局访问点.</p><p>通过将类的构造器私有化,只向外提供一个单独的创建唯一对象的方法来实现一个类只创建一个对象.主要有三种实现 1. 饿汉模式 2. 懒汉模式 3.使用枚举实现单例.下面通过具体实例来分析如何在多线程的情况下仍能满足单例模式创建对象.</p><h2 id="饿汉模式"><a href="#饿汉模式" class="headerlink" title="饿汉模式"></a>饿汉模式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line">    <span class="comment">//1. 使用静态变量</span></span><br><span class="line"><span class="comment">//    private static Singleton singleton = new Singleton();</span></span><br><span class="line">    <span class="comment">//2.使用静态代码块 未使用时造成内存空间浪费</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Singleton <span class="title">newInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方式不会影响到多线程的线程安全问题，因为类的装载机制在初始化对象的时候是保证不会有第二个线程进入的。但是有个很大的弊端是他不是<code>lazy-loading</code>的，这回产生资源的浪费，比如创建完对象后，自始至终没用过。所以不推荐使用</p><h2 id="懒汉模式"><a href="#懒汉模式" class="headerlink" title="懒汉模式"></a>懒汉模式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 普通的线程不安全的</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Singleton <span class="title">newInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(singleton == <span class="keyword">null</span>)&#123;</span><br><span class="line">            singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.静态内部类 一方面能够达到lazy-loading的效果，另一方面能够保证线程安全，因为jvm保证初始化的时候别的线程是不能进入的</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">newSingleton</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Singleton <span class="title">newInstanceInnerClass</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> newSingleton.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码的第一种是不能保证线程安全的，多线程下会导致失效。而第二种使用静态内部类的方式实现能够实现线程安全得宜于类的加载机制，类似饿汉模式。但同时具有<code>lazy-Loading</code>的特性。是常用的单例模式用法。</p><h3 id="double-check双重锁"><a href="#double-check双重锁" class="headerlink" title="double-check双重锁"></a><code>double-check</code>双重锁</h3><p>双重锁结构只是为了满足多线程安全而建立的,是一种特殊的懒汉模式,思想同懒汉模式相同.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoubleCheck</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">DoubleCheck</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> DoubleCheck doubleCheck; <span class="comment">//使用volatile保证原子性，防止重排序</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DoubleCheck <span class="title">newInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(doubleCheck == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">// 当两个线程同时到这步 a先进同步块，在a进入后获得instance后，b获得锁，进入同步块，</span></span><br><span class="line">            <span class="comment">// 这时候下一个判断就起到作用了，这时候的doubleCheck不为空，</span></span><br><span class="line">            <span class="comment">// 直接return，否则又️新建了一个对象</span></span><br><span class="line">            <span class="keyword">synchronized</span> (DoubleCheck.class)&#123;</span><br><span class="line">                <span class="keyword">if</span>(doubleCheck == <span class="keyword">null</span>)&#123;</span><br><span class="line">                    doubleCheck = <span class="keyword">new</span> DoubleCheck();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> doubleCheck;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上double-check也是懒汉模式的一种，能够保证线程安全。很完美。。</p><h2 id="使用枚举创建单例"><a href="#使用枚举创建单例" class="headerlink" title="使用枚举创建单例"></a>使用枚举创建单例</h2><p>在stackoverflow中有一个问题<a href="https://stackoverflow.com/questions/70689/what-is-an-efficient-way-to-implement-a-singleton-pattern-in-java" target="_blank" rel="noopener">What is an efficient way to implement a singleton pattern in Java?</a></p><p>这里的回答引用到了Effective Java 作者 Joshua Bloch对于单例的处理方式:使用枚举</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> SingletonEnum &#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String[] favoriteSongs =</span><br><span class="line">            &#123; <span class="string">"Hound Dog"</span>, <span class="string">"Heartbreak Hotel"</span> &#125;;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printFavorites</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Arrays.toString(favoriteSongs));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方法等同与使用public的构造方法,并且比上面的更加简洁,并且即使面对复杂的反射与序列化也能够保证单一的实例.虽然现实代码中应用的较少,但是这种使用枚举类型是创建单例的最佳方法.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testEnum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">SingletonEnum singletonEnum = SingletonEnum.INSTANCE;</span><br><span class="line">SingletonEnum singletonEnumCopy = SingletonEnum.INSTANCE;</span><br><span class="line">Assert.assertEquals(singletonEnum, singletonEnumCopy); <span class="comment">//通过</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用springboot构建jpa+springdata+rest应用的基本配置过程</title>
      <link href="/2019/05/29/2019-01-30-%E5%88%A9%E7%94%A8springboot%E6%9E%84%E5%BB%BASpringData+JAP+RestFul%E5%BA%94%E7%94%A8/"/>
      <url>/2019/05/29/2019-01-30-%E5%88%A9%E7%94%A8springboot%E6%9E%84%E5%BB%BASpringData+JAP+RestFul%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="利用springboot构建jpa-springdata-rest应用的基本配置过程"><a href="#利用springboot构建jpa-springdata-rest应用的基本配置过程" class="headerlink" title="利用springboot构建jpa+springdata+rest应用的基本配置过程"></a>利用springboot构建jpa+springdata+rest应用的基本配置过程</h1><h2 id="前述"><a href="#前述" class="headerlink" title="前述"></a>前述</h2><p>利用SpringBoot整合springData+JPA应用非常方便，所以本着学习的目的来构建一个基本的web应用，配置起来非常简单。下面来说说配置过程和踩过的坑。</p><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><h3 id="后端配置"><a href="#后端配置" class="headerlink" title="后端配置"></a>后端配置</h3><p>因为我使用的是IDEA的spring initalizer，勾选如下：</p><ul><li><p>Rest Repositories</p></li><li><p>Thymeleaf</p></li><li><p>JPA</p></li><li><p>H2</p></li><li><p>Lombok 需要ide下载插件使用</p></li></ul><p>以前在配置spring MVC接口时，往往会浪费很长时间配置rest地址，springdata解决了这个一遍又一遍麻烦的过程。</p><h4 id="首先配置实体类"><a href="#首先配置实体类" class="headerlink" title="首先配置实体类"></a>首先配置实体类</h4><p>任何基于Spring Data REST的应用程序的基石都是域对象。其中的@Id等都是JPA语法，具体用法可以看上一篇文章。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"username"</span>,nullable = <span class="keyword">true</span>,length = <span class="number">255</span>)</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"password"</span>,nullable = <span class="keyword">true</span>,length = <span class="number">255</span>)</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OneToOne</span>()</span><br><span class="line">    <span class="meta">@JoinColumn</span>(name = <span class="string">"person_id"</span>,nullable = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> Person person;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="定义一个存储库"><a href="#定义一个存储库" class="headerlink" title="定义一个存储库"></a>定义一个存储库</h4><p>Spring Data REST应用程序的另一个关键部分是创建相应的存储库定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">User</span>,<span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="配置service和controller"><a href="#配置service和controller" class="headerlink" title="配置service和controller"></a>配置service和controller</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserRepository userRepository;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        user.setPassword(...); <span class="comment">//定义代码</span></span><br><span class="line">        userRepository.save(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="配置数据库和application-properties"><a href="#配置数据库和application-properties" class="headerlink" title="配置数据库和application.properties"></a>配置数据库和application.properties</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 驱动配置信息</span><br><span class="line">spring.datasource.type=com.alibaba.druid.pool.DruidDataSource</span><br><span class="line">spring.datasource.url = jdbc:mysql://127.0.0.1:3306/jreact?useUnicode=true&amp;characterEncoding=utf-8</span><br><span class="line">spring.datasource.username = root</span><br><span class="line">spring.datasource.password = 123456</span><br><span class="line">spring.datasource.driverClassName = com.mysql.jdbc.Driver</span><br><span class="line">#非严格的html解析</span><br><span class="line">spring.thymeleaf.mode =LEGACYHTML5</span><br><span class="line"># 彩色输出</span><br><span class="line">spring.output.ansi.enabled=DETECT</span><br><span class="line"># 设置默认引擎</span><br><span class="line">spring.jpa.database-platform=org.hibernate.dialect.MySQL5InnoDBDialect</span><br><span class="line">#配置自动建表：updata:没有表新建，有表更新操作,控制台显示建表语句</span><br><span class="line">spring.jpa.hibernate.ddl-auto=update</span><br><span class="line">spring.jpa.show-sql=true</span><br><span class="line">#配置spring data rest的基地址</span><br><span class="line">spring.data.rest.base-path=/api</span><br></pre></td></tr></table></figure><h4 id="启动应用"><a href="#启动应用" class="headerlink" title="启动应用"></a>启动应用</h4><p>访问 <code>localhost:8080/api/users</code> 可以查看到如下信息,说明配置成功了。只是表中还没有数据，另外表已经由自动建好，以后如果更新，直接更新程序就好了。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"_embedded"</span> : &#123;</span><br><span class="line">    <span class="attr">"users"</span> : [ ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"_links"</span> : &#123;</span><br><span class="line">    <span class="attr">"self"</span> : &#123;</span><br><span class="line">      <span class="attr">"href"</span> : <span class="string">"http://localhost:8080/api/users&#123;?page,size,sort&#125;"</span>,</span><br><span class="line">      <span class="attr">"templated"</span> : <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"profile"</span> : &#123;</span><br><span class="line">      <span class="attr">"href"</span> : <span class="string">"http://localhost:8080/api/profile/users"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"page"</span> : &#123;</span><br><span class="line">    <span class="attr">"size"</span> : <span class="number">20</span>,</span><br><span class="line">    <span class="attr">"totalElements"</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"totalPages"</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"number"</span> : <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="前端配置"><a href="#前端配置" class="headerlink" title="前端配置"></a>前端配置</h3><p>使用react框架作为前端框架，首先下载create-react-app作为开发的脚手架。这里我选用的是meterial-UI的create-react-app，按照文档中的说明来下载并安装。</p><h4 id="配置proxy"><a href="#配置proxy" class="headerlink" title="配置proxy"></a>配置proxy</h4><p>在src目录下新建名称为setupProxy.js的文件，并在文件中写入如下内容：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> proxy = <span class="built_in">require</span>(<span class="string">'http-proxy-middleware'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">app</span>) </span>&#123;</span><br><span class="line">    app.use(proxy(<span class="string">'/api/'</span>, </span><br><span class="line">        &#123; <span class="attr">target</span>: <span class="string">'http://localhost:8080/'</span> &#125;</span><br><span class="line">    ));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中/api/为访问后端的基地址，target为访问后端的主机地址和端口号</p><h4 id="配置router"><a href="#配置router" class="headerlink" title="配置router"></a>配置router</h4><p>使用npm下载 <code>react-router-dom</code>后，在src目录下新建router文件夹，并创建baseRouter.js文件，引入刚下载的包，基本的文件内容如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; BrowserRouter <span class="keyword">as</span> Router, Route, Link,Switch &#125; <span class="keyword">from</span> <span class="string">"react-router-dom"</span>;</span><br><span class="line"><span class="keyword">import</span> Index <span class="keyword">from</span> <span class="string">"../pages/index"</span></span><br><span class="line"><span class="keyword">import</span> SignIn <span class="keyword">from</span> <span class="string">"../pages/login/signIn"</span></span><br><span class="line"><span class="keyword">import</span> Error404 <span class="keyword">from</span> <span class="string">"../pages/error/404"</span></span><br><span class="line"><span class="keyword">const</span> About = <span class="function"><span class="params">()</span> =&gt;</span> &lt;h2&gt;About&lt;/h2&gt;;</span><br><span class="line"><span class="keyword">const</span> Users = <span class="function"><span class="params">()</span> =&gt;</span> &lt;h2&gt;Users&lt;/h2&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> AppRouter = <span class="function"><span class="params">()</span> =&gt;</span> (</span><br><span class="line">  &lt;Router&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">    &lt;Switch&gt;</span><br><span class="line">        &lt;Route exact path=<span class="string">"/"</span> component=&#123;Index&#125; /&gt;</span><br><span class="line">        &lt;Route path=<span class="string">"/SignIn"</span> component=&#123;SignIn&#125; /&gt;</span><br><span class="line">        &lt;Route path=<span class="string">"/About"</span> component=&#123;About&#125; /&gt;</span><br><span class="line">        &#123;<span class="comment">/* when none of the above match, &lt;NoMatch&gt; will be rendered */</span>&#125;</span><br><span class="line">        &lt;Route component=&#123;Error404&#125; /&gt;</span><br><span class="line">    &lt;<span class="regexp">/Switch&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  &lt;<span class="regexp">/Router&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br><span class="line"><span class="regexp">export default AppRouter;</span></span><br></pre></td></tr></table></figure><p>并最后在index.js入口文件中写入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ReactDOM.render(&lt;AppRouter /&gt;, document.getElementById('root'));</span><br></pre></td></tr></table></figure><p>这样可以访问localhost:3000的时候可以访问到Index文件内容。</p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用idea对spring boot应用进行热部署</title>
      <link href="/2019/05/29/2019-02-17-%E4%BD%BF%E7%94%A8IDEA%E8%AE%BE%E7%BD%AEspringboot%E7%83%AD%E9%83%A8%E7%BD%B2/"/>
      <url>/2019/05/29/2019-02-17-%E4%BD%BF%E7%94%A8IDEA%E8%AE%BE%E7%BD%AEspringboot%E7%83%AD%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="使用idea对spring-boot应用进行热部署"><a href="#使用idea对spring-boot应用进行热部署" class="headerlink" title="使用idea对spring boot应用进行热部署"></a>使用idea对spring boot应用进行热部署</h1><h2 id="POM"><a href="#POM" class="headerlink" title="POM"></a>POM</h2><h3 id="在pom-xml中添加maven依赖"><a href="#在pom-xml中添加maven依赖" class="headerlink" title="在pom.xml中添加maven依赖"></a>在pom.xml中添加maven依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span> <span class="comment">&lt;!-- 这行必填 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="并且在后面的插件配置中配置dev"><a href="#并且在后面的插件配置中配置dev" class="headerlink" title="并且在后面的插件配置中配置dev"></a>并且在后面的插件配置中配置dev</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--如果没有该项配置，devtools不会起作用，即应用不会restart --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">fork</span>&gt;</span>true<span class="tag">&lt;/<span class="name">fork</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="IDEA"><a href="#IDEA" class="headerlink" title="IDEA"></a>IDEA</h2><h3 id="在IDEA中添加配置如下"><a href="#在IDEA中添加配置如下" class="headerlink" title="在IDEA中添加配置如下"></a>在IDEA中添加配置如下</h3><ol><li>打开 setting ,搜索 <code>compiler</code> 后，把 <code>Build Project automaticial</code> 选项勾上</li></ol><p><img src="https://raw.githubusercontent.com/NanYinIU/PicRoom/master/img/20190531171258.png" alt="compiler"></p><ol start="2"><li>使用  <code>ctrl+shift+A</code>  快捷键打开窗口，并搜索 <code>Registry...</code> 。勾选 <code>compiler.automake.allow.when.app.running</code> </li></ol><p><img src="https://raw.githubusercontent.com/NanYinIU/PicRoom/master/img/20190531171606.png" alt="running"></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之工厂模式</title>
      <link href="/2019/05/29/2019-05-29-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/05/29/2019-05-29-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="设计模式之工厂模式"><a href="#设计模式之工厂模式" class="headerlink" title="设计模式之工厂模式"></a>设计模式之工厂模式</h1><p>工厂模式分为<code>简单工厂模式</code>,<code>工厂方法模式</code>,<code>抽象工厂方法模式</code>三种,但是其中简单工厂方法其实不在23中设计模式之中,都属于创建型的设计模式.</p><h2 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h2><p>简单工厂方法其实不属于工厂模式的,他只是一种设计思路,是一种对接口的编程的习惯而已.简单工厂抽象出一个公共的接口,不同的对象实现这个公共的接口.定义一个工厂类,根据不同的条件来返回不同类型的实例.</p><h3 id="简单工厂结构"><a href="#简单工厂结构" class="headerlink" title="简单工厂结构"></a>简单工厂结构</h3><p>简单工厂的简单类图如下:</p><p><img src="https://i.loli.net/2019/05/28/5ced33e62381b24104.png" alt="简单工厂类图"></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>接口与实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Shoes</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getColor</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedShoes</span> <span class="keyword">implements</span> <span class="title">Shoes</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getColor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">" is red color shoes"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WhiteShoes</span> <span class="keyword">implements</span> <span class="title">Shoes</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getColor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"is white color shoes"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>工厂类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShoesFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Shoes <span class="title">getShoes</span><span class="params">(String color)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">"red"</span>.equals(color))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> RedShoes();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"white"</span>.equals(color))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> WhiteShoes();</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> OtherShoes();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h2><p>创建一个公共的工厂接口类,其中在接口类中定义工厂方法.但是通过实现类去实现结构,在调用的时候通过使用实现类来实例化特定的工厂.也就是说,工厂方法类需要通过子类去实例化建造对象.</p><h3 id="工厂方法结构"><a href="#工厂方法结构" class="headerlink" title="工厂方法结构"></a>工厂方法结构</h3><p>工厂方法的类图如下:</p><p><img src="https://i.loli.net/2019/05/28/5ced3f6d5a12f11044.png" alt="工厂方法模式"></p><p>和上面简单工厂类的例子类似,这里同样通过实现鞋子这个接口来创建红鞋子和白鞋子,简单工厂无论白鞋子、红鞋子还是其他颜色的鞋子都是同一个工厂来创建出来的,而 <strong>工厂方法是通过具体的白鞋子工厂和红鞋子工厂来分别生产对应的白鞋子和红鞋子</strong>.</p><p>所以如类图中所展示的一样,<code>RedShoesFactory</code>和<code>WhiteShoesFactroy</code>都实现来接口<code>ShoesFactory</code>,并且在getshoes方法里分别创建对应的<code>RedShoes</code>和<code>WhiteShoes</code>.</p><h3 id="工厂方法模式使用场景"><a href="#工厂方法模式使用场景" class="headerlink" title="工厂方法模式使用场景:"></a>工厂方法模式使用场景:</h3><ol><li>客户端不必要知道它需要创建对象的类,只需要创建完工厂后,从工厂中直接取对应的对象即可.</li><li>客户端可以使用指定实现子类来创建对应对象.</li></ol><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 鞋子接口与实现同简单工厂中的相同,所以这里省略....</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ShoesFactory</span> </span>&#123;</span><br><span class="line">    <span class="function">Shoes <span class="title">getShoes</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedShoesFactory</span> <span class="keyword">implements</span> <span class="title">ShoesFactory</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Shoes <span class="title">getShoes</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RedShoes();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WhiteShoesFactory</span> <span class="keyword">implements</span> <span class="title">ShoesFactory</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Shoes <span class="title">getShoes</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> WhiteShoes();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 客户端调用</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ShoesFactory redFactory = <span class="keyword">new</span> RedShoesFactory();</span><br><span class="line">        <span class="comment">// 只需要创建一个工厂,每次获取红鞋子,只需调用工厂的getShoes方法即可</span></span><br><span class="line">        Shoes redshoes = redFactory.getShoes();</span><br><span class="line">        redshoes.getColor();</span><br><span class="line">        ShoesFactory whiteFactory = <span class="keyword">new</span> WhiteShoesFactory();</span><br><span class="line">        Shoes whiteshoes = whiteFactory.getShoes();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h2><p>提供用于创建相关或从属的对象族(多个组件,并且组件之间是由必要联系的)的接口，而无需指定其具体类.是对工厂方法的再次延展.</p><h3 id="抽象方法结构"><a href="#抽象方法结构" class="headerlink" title="抽象方法结构"></a>抽象方法结构</h3><p><img src="https://i.loli.net/2019/05/28/5ced50f7bd0d134180.png" alt="抽象工厂类图"></p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 鞋底</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Sole</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 材料</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getMaterial</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 鞋带</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Shoelace</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 长度</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">length</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ShoesFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Sole <span class="title">createSole</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Shoelace <span class="title">createShoelace</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Nike工厂需要生产鞋带和鞋底</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NikeBrandSole</span> <span class="keyword">implements</span> <span class="title">Sole</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getMaterial</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 橡胶鞋底</span></span><br><span class="line">        System.out.println(<span class="string">"rubber"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NikeBrandShoelace</span> <span class="keyword">implements</span> <span class="title">Shoelace</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">length</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"1 m "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样的LiNing工厂需要生产鞋带和鞋底</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LiNingBrandSole</span> <span class="keyword">implements</span> <span class="title">Sole</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getMaterial</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"air cushion"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LiNingBrandShoelace</span> <span class="keyword">implements</span> <span class="title">Shoelace</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">length</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"1.5 m"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>LiNing和Nike工厂都需要生产各自的鞋带和鞋底</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NikeShoeFactory</span> <span class="keyword">implements</span> <span class="title">ShoesFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Sole <span class="title">createSole</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> NikeBrandSole();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Shoelace <span class="title">createShoelace</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> createShoelace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LiNingShoeFactory</span> <span class="keyword">implements</span> <span class="title">ShoesFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Sole <span class="title">createSole</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LiNingBrandSole();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Shoelace <span class="title">createShoelace</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LiNingBrandShoelace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端代码,创建工厂,生产各自组件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ShoesFactory shoesFactory = <span class="keyword">new</span> NikeShoeFactory();</span><br><span class="line">        Shoelace nikeLace = shoesFactory.createShoelace();</span><br><span class="line">        Sole nikeSole = shoesFactory.createSole();</span><br><span class="line">        nikeLace.length();</span><br><span class="line">        nikeSole.getMaterial();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之责任链模式</title>
      <link href="/2019/05/27/2019-05-27-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/05/27/2019-05-27-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="设计模式之责任链模式"><a href="#设计模式之责任链模式" class="headerlink" title="设计模式之责任链模式"></a>设计模式之责任链模式</h1><p>责任链模式是一种对象的行为模式.通过为多个对象处理客户端请求的方式,实现降低发送者与接收者之间的耦合性.对象链由一个对象对下一个对象的引用组成一条链,请求在这个链上传递,知道这个链上的某一个对象处理它.下面引用<a href="https://java-design-patterns.com/patterns/chain/" target="_blank" rel="noopener">https://java-design-patterns.com/patterns/chain/</a> 来说明</p><p><img src="https://i.loli.net/2019/05/27/5ceb9a338d29c93932.png" alt="..."></p><p>King只需要下达命令,具体谁来做并不关心,然而这个命令会通过commander, officer,soldier,这三类人只需要来执行各自负责的部分,完成后传递给下一个职责的人就行了.这就是责任链模式.下面根据例子类图来分析责任链中的结构关系.</p><h3 id="责任链的结构"><a href="#责任链的结构" class="headerlink" title="责任链的结构"></a>责任链的结构</h3><p><img src="https://i.loli.net/2019/05/27/5ceba5ca3ceaf56696.png" alt="类图"></p><ul><li>抽象处理者 RequestHandler,定义接口方法,使用handlerRequest方法规定实现类通过该方法来规范子类的实现.</li><li>具体处理者 OrcCommander和OrcOfficer,通过继承RequestHandler实现其中的handleRequest方法</li><li>请求Request,King通过方法将request放入处理者链中,处理者一次执行这个request.</li></ul><h3 id="责任链模式的使用环境"><a href="#责任链模式的使用环境" class="headerlink" title="责任链模式的使用环境"></a>责任链模式的使用环境</h3><blockquote><p>1、有多个对象可以处理同一个请求，具体哪个对象处理该请求由运行时刻自动确定。<br>2、在不明确指定接收者的情况下，向多个对象中的一个提交一个请求。<br>3、可动态指定一组对象处理请求</p></blockquote><p>示例代码:<a href="https://java-design-patterns.com/patterns/chain/" target="_blank" rel="noopener">java-design-patterns</a></p><ul><li>RequestHandler</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestHandler</span> </span>&#123;</span><br><span class="line">      <span class="keyword">private</span> RequestHandler next;</span><br><span class="line">  </span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="title">RequestHandler</span><span class="params">(RequestHandler next)</span> </span>&#123;</span><br><span class="line">          <span class="keyword">this</span>.next = next;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleRequest</span><span class="params">(Request req)</span> </span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (next != <span class="keyword">null</span>) &#123;</span><br><span class="line">              next.handleRequest(req);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">printHandling</span><span class="params">(Request req)</span> </span>&#123;</span><br><span class="line">          System.out.println(<span class="string">"1."</span>+req.getRequestType() + <span class="string">" 2."</span>+req.getRequestDescription());</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">toString</span><span class="params">()</span></span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>具体处理者</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrcCommander</span> <span class="keyword">extends</span> <span class="title">RequestHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OrcCommander</span><span class="params">(RequestHandler handler)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(handler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleRequest</span><span class="params">(Request req)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (req.getRequestType().equals(RequestType.DEFEND_CASTLE)) &#123;</span><br><span class="line">            printHandling(req);</span><br><span class="line">            req.markHandled();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">super</span>.handleRequest(req);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Orc commander"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrcOfficer</span> <span class="keyword">extends</span> <span class="title">RequestHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OrcOfficer</span><span class="params">(RequestHandler next)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(next);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleRequest</span><span class="params">(Request req)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (req.getRequestType().equals(RequestType.TORTURE_PRISONER)) &#123;</span><br><span class="line">            printHandling(req);</span><br><span class="line">            req.markHandled();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">super</span>.handleRequest(req);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Orc officer"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Request请求</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Request</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RequestType requestType;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String requestDescription;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> handled;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Request</span><span class="params">(<span class="keyword">final</span> RequestType requestType, <span class="keyword">final</span> String requestDescription)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.requestType = Objects.requireNonNull(requestType);</span><br><span class="line">        <span class="keyword">this</span>.requestDescription = Objects.requireNonNull(requestDescription);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getRequestDescription</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> requestDescription; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RequestType <span class="title">getRequestType</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> requestType; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">markHandled</span><span class="params">()</span> </span>&#123; <span class="keyword">this</span>.handled = <span class="keyword">true</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isHandled</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>.handled; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> getRequestDescription(); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>客户端发起命令者</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">King</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> RequestHandler chain;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">buildChain</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        chain = <span class="keyword">new</span> OrcCommander(<span class="keyword">new</span> OrcOfficer(<span class="keyword">null</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">makeRequest</span><span class="params">(Request req)</span> </span>&#123;</span><br><span class="line">        chain.handleRequest(req);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        King king = <span class="keyword">new</span> King();</span><br><span class="line">        king.buildChain();</span><br><span class="line">        king.makeRequest(<span class="keyword">new</span> Request(RequestType.DEFEND_CASTLE, <span class="string">"defend castle"</span>));</span><br><span class="line">        king.makeRequest(<span class="keyword">new</span> Request(RequestType.TORTURE_PRISONER, <span class="string">"torture prisoner"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之策略模式</title>
      <link href="/2019/05/27/2019-05-28-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/05/27/2019-05-28-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="java设计模式之策略模式"><a href="#java设计模式之策略模式" class="headerlink" title="java设计模式之策略模式"></a>java设计模式之策略模式</h1><p>策略设计模式是行为设计模式的一种.当使用多种算法解决一个特殊的任务的时候,客户端决定使用时的特定实现.</p><h2 id="哪种情况会使用策略模式"><a href="#哪种情况会使用策略模式" class="headerlink" title="哪种情况会使用策略模式"></a>哪种情况会使用策略模式</h2><p>以下情况可以使用策略模式: </p><ol><li>许多相关类只有行为上有所不同,策略模式可以通过相同的行为方法来配置类.</li><li>当需要使用到算法的变种的时候,当定义不同的行为参数的时候,如果使用类的层次结构实现的时候,可以使用策略模式(当使用方法层次结构的时候就是多态)</li><li>客户端不用清楚算法的细节实现,只需关注接口.避免暴露具体的类的实现、特殊算法的数据结构.</li><li>一个类定义了多种不同的行为,并且使用杂乱的条件进行判断具体使用哪一个条件,这时候就可以使用策略模式来代替,对不同的策略形成不同的类.可以清晰的表达出类的作用与实现的行为方式.</li></ol><h2 id="策略模式结构"><a href="#策略模式结构" class="headerlink" title="策略模式结构"></a>策略模式结构</h2><p><img src="https://i.loli.net/2019/05/27/5cebf32d8658d41858.png" alt="策略模式类图"></p><p>如上图定义一个总的Traffic接口,里面有一个go()方法.使用car和walk分别来实现接口,并且实现接口中的go方法.</p><p>Context类是环境类,持有一个TrafficStrategy的引用,隐藏具体的策略接口的实现,让客户端专注于方法的调用.</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TrafficStrategy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">go</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WalkStrategy</span> <span class="keyword">implements</span> <span class="title">TrafficStrategy</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">go</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"i am walking"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CarStrategy</span> <span class="keyword">implements</span> <span class="title">TrafficStrategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">go</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"i am driving"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>context类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Context</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> TrafficStrategy trafficStrategy;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Context</span><span class="params">(TrafficStrategy trafficStrategy)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.trafficStrategy = trafficStrategy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TrafficStrategy <span class="title">getTrafficStrategy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> trafficStrategy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTrafficStrategy</span><span class="params">(TrafficStrategy trafficStrategy)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.trafficStrategy = trafficStrategy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doStrategy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        trafficStrategy.go();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>App客户端类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Context context = <span class="keyword">new</span> Context(<span class="keyword">new</span> CarStrategy());</span><br><span class="line">        context.doStrategy();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring重点知识学习</title>
      <link href="/2019/05/05/2019-05-05-Spring_Framework%E9%87%8D%E7%82%B9%E5%AD%A6%E4%B9%A0/"/>
      <url>/2019/05/05/2019-05-05-Spring_Framework%E9%87%8D%E7%82%B9%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Framework"><a href="#Spring-Framework" class="headerlink" title="Spring Framework"></a>Spring Framework</h1><p>使用spring可以轻易的创建一个企业级应用,它使用Java语言所有的企业级环境中的所有东西,spring是开源的,拥有庞大而活跃的社区来提供持续的支持.</p><h2 id="Spring-Core"><a href="#Spring-Core" class="headerlink" title="Spring Core"></a>Spring Core</h2><p>spring分为多个模块,其中core为其中的一个,里面包含spring的核心技术点</p><h3 id="IOC容器-控制反转"><a href="#IOC容器-控制反转" class="headerlink" title="IOC容器(控制反转)"></a>IOC容器(控制反转)</h3><p>IOC也被成为依赖注入,这是由一个对象定义他所依赖的关系的过程.当创建这个bean的时候也同时创建这些依赖供其使用.这样的整个过程就是反转控制的过程,比如说建房子,以前需要砖,瓦,水泥才能建造房子,如果不实用ioc时,就是自己去造砖,造瓦,然后使用.<br>现在使用ioc容器,只需要把砖,瓦,水泥写到清单上,ioc容器自动把这些准备好供使用,省去来自己制造的过程.</p><p><code>org.springframework.beans</code> 和 <code>org.springframework.context</code> 是spring实现IOC容器的基础.<code>BeanFactory</code>接口是能够管理任何对象的高级的配置接口,<code>ApplicationContext</code>是BeanFactory的子接口.因为:</p><ul><li>更容易和Spring 的AOP特性相结合</li><li>消息资源处理,用于国际化问题</li><li>事件发布</li><li>用于特定的上下文比如web应用程序的<code>WebApplicationContext</code></li></ul><p>简单来说就是<code>BeanFactory</code>提供了基本的功能,而<code>ApplicationContext</code>提供了更多的企业定制化的功能.</p><p><code>ApplicationContext</code>代表了IOC容器,提供了初始化、配置、组装beans.通过配置元数据来获取有关初始化..等的指令.这里所指的配置元数据可以通过配置文件,注解或者java代码来实现.通过配置元数据来体现对象和其依赖.</p><p>下图为官网提供的spring工作的简化图:</p><p><img src="https://docs.spring.io/spring/docs/current/spring-framework-reference/images/container-magic.png" alt="IOC容器"></p><h3 id="SpringBean的生命周期"><a href="#SpringBean的生命周期" class="headerlink" title="SpringBean的生命周期"></a>SpringBean的生命周期</h3><p><img src="https://raw.githubusercontent.com/NanYinIU/PicRoom/master/img/20190531170713.png" alt="生命周期"><br>生命周期大概包含这几个阶段:</p><ol><li>实例化Bean对象,这时还未进行依赖注入,最后将bean加入到beanwapper中.</li><li>设置对象属性.Spring根据BeanDefinition中的信息进行依赖注入.并且通过BeanWrapper提供的设置属性的接口完成依赖注入。</li><li>注入Aware接口,检测是否是想相关Aware接口,并装配相关接口的方法.</li><li>BeanPostProcessor 此时bean已经成功被构造,通过实现这个接口来自定义前置和后置的处理规则.</li><li>调用initialzingBean和int-methods,这时对象成功被初始化</li><li>最后调用disposableBean的afterpropertiesSet方法和destroy-methods来实现指定对象销毁.</li></ol><h3 id="Spring-AOP"><a href="#Spring-AOP" class="headerlink" title="Spring AOP"></a>Spring AOP</h3><p>AOP的意思是面向切面编程,在理解面向切面前,不得不说面向对象.什么是面向对象,面向对象编程就是将事务对象化,依据对象进行层级化,面向对象通过封装继承多态的方式实现了对象层次结构,但是实际应用时可能会遇到需要横向的进行业务处理,典型的就如日志,因为在实际代码编写时,不能每次在写方法前后都加入相同的代码,这样即浪费时间,又导致代码冗余.所以面向切面编程必不可少.</p><p>AOP将多个相同的业务代码整合,形成一个通用的<code>“切面”</code>,通过切面可以分割出<code>“核心关注点”</code>和<code>“横切关注点”</code>,核心关注点就是实际的核心业务关注的代码逻辑部分,横切关注点就是公共的代码的实现.</p><p>其中AOP中有几个比较关键的概念:</p><ol><li>横切关注点:对哪些方法进行拦截,拦截后如何处理.这些关注点叫做横切关注点</li><li>切面:切面就是对横切关注点的抽象,就如同类对事物的抽象类似</li><li>连接点(joinpoint):被拦截到的点,可以通过连接点获取被拦截的参数等信息</li><li>切入点:连接点进行拦截的定义</li><li>织入:横切的过程叫做织入</li></ol><h4 id="简单的代码实现-注解"><a href="#简单的代码实现-注解" class="headerlink" title="简单的代码实现(注解)"></a>简单的代码实现(注解)</h4><p>下面代码使用注解的方式实现的Spring AOP,配置文件同理,需要配置切面(主要是切点和通知方法)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="comment">// 标志为AOP @Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceLog</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(ServiceLog.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    HttpSession httpSession;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 前置通知 切入点前执行</span></span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"execution(* com.nanyin.jreact.service.serviceImpl..*.*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handelServiceMethodBefore</span><span class="params">(JoinPoint joinpoint)</span></span>&#123; <span class="comment">//JoinPoint 为连接点,通过连接点可获取参数等</span></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            String username = (String) httpSession.getAttribute(<span class="string">"user"</span>);</span><br><span class="line">            BaseUtil.setUser(Optional.ofNullable(username).orElse(<span class="string">"空 "</span>));</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 后置通知 切入点后执行</span></span><br><span class="line">    <span class="meta">@After</span>(<span class="string">"execution(* com.nanyin.jreact.service.serviceImpl..*.*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handelServiceMethodAfter</span><span class="params">(JoinPoint joinpoint)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            String username = (String) httpSession.getAttribute(<span class="string">"user"</span>);</span><br><span class="line">            BaseUtil.setUser(Optional.ofNullable(username).orElse(<span class="string">"空 "</span>));</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="JDK动态代理和CGLIB代理"><a href="#JDK动态代理和CGLIB代理" class="headerlink" title="JDK动态代理和CGLIB代理"></a>JDK动态代理和CGLIB代理</h4><p>两者都可以实现AOP代理功能,但是jdk代理需要代理类和委托类都实现系统的接口,但是实际应用的时候这种情况非常少,这时候会自动使用CGLIB实现动态代理</p><h3 id="Spring事务管理"><a href="#Spring事务管理" class="headerlink" title="Spring事务管理"></a>Spring事务管理</h3><p>事务包含四个基本特性,也就是常说的ACID,分别为原子性,一致性,隔离性,持久性</p><h4 id="事务的接口"><a href="#事务的接口" class="headerlink" title="事务的接口"></a>事务的接口</h4><ol><li>PlatformTransactionManager： （平台）事务管理器</li></ol><blockquote><p>spring 不直接管理事务,而是实现不同的事务管理器,将事务交给框架处理,如为ibaits 和 hibernate 有不同的实现.</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 事务管理器 xml 配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>TransactionDefinition： 事务定义信息(事务隔离级别、传播行为、超时、只读、回滚规则)</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TransactionDefinition</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 返回事务的传播行为</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getPropagationBehavior</span><span class="params">()</span></span>; </span><br><span class="line">    <span class="comment">// 返回事务的隔离级别，事务管理器根据它来控制另外一个事务可以看到本事务内的哪些数据</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getIsolationLevel</span><span class="params">()</span></span>; </span><br><span class="line">    <span class="comment">//返回事务的名字</span></span><br><span class="line">    <span class="function">String <span class="title">getName</span><span class="params">()</span>；</span></span><br><span class="line"><span class="function">    <span class="comment">// 返回事务必须在多少秒内完成</span></span></span><br><span class="line"><span class="function">    <span class="keyword">int</span> <span class="title">getTimeout</span><span class="params">()</span></span>;  </span><br><span class="line">    <span class="comment">// 返回是否优化为只读事务。</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isReadOnly</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>TransactionStatus： 用来记录事务运行状态</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TransactionStatus</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isNewTransaction</span><span class="params">()</span></span>; <span class="comment">// 是否是新的事物</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">hasSavepoint</span><span class="params">()</span></span>; <span class="comment">// 是否有恢复点</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setRollbackOnly</span><span class="params">()</span></span>;  <span class="comment">// 设置为只回滚</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isRollbackOnly</span><span class="params">()</span></span>; <span class="comment">// 是否为只回滚</span></span><br><span class="line">    <span class="keyword">boolean</span> isCompleted; <span class="comment">// 是否已完成</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h3><h4 id="构造注解"><a href="#构造注解" class="headerlink" title="构造注解"></a>构造注解</h4><p>注解使用<code>@interface</code>来标识为一个注解,具体使用可以参考如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @Target原注解的意义是表明作用域，比如type就是表示要标注到类接口上</span></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="comment">// 表示作用域</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="comment">// 表明其他注解能够继承该注解</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="comment">// javadoc会包含</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> TableDescription &#123;</span><br><span class="line">    <span class="function">String <span class="title">description</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中该注解的作用就是1.标注在类接口上2.作用在运行时,能够通过反射得到接口中的内容3.能够让其他注解继承该注解4.能够生成javaddoc文档</p><p>下面来重点关注第一个和第二个元注解:</p><ol><li>@Target是这个注解的作用域，ElementType.METHOD是这个注解的作用域的列表，METHOD是方法声明，除此之外，还有：CONSTRUCTOR（构造方法声明）,FIELD（字段声明）,LOCAL VARIABLE（局部变量声明）,METHOD（方法声明）,PACKAGE（包声明）,PARAMETER（参数声明）,TYPE（类接口）</li><li>@Retention是它的生命周期，前面不是说注解按照运行机制有一个分类嘛，RUNTIME就是在运行时存在，可以通过反射读取。除此之外，还有: SOURCE（只在源码显示，编译时丢弃）,CLASS（编译时记录到class中，运行时忽略）,RUNTIME（运行时存在，可以通过反射读取）</li></ol><h4 id="如何使用自定义注解"><a href="#如何使用自定义注解" class="headerlink" title="如何使用自定义注解"></a>如何使用自定义注解</h4><ul><li><p>添加注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"person"</span>)</span><br><span class="line"><span class="comment">// 这里使用到了上面的自定义注解TableDescription</span></span><br><span class="line"><span class="meta">@TableDescription</span>(description = <span class="string">"this is person table"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> id;</span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"name"</span>,length = <span class="number">128</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"age"</span>,length = <span class="number">3</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">short</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>获得注解内容</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAnn</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="comment">// 反射获取类</span></span><br><span class="line">        Class clazz = Class.forName(<span class="string">"com.nanyin.jreact.entry.Person"</span>);</span><br><span class="line">        Boolean exist = clazz.isAnnotationPresent(TableDescription.class);</span><br><span class="line">        <span class="keyword">if</span>(exist)&#123;</span><br><span class="line">           <span class="comment">//如果注解在类中存在</span></span><br><span class="line">           TableDescription tableDescription = (TableDescription) clazz.getAnnotation(TableDescription.class);</span><br><span class="line">           <span class="comment">// 获得注解内容</span></span><br><span class="line">            System.out.println(tableDescription.description());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">catch</span> (ClassNotFoundException c)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面只是简单的掩饰注解的用法,但实际上业务会比这难上许多.</p><h3 id="springMVC-工作流程"><a href="#springMVC-工作流程" class="headerlink" title="springMVC 工作流程"></a>springMVC 工作流程</h3><p>先上一张图:来自<a href="https://www.cnblogs.com/xiaoxi/p/6164383.html" target="_blank" rel="noopener">https://www.cnblogs.com/xiaoxi/p/6164383.html</a><br><img src="https://i.loli.net/2019/05/12/5cd7cf13c933c.jpg" alt="SpringMvc工作原理"></p><p>由图中可以看到SpringMvc中最重要的起到中枢的是<code>DispatcherServlet</code>(前端控制器).</p><ol><li>在DispatcherServlet接受到客户端请求后,使用 <code>handlerMapping</code> 进行映射处理.在生成处理器映射器之后, 返回一个handler,如果有拦截器的化还生成拦截器.交给 <code>DispatcherServlet</code> 进行下一步处理.</li><li>第二步交给 <code>handlerAdatper</code> (处理器适器) <code>HandlerAdapter</code> 经过适配调用具体的处理器( <code>Controller</code> ，也叫后端控制器)。Controller执行完成返回ModelAndView。</li><li>第三步,DispatcherServlet将最终的结果交给 <code>viewResolver</code> 试图解析器进行视图解析</li><li>DispatcherServlet 根据返回的view进行视图渲染,最终返回给客户端用户.</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hibernate重点知识总结</title>
      <link href="/2019/04/29/2019-04-29-Hibernate%E9%87%8D%E7%82%B9%E6%80%BB%E7%BB%93/"/>
      <url>/2019/04/29/2019-04-29-Hibernate%E9%87%8D%E7%82%B9%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="Hibernate重点知识总结"><a href="#Hibernate重点知识总结" class="headerlink" title="Hibernate重点知识总结"></a>Hibernate重点知识总结</h1><h2 id="Hibernate的三种状态"><a href="#Hibernate的三种状态" class="headerlink" title="Hibernate的三种状态"></a>Hibernate的三种状态</h2><ol><li>瞬时态(transient):当实体还未和session关联,如new Person(“1”);</li><li>持久态(persistent): 通过get或者load得到的实体类,这时的状态都是持久态.</li><li>游离态(detached): 当通过get或者load得到持久态的对象后,执行删除delete时,这时已经脱离session.因delete而变为游离态可有save或者saveOrUpate转化为持久态.或则当session关闭后,session中的对象就变为游离态.</li></ol><h2 id="hibernate中update和saveOrUpdate的区别"><a href="#hibernate中update和saveOrUpdate的区别" class="headerlink" title="hibernate中update和saveOrUpdate的区别"></a>hibernate中update和saveOrUpdate的区别</h2><p>update只能是对象有主键时起作用,而saveOrUpdate则在对象没有主键时执行插入操作.对应的update操作只能操作游离态的对象,而不能对瞬时态的对象操作.而saveOrUpdate则两种状态的对象都可以操作.</p><h2 id="hibernate中的update和merge方法的区别"><a href="#hibernate中的update和merge方法的区别" class="headerlink" title="hibernate中的update和merge方法的区别"></a>hibernate中的update和merge方法的区别</h2><p>当执行update方法的时候,一个session中具有与当前update相同的持久化标识(identifier)的实例,使用upate操作后会报错,而使用merge后把处理自由态的po对象A的属性copy到session当中处于持久态的po的属性中，执行完成后原来是持久状态还是持久态，而我们提供的A还是自由态。</p><h2 id="hibernate中get和load的区别"><a href="#hibernate中get和load的区别" class="headerlink" title="hibernate中get和load的区别"></a>hibernate中get和load的区别</h2><p>一句话，hibernate对于load方法认为该数据在数据库中一定存在，可以放心的使用代理来延迟加载，如果在使用过程中发现了问题，只能抛异常；而对于get方法，hibernate一定要获取到真实的数据，否则返回null。</p><h2 id="hibernate中list和iterator的区别"><a href="#hibernate中list和iterator的区别" class="headerlink" title="hibernate中list和iterator的区别"></a>hibernate中list和iterator的区别</h2><p>(1)、List方式是1次性把所有的数据全部取到内存中，构造一个超大的结果集，主要的时间开销是这一步，这一步的时间开销要远远超过JDBC和 Iterator方式下构造结果集的时间开销，并且内存开销也很惊人；而对结果集的遍历操作，速度则是非常的惊人（经过测试，30万记录的内 存遍历不到100ms，由于这一步不受JDBC影响，因此结果可信）。因此，List方式适合于对结果集进行反复多次操作的情况，例如分页显示，往后往前 遍历，跳到第一行，跳到最后一行等等。</p><p>(2)、Iterator方式只取记录id到内存中，并没有把所有数据取到内存中，因此构造结果集的时间开销很小，比JDBC和List方式都要少，并且内 存开销也小很多。而对结果集的遍历的操作的时候，Iterator仍然要访问数据库，所有主要的时间开销都花在这里。因此，Iterator方式适合于只 对结果集进行1次遍历操作的情况，并且Iterator方式特别适合于从超大结果集中取少量数据，这种情况Iterator性能非常好。</p><p>总结: list把数据一次加载到内存,再进行遍历操作就非常快了.而Iterator方式只会把id放到内存中,但是再次遍历时仍然要访问数据库查询数据,适合一次遍历的情况.</p><h2 id="hibernate中的inverse属性"><a href="#hibernate中的inverse属性" class="headerlink" title="hibernate中的inverse属性"></a>hibernate中的inverse属性</h2><p>设置inverse=“false”为主控方,由主控方类维护对象间的关系.比如再many-to-one的关系中,再one的一方设置<code>inverse=&quot;true&quot;</code>这样能够提高效率,比如班级里一个老师多个学生,老师记住多个学生比较困难,而学生记住一个老师很容易.同理one-to-many.再多对多的关系中,再任意一方设置<code>inverse=&#39;true&#39;</code>即可.</p><h2 id="hibernate中的cascade属性"><a href="#hibernate中的cascade属性" class="headerlink" title="hibernate中的cascade属性"></a>hibernate中的cascade属性</h2><p>级联操作：指当主控方执行某项操作时，是否要对被关联方也执行相同的操作。</p><h2 id="什么情况下懒加载能够有效的提高效率"><a href="#什么情况下懒加载能够有效的提高效率" class="headerlink" title="什么情况下懒加载能够有效的提高效率"></a>什么情况下懒加载能够有效的提高效率</h2><p>懒加载是当用到对象的时候再从数据库加载数据,持久化来使用.从这句话中就可以理解为,因为及联的关系,一个表的数据可能会带出多张表的数据,这时候使用懒加载就能够实现效率的提高,没必要一次性把所有数据都加载出来,而是用时加载.hibernate默认是使用懒加载的,当然可以使用lazy=false来禁用懒加载.</p><h2 id="什么是hibernate的二级缓存"><a href="#什么是hibernate的二级缓存" class="headerlink" title="什么是hibernate的二级缓存"></a>什么是hibernate的二级缓存</h2><p>缓存就是将以前的数据存放到内存中,当查询数据的时候,现在内存中查询,是否有这个对象,如果没有再从数据库中查询对象,这样大大的提高了查询的效率.</p><p>Hibenate的session就是一级缓存,当查询数据的时候都会先从session中查询对象是否存在,不存在才从数据库查询.但是session是非线程安全的,多线程共享的情况下会出现问题.并且session是表示的是一段会话,表示的是一次事务,基于以上两点,所以在一次事务完成后,session就应立即关闭.所以这里说的一级缓存意义不大.</p><p>Hibernate的二级缓存其实就是使用外部缓存,如Echache或者redis等,使用配置文件配置缓存策略等.</p><h2 id="Hibernate中使用hibernateTemplate的好处有哪些"><a href="#Hibernate中使用hibernateTemplate的好处有哪些" class="headerlink" title="Hibernate中使用hibernateTemplate的好处有哪些?"></a>Hibernate中使用hibernateTemplate的好处有哪些?</h2><ol><li>HibernateTemplate简化了与Hibernate Session的交互</li><li>常见的函数简化为单个方法调用。</li><li>异常会自动捕获并转换为运行时异常</li><li>session 自动关闭</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的各种IO操作</title>
      <link href="/2019/04/28/2019-04-28-Java_IO%E6%93%8D%E4%BD%9C/"/>
      <url>/2019/04/28/2019-04-28-Java_IO%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="Java中的IO操作"><a href="#Java中的IO操作" class="headerlink" title="Java中的IO操作"></a>Java中的IO操作</h1><p>Java总的来说有三类IO,效率不高,操作简单的BIO(blocking IO),非阻塞的NIO(New IO),和异步非阻塞IO,也就是升级版的NIO(Asynchronous I/O).</p><p>在学习这三类IO前,需要了解什么是阻塞.什么是异步.两个的含义有什么区别.</p><blockquote><p>同步和异步关注的是消息通信机制 (synchronous communication/ asynchronous communication)所谓同步，就是在发出一个<em>调用</em>时，在没有得到结果之前，该 <em>调用</em> 就不返回。但是一旦调用返回，就得到返回值了。换句话说，就是由<em>调用者</em>主动等待这个<em>调用</em>的结果。而异步则是相反，<em>调用</em>在发出之后，这个调用就直接返回了，所以没有返回结果。换句话说，当一个异步过程调用发出后，调用者不会立刻得到结果。而是在<em>调用</em>发出后，<em>被调用者</em>通过状态、通知来通知调用者，或通过回调函数处理这个调用。</p></blockquote><blockquote><p>阻塞和非阻塞关注的是程序在等待调用结果（消息，返回值）时的状态.阻塞调用是指调用结果返回之前，当前线程会被挂起。调用线程只有在得到结果之后才会返回。非阻塞调用指在不能立刻得到结果之前，该调用不会阻塞当前线程。</p></blockquote><h2 id="BIO"><a href="#BIO" class="headerlink" title="BIO"></a>BIO</h2><p>BIO过程就如同名字一样,是一个阻塞的IO,服务端通常为每一个客户端都建立一个独立的线程来通过调用accept()来监听客户端消息.如果想处理多个客户端请求则服务端需要建立等同数量的线程来处理这些消息,这就是普遍的一请求一应答的模型.处理完成后返回应答给客户端后销毁线程,因为线程是一个昂贵的资源,这样重复的新建线程,销毁线程,很浪费处理器资源,所以使用BIO同时能够尽可能的少创建线程,就可以用到线程池的方式实现,来达到服务端创建线程数远远小于客户端数的目的,但这种方法只是伪异步IO.</p><p>在处理链接数量少的情况下,BIO的效率还不错,并且主要逻辑模型清晰明了,代码简单.但是在上万的链接的情况下,BIO处理起来就非常吃紧了.</p><h2 id="NIO"><a href="#NIO" class="headerlink" title="NIO"></a>NIO</h2><p>NIO是一种同步非阻塞的I/O模型，在Java 1.4 中引入了NIO框架，对应 java.nio 包，提供了 Channel , Selector，Buffer等抽象。</p><blockquote><p>NIO中的N可以理解为Non-blocking，不单纯是New。它支持面向缓冲的，基于通道的I/O操作方法。 NIO提供了与传统BIO模型中的 Socket 和 ServerSocket 相对应的 SocketChannel 和 ServerSocketChannel 两种不同的套接字通道实现,两种通道都支持阻塞和非阻塞两种模式。阻塞模式使用就像传统中的支持一样，比较简单，但是性能和可靠性都不好；非阻塞模式正好与之相反。对于低负载、低并发的应用程序，可以使用同步阻塞I/O来提升开发速率和更好的维护性；对于高负载、高并发的（网络）应用，应使用 NIO 的非阻塞模式来开发。</p></blockquote><h3 id="NIO特性和NIO与传统IO的区别"><a href="#NIO特性和NIO与传统IO的区别" class="headerlink" title="NIO特性和NIO与传统IO的区别"></a>NIO特性和NIO与传统IO的区别</h3><ul><li>传统IO(BIO)是一种阻塞IO模型,而NIO是非阻塞的IO模型,区别为当线程读取数据的时候,非阻塞IO可以不用等,而阻塞IO需要一直等待IO完成后才能继续.</li><li>IO面向流,而NIO面向缓冲区.</li><li>通道(channel) NIO通过通道进行数据读写.通道是双向的,而传统的IO是单向的.通道链接的都是Buffer,所以通道可以异步的读写.</li><li>选择器(Selectors) NIO拥有选择器,而IO没有.选择器的作用就是用来使用单个线程来处理多个通道(NIO面向buffer,通道只与buffer交互).<br><img src="https://camo.githubusercontent.com/3a68153ce17be90275df07a47409afaea91aff83/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d322f536c6563746f722e706e67" alt="Selector图解"><h2 id="AIO"><a href="#AIO" class="headerlink" title="AIO"></a>AIO</h2></li></ul><p>AIO 也就是 NIO 2。在 Java 7 中引入了 NIO 的改进版 NIO 2,它是异步非阻塞的IO模型。异步 IO 是基于事件和回调机制实现的，也就是应用操作之后会直接返回，不会堵塞在那里，当后台处理完成，操作系统会通知相应的线程进行后续的操作。</p><p>AIO 是异步IO的缩写，虽然 NIO 在网络操作中，提供了非阻塞的方法，但是 NIO 的 IO 行为还是同步的。对于 NIO 来说，我们的业务线程是在 IO 操作准备好时，得到通知，接着就由这个线程自行进行 IO 操作，IO操作本身是同步的。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM基本知识整理</title>
      <link href="/2019/04/24/2019-04-24-JVM%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/"/>
      <url>/2019/04/24/2019-04-24-JVM%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="java内存空间"><a href="#java内存空间" class="headerlink" title="java内存空间"></a>java内存空间</h1><p><img src="https://i.loli.net/2019/05/12/5cd7c7e477235.jpg" alt="内存空间"></p><p>其中如图中所展示的，按功能分了大致分为两类，一类为线程共享的JAVA堆和元数据区和直接内存，另一类是线程私有的虚拟机栈，方法区栈和程序计数器。 </p><p>下面针对这几种区域来详细将这几个区域分别的作用是什么。 </p><h2 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h2><p>程序计数器是一块较小的内存空间，可以看作是当前线程执行程序的字节码的的行号的指示器。字节码解释器工作时通过改变程序计数器的值来改变将要选取的下一个指令。并且由于每个线程执行的运行的指令不同，每个线程有个字的程序计数器，并且互不干扰。所以程序计数器被称作是线程私有的。这种线程私有的区域有着很明显的特征就是生命周期和当前线程的周期保持一致。并且需要注意的是程序计数器是内存中唯一一个不会出现<code>outOfMemory</code>的区域。 </p><p> 程序计数器有两个作用： </p><p> A: 字节码解释器通过读取程序计数器的值来选取下一条将要执行的语句。 </p><p>B:在多线程切换的情况下，记录当前线程执行的位置，方便于切换回时进程运行的位置。 </p><h2 id="虚拟机栈"><a href="#虚拟机栈" class="headerlink" title="虚拟机栈"></a>虚拟机栈</h2><p>Java内存可以粗糙的分为堆内存和栈内存，所谓的堆就是图中的java堆（<code>Heap</code>），而所谓的栈就是指的虚拟机栈（<code>VM Stack</code>）的局部变量表。虚拟机栈是由一个个栈针构成的，可以想为一个方法为一个栈针，随着方法的被调用完成（完成的条件有两个，一个是return，另外一个是发生异常），对应着方法的栈针出栈。栈针中都包含：局部变量表，操作数栈，动态链接和方法出口。<strong>局部变量表主要存放了编译器可知的各种数据类型</strong>（boolean、byte、char、short、int、float、long、double）、<strong>对象引用</strong>（reference类型，它不同于对象本身，可能是一个指向对象起始地址的引用指针，也可能是指向一个代表对象的句柄或其他与此对象相关的位置） </p><p><img src="https://i.loli.net/2019/05/12/5cd7cb63399f3.jpg" alt="虚拟机栈结构"></p><h2 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h2><p>本地方法栈同样是线程私有的,区别是java虚拟机栈是用于java字节码的,而本地方法栈是用来执行Native方法的.结构都和虚拟机栈的结构相同. </p><h2 id="Java堆"><a href="#Java堆" class="headerlink" title="Java堆"></a>Java堆</h2><p>Java堆是整个虚拟机中最大的一块区域,是线程共享的区域,再虚拟机启动时创建,该块存在的唯一目的就是存放类的事例和数组. </p><h2 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h2><p>和Java堆一样都是线程共享的区域,主要用于存放已经被虚拟机加载的类信息,常量,静态变量和已经被编译后的代码等数据.方法区和永久代的关系很像Java中接口和类的关系，类实现了接口，而永久代就是HotSpot虚拟机对虚拟机规范中方法区的一种实现方式。 也就是说，永久代是HotSpot的概念，方法区是Java虚拟机规范中的定义，是一种规范，而永久代是一种实现，一个是标准一个是实现，其他的虚拟机实现并没有永久带这一说法。 </p><h2 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h2><p>原来的运行时常量池是方法区的一部分,而在1.7之后,讲运行时常量池放到堆(Heap)中开辟了一个区域专门用来放运行时常量池.运行时常量池中遥遥包括两部分,一部分是实际存在的字面量,所谓字面量包括[1.文本字符串,2.被声明为final的常量,基本数据类型…..],另一部分是符号引用,包含[类和结构的名称,字段的名称,方法的名称]</p><p><img src="https://i.loli.net/2019/05/12/5cd7cbf57ba27.jpg" alt="运行时常量池"></p><h2 id="元数据区"><a href="#元数据区" class="headerlink" title="元数据区"></a>元数据区</h2><p>替代了永久代,使用的是直接内存,什么是直接内存,它有能够干什么? 首先直接内存区域不是虚拟机运行时数据区的一部分,也不是虚拟机定义的一部分,但是经常会使用到.</p><blockquote><p>JDK1.4 中新加入的 <strong>NIO(New Input/Output) 类</strong>，引入了一种基于<strong>通道（Channel）</strong> 与<strong>缓存区（Buffer）</strong> 的 I/O 方式，它可以直接使用 Native 函数库直接分配堆外内存，然后通过一个存储在 Java 堆中的 DirectByteBuffer 对象作为这块内存的引用进行操作。这样就能在一些场景中显著提高性能，因为<strong>避免了在 Java 堆和 Native 堆之间来回复制数据</strong>。</p></blockquote><p>本机直接内存的分配不会收到 Java 堆的限制，但是，既然是内存就会受到本机总内存大小以及处理器寻址空间的限制。</p><h1 id="对象的创建过程"><a href="#对象的创建过程" class="headerlink" title="对象的创建过程"></a>对象的创建过程</h1><p><img src="https://i.loli.net/2019/05/12/5cd7cbf57ba27.jpg" alt="对象的创建过程"></p><p>对象的创建过程分为上图中的5步 </p><ol><li>类加载检查:当虚拟机遇到new的时候,会检查这个类是否存在,是否被加载,解释和初始化过,如果没有则进行类的初始化过程. </li><li>分配内存:再进行类加载检查后,会在堆内存中为新的对象分配内存,分配的规则有两种,一种是指针碰撞,另一种是空闲列表,针对不同的垃圾回收器会使用不同的方法.第一种方法指针碰撞的原理大致为它会将分配过的内存和未分配的内存间建立一个指针,当分配内存的时候,向为分配内存的地方移动新的对象的大小的位置,适用于比较规整的内存空间.第二种方法是维护一个分配内存的列表,每次分配内存都想列表中添加相关记录,表明这些对象在哪. </li><li>初始化零值:保证在分配完内存后,为分配的内存区域初始化为零值 </li><li>设置对象头:虚拟机对对象的各种设置信息,保存在对象头中. </li><li>执行init方法:在执行init方法前,从虚拟机的角度来看其实对象已经生成了,但是在程序员的角度对象并没有生成,只有在init方法执行过后,对象才算生成. </li></ol><h1 id="对象的定位方式"><a href="#对象的定位方式" class="headerlink" title="对象的定位方式"></a>对象的定位方式</h1><p>Java虚拟机定位对象的方式主要有两种,一是使用句柄,二是直接使用指针.</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>悲观锁和乐观锁</title>
      <link href="/2019/04/23/2019-04-08-%E6%82%B2%E8%A7%82%E9%94%81%E5%92%8C%E4%B9%90%E8%A7%82%E9%94%81/"/>
      <url>/2019/04/23/2019-04-08-%E6%82%B2%E8%A7%82%E9%94%81%E5%92%8C%E4%B9%90%E8%A7%82%E9%94%81/</url>
      
        <content type="html"><![CDATA[<h1 id="悲观锁和乐观锁"><a href="#悲观锁和乐观锁" class="headerlink" title="悲观锁和乐观锁"></a>悲观锁和乐观锁</h1><h2 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h2><p>悲观锁是总会先去想最坏的情况，每次线程拿数据的时候都会认为他会进行修改，适用于的场景是多写少读，这时使用悲观锁效率会高。程序中典型的悲观锁时synchronized和ReentrantLock </p><h2 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h2><p>乐观锁是总会先去想好的情况，每次线程拿数据只会看一眼，并不会做修改操作，这时没有必要加锁，程序中的atom原子类使用cas+volatile+native方法实现乐观锁。 </p><p>两种锁的机制，有各自的好处，不能说谁好谁坏，各有优点： </p><p>悲观锁适用于多写少读的情况，而乐观锁适用于多读少写的情况，如果在多写的情况下使用乐观锁，会经常产生冲突，反而会降低性能。 </p><h3 id="乐观锁常用的两种方式"><a href="#乐观锁常用的两种方式" class="headerlink" title="乐观锁常用的两种方式"></a>乐观锁常用的两种方式</h3><h4 id="版本号的控制"><a href="#版本号的控制" class="headerlink" title="版本号的控制"></a>版本号的控制</h4><p>每次读取数据的时候都会连同版本号一同读取，在当更新数据的时候，会比较读取到的版本号和数据库中的版本号是否一致，如果一致则更新，如果不一致则继续读取，更新数据。 </p><h4 id="CAS操作（compareAndSwap）"><a href="#CAS操作（compareAndSwap）" class="headerlink" title="CAS操作（compareAndSwap）"></a>CAS操作（compareAndSwap）</h4><p>举个例子,在atomInteger类中涉及了CAS</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">boolean</span> <span class="title">compareAndSwapInt</span><span class="params">(Object o, <span class="keyword">long</span> offset,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                  <span class="keyword">int</span> expected,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                  <span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"><span class="comment">//这里是native方法 offset是偏移量先暂且不提，o是需要比较的值，expected是预期值，x是新值</span></span></span><br><span class="line"><span class="function"><span class="comment">// 如果使用程序写出来就是大概这样：</span></span></span><br><span class="line"><span class="function">    <span class="keyword">int</span> value</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">fakeCAS</span><span class="params">(<span class="keyword">int</span> expect,<span class="keyword">int</span> newValue)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(value == expect)&#123;</span><br><span class="line">            value = newValue;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>比较替换(compareAndSwap)</code>是一个原子操作，也是一个自旋操作，等待一个周期再次尝试。</p><h4 id="CAS操作的缺点"><a href="#CAS操作的缺点" class="headerlink" title="CAS操作的缺点"></a>CAS操作的缺点</h4><ol><li>ABA问题，何谓ABA：当两个线程读取到当前值为A，其中一个线程把值改为B后再把B改为A，这是另外一个线程使用cas操作读取到的值仍然是A，CAS会认为这个值从来没有变过，这就是ABA问题。也就是说遗失掉中间的过程，在链式的操作总更能体会到ABA问题的严重性。 </li><li>自旋时间过长，消耗CPU资源。 </li><li>只能对单个共享变量的原子性操作 </li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Thread </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程池和AQS知识整理</title>
      <link href="/2019/04/23/2019-04-23-%E7%BA%BF%E7%A8%8B%E6%B1%A0%E4%BB%A3%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
      <url>/2019/04/23/2019-04-23-%E7%BA%BF%E7%A8%8B%E6%B1%A0%E4%BB%A3%E7%A0%81%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="线程池和AQS代码解析"><a href="#线程池和AQS代码解析" class="headerlink" title="线程池和AQS代码解析"></a>线程池和AQS代码解析</h1><p>使用线程池是为了将线程得以复用,线程创建后在线程池中被循环利用,防止了线程得多次创建和销毁.下面就通过代码来看线程池的工作原理.</p><p>线程池配置比较繁琐,所以java提供了一个线程池的工具类<code>Executors</code> 来使用静态的方法来创建拥有特定属性的线程池.下面先总体的看一下都有哪些创建线程池的方法,和各自的实现.</p><ol><li><code>newFixedThreadPool</code> 创建固定大小的线程池。每次提交一个任务就创建一个线程，直到线程达到线程池的最大大小。线程池的大小一旦达到最大值就会保持不变，如果某个线程因为执行异常而结束，那么线程池会补充一个新线程。</li><li><code>newCachedThreadPool</code> 创建一个可缓存的线程池,此时线程池对线程得多少没有限制,如果多了就定时回收,如果少了,就会只能添加</li><li><code>newScheduledThreadPool</code> 创建一个无限大小的线程池,此线程池可执行定时的任务</li><li><code>newSingleThreadExecutor</code> 线程池中有且只有一个线程执行任务,如果因异常结束,则会生成一个线程来替换原来的线程.此种连接池会按照任务的提交顺序依次执行.因为池中只有一个线程在工作.</li></ol><p>在<code>Excutors</code>中有上面四种方式来创建线程池,那么这几种线程池具体是如何工作的呢?通过源码来一探究竟.</p><h2 id="ThreadPoolExecutor"><a href="#ThreadPoolExecutor" class="headerlink" title="ThreadPoolExecutor"></a>ThreadPoolExecutor</h2><p>除了<code>newScheduledThreadPool</code>连接池没有使用<code>ThreadPoolExcutor</code>来实现,其他三种都使用到了<code>ThreadPoolExcutor</code>来进行连接池的实现和定制.下图是<code>ThreadPoolExcutor</code>的结构关系.它是ExecutorService的直接实现类.</p><p><img src="https://i.loli.net/2019/04/24/5cc08171ca014.jpg" alt="5cc08171ca014"></p><p>ThreadPoolExcutor提供了三种构造函数,不同的构造函数含有不同的参数.下面先了解一下各参数的含义</p><table><thead><tr><th align="center">参数名称</th><th>参数类型</th><th>含义</th></tr></thead><tbody><tr><td align="center">corePoolSize</td><td>Int</td><td>池中的线程数量,即使他们是空闲的,除非设置allowCoreThreadTimeOut参数</td></tr><tr><td align="center">maximumPoolSize</td><td>int</td><td>池中允许的最大的线程数量</td></tr><tr><td align="center">keepAliveTime</td><td>long</td><td>如果池中的线程超过核心数,如果超过这个时间线程仍是空闲的则结束这个线程</td></tr><tr><td align="center">unit</td><td>TimeUnit</td><td>keepAilveTime的时间的单位</td></tr><tr><td align="center">workQueue</td><td>BlockingQueue<runnable></runnable></td><td>一个阻塞队列,用来存储未进行的任务.未执行的任务会一直在队列里,知道使用Excute方法执行.</td></tr><tr><td align="center">threadFactory</td><td>ThreadFactory</td><td>线程工厂,用于生产线程</td></tr><tr><td align="center">handle</td><td>RejectedExecutionHandler</td><td>执行阻塞的处理策略,造成阻塞的原因可能是达到了线程边界或者队列容量</td></tr></tbody></table><p>其中线程池使用ctl变量控制状态信息,ctl是一个AtomInteger,其中高28位表示线程得数量,也就是workerCount,低位的4位表示线程池的状态.</p><table><thead><tr><th>名称</th><th>承担的任务</th></tr></thead><tbody><tr><td>RUNNING</td><td>接受新的任务,并且处理队列中的任务</td></tr><tr><td>SHUTDOWN</td><td>不接受新的任务,但是会处理队列中的任务</td></tr><tr><td>STOP</td><td>不接受新任务,不处理排队的人物,并且终止正在进行的任务</td></tr><tr><td>TIDYING</td><td>所有任务已经终止,worker为空,通过terminate方法来转换为TIDYING</td></tr><tr><td>TERMINATED</td><td>当terminate方法执行过后的状态</td></tr></tbody></table><p><img src="https://wx1.sinaimg.cn/large/006tNc79ly1g2cznnpfkqj311e0lcn0e.jpg" alt="Xnip2019-04-23_23-21-36"></p><h3 id="方法源码解析"><a href="#方法源码解析" class="headerlink" title="方法源码解析"></a>方法源码解析</h3><p>提交的方法submit实在ExcutorService的实现类<code>AbstarctExecutorService</code>中所定义的,可以看出submit是excute方法的外壳,其实核心还是执行excute方法,但是会返回<code>Future</code>结果.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Future&lt;?&gt; submit(Runnable task) &#123;</span><br><span class="line">        <span class="keyword">if</span> (task == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        RunnableFuture&lt;Void&gt; ftask = newTaskFor(task, <span class="keyword">null</span>);</span><br><span class="line">        execute(ftask);</span><br><span class="line">        <span class="keyword">return</span> ftask;<span class="comment">//返回Future结果</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>因为执行的核心方法是excute,所以进到ThreadPoolExecutor类中看excute方法是如何执行的.其实最通俗的解释excute的过程就是,将新的worker加入到worker的队列中,并执行当前的command线程.执行过程可以参考官方注释:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable command)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (command == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 执行总共分为三步</span></span><br><span class="line"><span class="comment">         * 1. 如果当前线程池中的工作线程数小于核心线程数,则添加一个worker来执行当前这个任务</span></span><br><span class="line"><span class="comment">         * 2. 为了防止进入方法后线程池关闭或者线程挂掉需要重新获取ctl,并且进行判断,是否进行</span></span><br><span class="line"><span class="comment">         * 回退或者是空池后添加一个空线程.</span></span><br><span class="line"><span class="comment">         * 3.如果不能将任务放到队列中,则执行rollback,回退任务</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">int</span> c = ctl.get();<span class="comment">//获得ctl变量,从而获得workercount和状态信息</span></span><br><span class="line">        <span class="keyword">if</span> (workerCountOf(c) &lt; corePoolSize) &#123; <span class="comment">//如果线程数小于核心线程数</span></span><br><span class="line">            <span class="keyword">if</span> (addWorker(command, <span class="keyword">true</span>)) <span class="comment">//添加一个新的worker来执行任务</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            c = ctl.get();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (isRunning(c) &amp;&amp; workQueue.offer(command)) &#123; </span><br><span class="line">          <span class="comment">//如果当前池的状态为运行状态并且接受了这个任务,也就是说任务成功进入了执行队列</span></span><br><span class="line">            <span class="keyword">int</span> recheck = ctl.get();</span><br><span class="line">          <span class="comment">//重新获取ctl,因为有可能在进入这个if语句的时候一个线程挂了,或者整个池被关闭了</span></span><br><span class="line">            <span class="keyword">if</span> (! isRunning(recheck) &amp;&amp; remove(command)) <span class="comment">//如果线程池的状态为非运行状态</span></span><br><span class="line">              <span class="comment">// 从队列中移除任务,并且reject任务 相当于第一步操作的rollback</span></span><br><span class="line">                reject(command);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (workerCountOf(recheck) == <span class="number">0</span>) <span class="comment">//如果池是空的</span></span><br><span class="line">                addWorker(<span class="keyword">null</span>, <span class="keyword">false</span>);<span class="comment">//新建一个线程</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (!addWorker(command, <span class="keyword">false</span>))</span><br><span class="line">          <span class="comment">//如果放到队列中失败,则将任务rollback</span></span><br><span class="line">            reject(command);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>线程池中拥有的状态有以下几种:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RUNNING    = -<span class="number">1</span> &lt;&lt; COUNT_BITS;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SHUTDOWN   =  <span class="number">0</span> &lt;&lt; COUNT_BITS;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STOP       =  <span class="number">1</span> &lt;&lt; COUNT_BITS;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TIDYING    =  <span class="number">2</span> &lt;&lt; COUNT_BITS;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TERMINATED =  <span class="number">3</span> &lt;&lt; COUNT_BITS;</span><br></pre></td></tr></table></figure><p>在excute方法中需要用到addWorker在当前状态和给定的边界条件下(核心线程数<code>core</code>或者最大线程数<code>maximum</code>)能否添加一个worker线程执行任务.如果当前线程池为空或者有资格关闭线程池.这是调用该方法会返回false.如果线程池工厂<code>the thread factory</code>不能再产出更多的线程也会返回false.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">addWorker</span><span class="params">(Runnable firstTask, <span class="keyword">boolean</span> core)</span> </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * firstTask 理解为初始化时给的第一个任务,可以绕过排队的过程,直接使用新的线程执行</span></span><br><span class="line"><span class="comment">   * core 如果是true则使用corePoolSize作为边界,否则使用maximumPoolSize作为边界</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">        retry:<span class="comment">//flag标记</span></span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="keyword">int</span> c = ctl.get(); <span class="comment">//获取ctl变量</span></span><br><span class="line">            <span class="keyword">int</span> rs = runStateOf(c);<span class="comment">// 获取状态参数</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// Check if queue empty only if necessary. 检查队列是否为空</span></span><br><span class="line">            <span class="keyword">if</span> (rs &gt;= SHUTDOWN &amp;&amp;</span><br><span class="line">                ! (rs == SHUTDOWN &amp;&amp;</span><br><span class="line">                   firstTask == <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                   ! workQueue.isEmpty()))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">                <span class="keyword">int</span> wc = workerCountOf(c);</span><br><span class="line">                <span class="keyword">if</span> (wc &gt;= CAPACITY ||</span><br><span class="line">                    wc &gt;= (core ? corePoolSize : maximumPoolSize))</span><br><span class="line">                  <span class="comment">//如果大于最大的CAPACITY或者wc大于核心线程数</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">if</span> (compareAndIncrementWorkerCount(c))</span><br><span class="line">                  <span class="comment">//使用CAS添加worker后,操作成功后跳出循环</span></span><br><span class="line">                    <span class="keyword">break</span> retry;</span><br><span class="line">                c = ctl.get();  <span class="comment">// Re-read ctl</span></span><br><span class="line">                <span class="keyword">if</span> (runStateOf(c) != rs)</span><br><span class="line">                    <span class="keyword">continue</span> retry;</span><br><span class="line">                <span class="comment">// else CAS failed due to workerCount change; retry inner loop</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> workerStarted = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">boolean</span> workerAdded = <span class="keyword">false</span>;</span><br><span class="line">        Worker w = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            w = <span class="keyword">new</span> Worker(firstTask);<span class="comment">//以后单说这个worker</span></span><br><span class="line">            <span class="keyword">final</span> Thread t = w.thread;</span><br><span class="line">            <span class="keyword">if</span> (t != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">this</span>.mainLock;</span><br><span class="line">                mainLock.lock();</span><br><span class="line">              <span class="comment">// 使用ReentrantLock上锁保持原子性</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// Recheck while holding lock.</span></span><br><span class="line">                    <span class="comment">// Back out on ThreadFactory failure or if</span></span><br><span class="line">                    <span class="comment">// shut down before lock acquired.</span></span><br><span class="line">                    <span class="keyword">int</span> rs = runStateOf(ctl.get());</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (rs &lt; SHUTDOWN ||</span><br><span class="line">                        (rs == SHUTDOWN &amp;&amp; firstTask == <span class="keyword">null</span>)) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (t.isAlive()) <span class="comment">// precheck that t is startable</span></span><br><span class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalThreadStateException();</span><br><span class="line">                        workers.add(w);</span><br><span class="line">                        <span class="keyword">int</span> s = workers.size();</span><br><span class="line">                        <span class="keyword">if</span> (s &gt; largestPoolSize)<span class="comment">// 当前worker的数量大于largestPoolSize时</span></span><br><span class="line">                            largestPoolSize = s;</span><br><span class="line">                        workerAdded = <span class="keyword">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    mainLock.unlock();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (workerAdded) &#123;</span><br><span class="line">                    t.start();<span class="comment">//线程开始执行</span></span><br><span class="line">                    workerStarted = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (! workerStarted) <span class="comment">//如果到这里线程还是没有开始,rollback添加worker的过程</span></span><br><span class="line">                addWorkerFailed(w);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> workerStarted;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>其中涉及到了woker线程创建的rollback过程,调用了<code>addWorkerFailed</code>方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addWorkerFailed</span><span class="params">(Worker w)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">this</span>.mainLock;</span><br><span class="line">       mainLock.lock();</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="keyword">if</span> (w != <span class="keyword">null</span>)</span><br><span class="line">               workers.remove(w);<span class="comment">//如果存在在队列中移除w</span></span><br><span class="line">           decrementWorkerCount();<span class="comment">//减少workerCount变量的值</span></span><br><span class="line">           tryTerminate();<span class="comment">//重新检查终止过程,以防止因为这个worker的存在导致终止失败</span></span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           mainLock.unlock();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>在当运行的线程数到达核心线程数后,就会将任务插入到workQueue里面,让池中的工作线程完成任务,上面的源码中使用addWoker方法来执行当前指定的任务,而未涉及到加入到workQueue中的任务是如何执行的,下面通过查看Woker中的run方法来查看池中的线程如何获取任务来执行的过程.</p><p>因为Worker实现AQS「AbstractQueuedSynchronizer」,并继承来Runnable,所以Worker其实本质上还是一个线程.在执行start后,同样会执行run方法.</p><p>Worker中的全局变量:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Thread this worker is running in.  Null if factory fails. 执行当前工作线程*/</span></span><br><span class="line"><span class="keyword">final</span> Thread thread;</span><br><span class="line"><span class="comment">/** 初始化的任务,可能是空*/</span></span><br><span class="line">Runnable firstTask;</span><br><span class="line"><span class="comment">/** 每个线程的任务计数器(统计完成的任务数) */</span></span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">long</span> completedTasks;</span><br></pre></td></tr></table></figure><p>Worker的构造器,默认是需要传入Runnable的任务的.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Worker(Runnable firstTask) &#123;</span><br><span class="line">    setState(-<span class="number">1</span>); <span class="comment">// inhibit interrupts until runWorker</span></span><br><span class="line">    <span class="keyword">this</span>.firstTask = firstTask;</span><br><span class="line">    <span class="keyword">this</span>.thread = getThreadFactory().newThread(<span class="keyword">this</span>);<span class="comment">//保存从ThreadFactory中获取到的Thread</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>worker中的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查看是否是独占的</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isHeldExclusively</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> getState() != <span class="number">0</span>; <span class="comment">//AQS中的state保存这个状态</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//尝试获得锁</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> unused)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, <span class="number">1</span>)) &#123; <span class="comment">//通过改变state来实现 如果state&gt;0说明获取到了锁</span></span><br><span class="line">        setExclusiveOwnerThread(Thread.currentThread()); <span class="comment">//设置独占访问的线程</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//尝试释放锁</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">tryRelease</span><span class="params">(<span class="keyword">int</span> unused)</span> </span>&#123;</span><br><span class="line">    setExclusiveOwnerThread(<span class="keyword">null</span>);<span class="comment">//清空独占访问的线程</span></span><br><span class="line">    setState(<span class="number">0</span>);<span class="comment">//状态置为「释放锁」</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span>        </span>&#123; acquire(<span class="number">1</span>); &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">()</span>  </span>&#123; <span class="keyword">return</span> tryAcquire(<span class="number">1</span>); &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span>      </span>&#123; release(<span class="number">1</span>); &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isLocked</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> isHeldExclusively(); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">interruptIfStarted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Thread t;</span><br><span class="line">    <span class="keyword">if</span> (getState() &gt;= <span class="number">0</span> &amp;&amp; (t = thread) != <span class="keyword">null</span> &amp;&amp; !t.isInterrupted()) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            t.interrupt();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SecurityException ignore) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在addWorke中调用run方法执行任务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Delegates main run loop to outer runWorker  */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    runWorker(<span class="keyword">this</span>); <span class="comment">//委托runWorker执行</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">runWorker</span><span class="params">(Worker w)</span> </span>&#123;</span><br><span class="line">    Thread wt = Thread.currentThread();<span class="comment">//获得当前线程</span></span><br><span class="line">    Runnable task = w.firstTask;<span class="comment">//获得任务</span></span><br><span class="line">    w.firstTask = <span class="keyword">null</span>;</span><br><span class="line">    w.unlock(); <span class="comment">// allow interrupts</span></span><br><span class="line">    <span class="keyword">boolean</span> completedAbruptly = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (task != <span class="keyword">null</span> || (task = getTask()) != <span class="keyword">null</span>) &#123; <span class="comment">//如果存在任务</span></span><br><span class="line">            w.lock(); <span class="comment">//将当前工作线程上锁</span></span><br><span class="line">            <span class="comment">// If pool is stopping, ensure thread is interrupted;</span></span><br><span class="line">            <span class="comment">// if not, ensure thread is not interrupted.  This</span></span><br><span class="line">            <span class="comment">// requires a recheck in second case to deal with</span></span><br><span class="line">            <span class="comment">// shutdownNow race while clearing interrupt</span></span><br><span class="line">            <span class="comment">//如果线程池正在被停止,需要确保线程已经被中断</span></span><br><span class="line">            <span class="comment">//如果线程池没有被停止,需要确保线程不能被中断</span></span><br><span class="line">            <span class="keyword">if</span> ((runStateAtLeast(ctl.get(), STOP) ||</span><br><span class="line">                 (Thread.interrupted() &amp;&amp;</span><br><span class="line">                  runStateAtLeast(ctl.get(), STOP))) &amp;&amp;</span><br><span class="line">                !wt.isInterrupted())</span><br><span class="line">                wt.interrupt();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                beforeExecute(wt, task);</span><br><span class="line">                Throwable thrown = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    task.run(); <span class="comment">//执行任务</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (RuntimeException x) &#123;</span><br><span class="line">                    thrown = x; <span class="keyword">throw</span> x;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Error x) &#123;</span><br><span class="line">                    thrown = x; <span class="keyword">throw</span> x;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable x) &#123;</span><br><span class="line">                    thrown = x; <span class="keyword">throw</span> <span class="keyword">new</span> Error(x);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    afterExecute(task, thrown);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                task = <span class="keyword">null</span>; <span class="comment">//清空任务</span></span><br><span class="line">                w.completedTasks++; <span class="comment">//当前线程处理任务数加一</span></span><br><span class="line">                w.unlock();<span class="comment">//解锁</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        completedAbruptly = <span class="keyword">false</span>;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        processWorkerExit(w, completedAbruptly);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AQS「AbstractQueuedSynchronizer」-队列同步器"><a href="#AQS「AbstractQueuedSynchronizer」-队列同步器" class="headerlink" title="AQS「AbstractQueuedSynchronizer」 队列同步器"></a>AQS「AbstractQueuedSynchronizer」 队列同步器</h2><p>AQS的使用方式是继承,之类通过继承AQS,实现抽象方法来实现管理同步器. 其中上文中的ThreadPoolExcutor中的Worker就是继承AQS来实现的.</p><p>AQS使用一个全局变量state来表示当前的锁的状态,如果state&gt;0,说明已经获取到了锁,如果state=0,说明释放了锁.</p><p>AQS依靠CLH队列完成对状态的管理.当前线程如果获取同步状态失败时，AQS则会将当前线程已经等待状态等信息构造成一个节点（Node）并将其加入到CLH同步队列，同时会阻塞当前线程，当同步状态释放时，会把首节点唤醒（公平锁），使其再次尝试获取同步状态。</p><p>其中CLH的一个节点包括了:当前的状态,前驱,后继,当前节点保存的线程.</p><p>具体的AQS过程可以参考<a href="https://juejin.im/entry/5ae02a7c6fb9a07ac76e7b70" target="_blank" rel="noopener">QAS原理</a></p><h2 id="补充的countDownLatch和cyclicBarrier的区别"><a href="#补充的countDownLatch和cyclicBarrier的区别" class="headerlink" title="补充的countDownLatch和cyclicBarrier的区别"></a>补充的countDownLatch和cyclicBarrier的区别</h2><p><img src="https://camo.githubusercontent.com/5c19d9e66ffaf3d7193b01948279db9b9b3b98d3/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f4a6176612532302545372541382538422545352542412538462545352539312539382545352542462538352545352541342538372545462542432539412545352542392542362545352538462539312545372539462541352545382541462538362545372542332542422545372542422539462545362538302542422545372542422539332f4151533333332e706e67" alt="区别"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Thread </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中常用关键字总结</title>
      <link href="/2019/04/22/2019-04-12-Java%E4%B8%AD%E5%B8%B8%E7%94%A8%E5%85%B3%E9%94%AE%E5%AD%97/"/>
      <url>/2019/04/22/2019-04-12-Java%E4%B8%AD%E5%B8%B8%E7%94%A8%E5%85%B3%E9%94%AE%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<h1 id="Java中关键字总结"><a href="#Java中关键字总结" class="headerlink" title="Java中关键字总结"></a>Java中关键字总结</h1><h2 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a><code>final</code>关键字</h2><p><code>final</code>主要用于三个地方：变量、方法、类</p><ul><li>变量： 如果<code>final</code>修饰变量，如果变量是基本数据类型，则表示如果该基本数据类型一旦初始化则不能再改变，如果修饰引用变量，则表示初始化之后不能执行另外一个变量。</li><li>方法： 如果<code>final</code>作用域方法上，说明该方法是不能改变的，也就是说继承累无法改变方法。所有<code>private</code>方法默认是<code>final</code>的</li><li>类：如果<code>final</code>作用与类上，说明该类是无法被继承的。并且他的类中的方法默认都是<code>private</code>的。</li></ul><h2 id="static关键字"><a href="#static关键字" class="headerlink" title="static关键字"></a><code>static</code>关键字</h2><p><code>static</code>关键字在以下四种情况下用到。</p><ul><li>用来修饰成员变量或方法，通过<code>static</code>修饰的变量或者方法被称作为静态变量和静态方法。可以通过类名.变量或方法()调用，静态变量和方法属于整个类对象，而不属于实例变量。静态变量存放在<code>java</code>内存中的方法区。</li><li>用来修饰静态代码块。使用<code>static</code>修饰的静态代码块，会先于代码块和构造方法。并且只会执行一次。</li><li>用来修饰静态内部类。使用<code>static</code>修饰静态内部类，有两个特性，其一是他的创建不依赖于外部类，其二是他只能调用外部类的静态变量或方法。</li><li>用来静态导入包，这个不太常用。使用 <code>import static</code>导入静态资源。</li></ul><h2 id="this-关键字"><a href="#this-关键字" class="headerlink" title="this 关键字"></a><code>this</code> 关键字</h2><p><code>this</code>用于执行当前对象，也就是说不能在<code>static</code>方法或者代码块中使用<code>this</code>来指向对象。</p><h2 id="super-关键字"><a href="#super-关键字" class="headerlink" title="super 关键字"></a><code>super</code> 关键字</h2><p><code>this</code>关键字指向本身对象，而<code>super</code>关键字则指向父类对象。</p><h1 id="java中二进制运算操作"><a href="#java中二进制运算操作" class="headerlink" title="java中二进制运算操作"></a>java中二进制运算操作</h1><h2 id="与运算-amp"><a href="#与运算-amp" class="headerlink" title="与运算 &amp;"></a>与运算 &amp;</h2><p>转换为二进制，都为一时则为一</p><h2 id="或运算"><a href="#或运算" class="headerlink" title="或运算 |"></a>或运算 |</h2><p>转换为二进制后，只要有一个为一，则结果为一</p><h2 id="异或操作"><a href="#异或操作" class="headerlink" title="异或操作 ^"></a>异或操作 ^</h2><p>转换为二进制后，不同则为一</p><h2 id="取反操作-～"><a href="#取反操作-～" class="headerlink" title="取反操作 ～"></a>取反操作 ～</h2><p>按位取反的操作（由正数变为负数）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">    public void testBitOperating()&#123;</span><br><span class="line">        System.out.println(5&amp;6);</span><br><span class="line">        // 0101</span><br><span class="line">        // 0110</span><br><span class="line">        // -----</span><br><span class="line">        // 0100 结果是4</span><br><span class="line">        System.out.println(5 | 6);</span><br><span class="line">        // 0101</span><br><span class="line">        // 0110</span><br><span class="line">        // -----</span><br><span class="line">        // 0111 结果是7</span><br><span class="line">        System.out.println(5 ^ 6);</span><br><span class="line">        // 0101</span><br><span class="line">        // 0110</span><br><span class="line">        // -----</span><br><span class="line">        // 0011 结果是 3</span><br><span class="line">        System.out.println(~5);</span><br><span class="line">        // 0.... 0101</span><br><span class="line">        //-----------</span><br><span class="line">        // 0.... 0101 补码 = 正数的补码和源码相同 负数的补码等于源码取反后+1</span><br><span class="line">        // 1.... 0110 源码 =  取反 后加一 -6</span><br><span class="line">        System.out.println(~-6);</span><br><span class="line">        // 1.....0110</span><br><span class="line">        // 1.....1010  补码：负数的补码为反码+1</span><br><span class="line">        // 0.....0101  源</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何理解和使用synchronized关键字</title>
      <link href="/2019/04/22/2019-04-22-Synchronized%E5%85%B3%E9%94%AE%E5%AD%97%E6%80%BB%E7%BB%93/"/>
      <url>/2019/04/22/2019-04-22-Synchronized%E5%85%B3%E9%94%AE%E5%AD%97%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h1><h2 id="为什么要用synchronized"><a href="#为什么要用synchronized" class="headerlink" title="为什么要用synchronized"></a>为什么要用<code>synchronized</code></h2><p>多线程有三大特性：原子性，有序性（重排序问题？）和可见性；其中原子性在程序上的体现就是使用synchronized,为了保证可见性是使用需要使用volatile.<br>使用synchronized来保证程序的原子性<br>首先在讨论三大特性前需要知道java的内存模型和happen-before原则。<a href="https://www.jianshu.com/p/cf57726e77f2" target="_blank" rel="noopener">内存模型与happen-before原则</a></p><p>牵扯出的问题：</p><ol><li><p>什么是线程安全：我的理解就是如果保证多线程执行的结果和预期结果相同，就是线程安全的，否则就是线程不安全的</p></li><li><p>什么是JAVA内存模型？ </p><p> 在java内容中程序计数器，虚拟机栈，本地方法栈都是线程私有的区域，而方法区和java堆是线程共享的区域</p><p> 因为cpu的处理速度与内存的读写速度之间有着着巨大的差距，所以在cpu和内存间添加一层缓存，每次现在cpu的缓存中，这个缓存区域的读写速度往往比内存的读写速度快很多，这样就能够缓解cpu和主存之间的速度差距。</p><p> 所以每次cpu读写数据前，会先读取共享变量到本地内容，cpu再从本地内存中读取数据。这就是java的内存模型</p><p> 这样也会产生数据不一致的情况，这是就要需要保证共享变量的数据可见性，即线程1修改了变量，则线程2再修改变量前已经得知变量已经被修改了。</p></li></ol><h2 id="应用synchronized"><a href="#应用synchronized" class="headerlink" title="应用synchronized"></a>应用<code>synchronized</code></h2><p>为了保证程序的原子性：我们在程序中使用synchronized关键字对程序进行锁定，表示在锁住的区域内只能有一个线程访问。</p><h3 id="如何使用synchronized"><a href="#如何使用synchronized" class="headerlink" title="如何使用synchronized"></a>如何使用<code>synchronized</code></h3><ul><li>使用synchronized修饰静态方法，针对类变量进行加锁。进入方法的前提是获得类的锁。</li><li>修饰实例方法，针对实例对象，在进入方法前要获得实例变量的锁。</li><li>修饰代码块。指定加锁的对象，在进入代码块钱要先获得指定对象的锁。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SynchronizedTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//synchronized的三种用法</span></span><br><span class="line">    <span class="comment">//1.修饰实例方法 需要拥有实例对象的锁</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hello"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2.修饰静态方法 需要拥有类对象的锁</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">staticHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">       System.out.println(<span class="string">"staticHello"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">blockHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//3.修饰代码块 需要拥有【this】的锁</span></span><br><span class="line">        <span class="keyword">synchronized</span>(<span class="keyword">this</span>)&#123; </span><br><span class="line">            System.out.println(<span class="string">"code block hello"</span>);</span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="典型的使用synchronized的场景–单例模式的双重锁结构"><a href="#典型的使用synchronized的场景–单例模式的双重锁结构" class="headerlink" title="典型的使用synchronized的场景–单例模式的双重锁结构"></a>典型的使用<code>synchronized</code>的场景–单例模式的双重锁结构</h3><p>在讨论双重锁的前，需要聊聊单例模式，单例模式通俗的来说一个类只能构造一个实例。针对的实现又两种：1.饿汉模式，2.懒汉模式</p><h4 id="饿汉模式"><a href="#饿汉模式" class="headerlink" title="饿汉模式"></a>饿汉模式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line">    <span class="comment">//1. 使用静态变量</span></span><br><span class="line"><span class="comment">//    private static Singleton singleton = new Singleton();</span></span><br><span class="line">    <span class="comment">//2.使用静态代码块 未使用时造成内存空间浪费</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Singleton <span class="title">newInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方式不会影响到多线程的线程安全问题，因为类的装载机制在初始化对象的时候是保证不会有第二个线程进入的。但是有个很大的弊端是他不是<code>lazy-loading</code>的，这回产生资源的浪费，比如创建完对象后，自始至终没用过。所以不推荐使用</p><h4 id="懒汉模式"><a href="#懒汉模式" class="headerlink" title="懒汉模式"></a>懒汉模式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 普通的线程不安全的</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Singleton <span class="title">newInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(singleton == <span class="keyword">null</span>)&#123;</span><br><span class="line">            singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.静态内部类 一方面能够达到lazy-loading的效果，另一方面能够保证线程安全，因为jvm保证初始化的时候别的线程是不能进入的</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">newSingleton</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Singleton <span class="title">newInstanceInnerClass</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> newSingleton.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码的第一种是不能保证线程安全的，多线程下会导致失效。而第二种使用静态内部类的方式实现能够实现线程安全得宜于类的加载机制，类似饿汉模式。但同时具有<code>lazy-Loading</code>的特性。是常用的单例模式用法。</p><h4 id="double-check双重锁"><a href="#double-check双重锁" class="headerlink" title="double-check双重锁"></a><code>double-check</code>双重锁</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoubleCheck</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">DoubleCheck</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> DoubleCheck doubleCheck; <span class="comment">//使用volatile保证原子性，防止重排序</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DoubleCheck <span class="title">newInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(doubleCheck == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">// 当两个线程同时到这步 a先进同步块，在a进入后获得instance后，b获得锁，进入同步块，</span></span><br><span class="line">            <span class="comment">// 这时候下一个判断就起到作用了，这时候的doubleCheck不为空，</span></span><br><span class="line">            <span class="comment">// 直接return，否则又️新建了一个对象</span></span><br><span class="line">            <span class="keyword">synchronized</span> (DoubleCheck.class)&#123;</span><br><span class="line">                <span class="keyword">if</span>(doubleCheck == <span class="keyword">null</span>)&#123;</span><br><span class="line">                    doubleCheck = <span class="keyword">new</span> DoubleCheck();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> doubleCheck;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上double-check也是懒汉模式的一种，能够保证线程安全。很完美。。</p><h3 id="synchronzied底层实现"><a href="#synchronzied底层实现" class="headerlink" title="synchronzied底层实现"></a><code>synchronzied</code>底层实现</h3><p>synchronized 同步<code>语句块</code>的实现使用的是<code>monitorenter</code> 和<code>monitorexit</code> 指令，其中 <code>monitorenter</code> 指令指向同步代码块的开始位置，<code>monitorexit</code> 指令则指明同步代码块的结束位置。</p><blockquote><p> synchronized 修饰的<code>方法</code>并没有 monitorenter 指令和 monitorexit 指令，取得代之的确实是 ACC_SYNCHRONIZED 标识，该标识指明了该方法是一个同步方法，JVM 通过该 ACC_SYNCHRONIZED 访问标志来辨别一个方法是否声明为同步方法，从而执行相应的同步调用。</p></blockquote><h3 id="volatile和synachronized的区别"><a href="#volatile和synachronized的区别" class="headerlink" title="volatile和synachronized的区别"></a><code>volatile</code>和<code>synachronized</code>的区别</h3><ol><li>volatile是线程同步的轻量级实现，所以说使用volatile的性能肯定要强于synchronized。</li><li>volatile作用于变量，而synachronzied作用于方法和代码块。</li><li>多线程间使用volatile不会发生阻塞，而使用synachronized可能发生阻塞</li><li>volatile保证变量在多线程间的可见性，向虚拟机声明这个变量不稳定，需要每次都从主存中获取，而synchronized既能够保证可见性，又能保证原子性。        </li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Thread </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用命令整理</title>
      <link href="/2019/01/29/2019-01-29-%E5%9F%BA%E6%9C%ACLlinux%E5%91%BD%E4%BB%A4(%E5%BF%85%E9%A1%BB%E6%8E%8C%E6%8F%A1)/"/>
      <url>/2019/01/29/2019-01-29-%E5%9F%BA%E6%9C%ACLlinux%E5%91%BD%E4%BB%A4(%E5%BF%85%E9%A1%BB%E6%8E%8C%E6%8F%A1)/</url>
      
        <content type="html"><![CDATA[<h1 id="linux中必须掌握的基本命令"><a href="#linux中必须掌握的基本命令" class="headerlink" title="linux中必须掌握的基本命令"></a>linux中必须掌握的基本命令</h1><p>在开始前，我推荐安装 <a href="https://github.com/tldr-pages/tldr" target="_blank" rel="noopener">trdr（too long dont read）</a>工具，用来简化man命令，来实现查看命令含义和用法的作用。</p><h2 id="一-、系统工作命令"><a href="#一-、系统工作命令" class="headerlink" title="一 、系统工作命令"></a>一 、系统工作命令</h2><ol><li><p><code>echo</code></p><p><code>echo</code>命令一般用于shell中打印变量或者字符串的作用，主要用来显示和提醒。</p><ul><li>输出一段信息 如：<code>echo &quot;hello world&quot;</code> 其中<code>&quot;</code>不是必须的 </li><li>输出一段带环境变量的信息 如：<code>echo &quot;My Path is $PATH&quot;</code> </li><li>输出并不带换行符号 如：<code>echo  -n &quot;Hello World&quot;</code></li><li>输出一段激活转依字符 如： <code>echo -e &quot;Column 1 \t Column 2&quot;</code></li></ul></li><li><p><code>date</code> </p><p><code>date</code> 命令主要用来设置和打印系统时间。</p><ul><li>输出默认时区格式的事件 <code>date +&quot;%c&quot;</code></li><li>输出当前事件按照UTC和iso格式输出 <code>date -u +&quot;%Y-%m-%dT%H:%M:%SZ&quot;</code></li><li>输出事件戳 <code>date +&quot;%s&quot;</code></li></ul></li><li><p><code>reboot</code> 命令主要用来重启系统</p><ul><li>重启系统 <code>reboot</code></li><li>强制重启 <code>reboot -f</code></li></ul></li><li><p><code>poweroff</code> 命令用户关机</p></li><li><p><code>wget</code> 命令 用于从web中下载文件，支持 <code>http</code>,<code>https</code>,<code>ftp</code></p><ul><li>获取URL中的内容到<code>foo</code>中 <code>wget https://example.com/foo</code></li><li>获取URL中的内容到bar中 <code>wget -O bar https://example.com/foo</code></li><li>继续未完成的下载 <code>wget -c https://example.com</code></li><li>后台下载 <code>wget -q https://example.com</code></li></ul></li><li><p><code>ps</code>命令主要用于查看正在运行的进程的信息</p><ul><li>打印全部正在执行的进程 <code>ps aux</code></li><li>打印全部正在执行的进程并且伴有完整的命令串 <code>ps auxww</code></li><li>通过 <code>grep</code> 管道过滤 <code>ps aux | grep &quot;tomcat&quot;</code></li><li>得到进程的父进程<code>pid</code> :<code>ps -o ppid= -p pid</code> </li></ul></li><li><p><code>top</code>命令 主要用户动态的实时的显示正在运行的程序</p><ul><li><code>top -i</code> 不显示空闲或者是僵尸进程</li><li><code>top -u $user</code> 显示指定用户的进程 </li><li><code>top -p PID</code> 只显示指定进程PID</li><li><code>top -p $(pgrep -d &#39;,&#39; process_name)</code> 通过进程名来查询</li></ul></li><li><p><code>pidof</code> 命令主要用于查找指定进程的id号</p><ul><li><code>pidof -s</code> 进返回一个进程号</li><li><code>pidof</code> -c 仅显示具有相同root目录下的进程</li></ul></li></ol><h2 id="二、系统状态"><a href="#二、系统状态" class="headerlink" title="二、系统状态"></a>二、系统状态</h2><ol><li><code>ifconfig</code> 命令主要用于网络接口的查看和配置</li></ol><ul><li><code>Ifconfig eth0</code> 查看etho0接口网络设置</li><li><code>ifconfig -a</code> 查看所有接口的详细信息</li><li><code>ifconfig eth0 down</code> 关闭接口eth0</li><li><code>ifconfig eth0 ipaddr</code> 设置端口ip地址</li></ul><ol start="2"><li><code>uname</code> 打印出现当前机器和系统的相关信息</li></ol><ul><li><code>uname -n</code> 打印当前的<code>hostname</code></li><li><code>uname -a</code> 打印当前可用的系统的信息，包括硬件软件。</li></ul><ol start="3"><li><code>who</code> 打印哪些用户登录再这台机器上</li></ol><ul><li><code>who</code> 显示<code>username</code>等比较全的信息</li><li><code>who am i</code> 打印出当前用户 </li></ul><ol start="4"><li><code>last</code> 用于查看当前用户最近的登录信息</li></ol><h2 id="三、文件和目录"><a href="#三、文件和目录" class="headerlink" title="三、文件和目录"></a>三、文件和目录</h2><ol><li><p><code>pwd</code> 用于打印当前目录</p></li><li><p><code>cd</code> 用于切换目录</p></li><li><p><code>ls</code> 用于罗列目录下的文件或者文件夹</p></li></ol><ul><li><code>ls -l</code>按行罗列文件或文件夹</li><li><code>ls -a</code> 显示所有文件，包括隐藏的文件。</li><li><code>ls -lh</code> 按照大小排泄排列</li></ul><ol start="4"><li><code>touch</code> 命令主要用于改变文件的访问时间和修改时间。</li></ol><ul><li><code>touch filename</code> 以当前时间创建文件</li><li><code>touch -t yyyy-mm-dd filename</code> 以某一时间来改变文件时间</li></ul><ol start="5"><li><code>mkdir</code> 命令主要用于创建文件</li></ol><ul><li><code>mkdir dir</code> 创建文件夹</li><li><code>mkdir -p /path/dir</code> 创建指定路径下的文件</li></ul><ol start="6"><li><code>cp</code> 命令主要用于文件的复制</li></ol><ul><li><code>cp path/to/file.ext path/to/copy.ext</code> 复制文件到另一个地址</li><li><code>cp path/to/file.ext path/to/target_parent_directory</code> 复制文件到指定地址，并且保持文件名不变</li><li><code>cp -r path/to/directory path/to/copy</code> 递归的复制整个文件夹及其中的内容到指定目录</li><li><code>cp -i *.txt path/to/target_directory</code> 以交互的模式复制文件到指定文件夹中</li></ul><ol start="7"><li><code>mv</code> 命令主要用于移动文件</li></ol><ul><li><code>mv source target</code> 移动文件</li><li><code>mv -f</code> 强制移动，覆盖现有文件时不要提示</li></ul><ol start="8"><li><code>rm</code>命令主要用于删除文件</li></ol><ul><li><code>rm path/to/file path/to/another/file</code> 删除特定文件夹中的文件</li><li><code>rm -r path/to/directory</code> 递归删除文件夹及文件夹中的文件</li><li><code>rm -rf</code> 递归删除，并且不要提示信息</li></ul><ol start="9"><li><code>dd</code> 命令主要用于转化和复制文件,制作usb镜像</li></ol><ul><li>Clone a drive to another drive with 4MB block and ignore error <code>dd if=/dev/source_drive of=/dev/dest_drive bs=4m conv=noerror</code></li></ul><ol start="10"><li><code>file</code>命令主要用于确定文件类型</li></ol><ul><li><code>file filename</code> 输出文件类型</li><li><code>file -s filename</code> 用于特殊的文件或者设备文件。</li></ul><h2 id="四、文本编辑命令"><a href="#四、文本编辑命令" class="headerlink" title="四、文本编辑命令"></a>四、文本编辑命令</h2><ol><li><code>cat</code> 打印和串联文件</li></ol><ul><li><code>cat file</code> 打印文件内容到标准输出</li><li><code>cat file1 file2  &gt; targetFile</code> 将多个文件内容串联到目标文件中</li><li><code>cat -n file</code> 打印出行数到标准输出</li></ul><ol start="2"><li><code>more</code> 用于互动的阅读文件内容，可以上下滚动</li></ol><ul><li><code>more file</code> 打开文件，<code>&lt;space&gt;</code>用于移动到下一页，<code>/</code>用于搜索文件内容， <code>q</code>用于退出当前界面</li></ul><ol start="3"><li><code>head</code> 输出文件开始的部分</li></ol><ul><li><code>head -n count_of_line filename</code> 查看文件的前n行</li><li><code>head -c number_of_byte filename</code> 查看文件的前n个字节</li></ul><ol start="4"><li><code>tail</code> 输出文件最后的部分</li></ol><ul><li><code>tail -n num file</code>打印出文件最后num行 </li><li><code>tail -n +num file</code> 打印出文件从num开始的几行</li><li><code>tail -f file</code> 保持阅读状态直到 <code>Ctrl + c</code></li></ul><ol start="5"><li><code>wc</code>命令用于统计文件的单词，字节，行数 </li></ol><ul><li><code>wc -l filename</code> 统计文件的行数</li><li><code>wc -w filename</code> 统计文件的字数</li><li><code>wc -c filename</code> 统计文件的字节数</li></ul><ol start="6"><li><code>显示文件的状态</code> </li></ol><ul><li><code>stat filename</code> 显示文件的属性比如大小，权限等。</li><li><code>stat -x filename</code>格式化显示文件的详细属性信息。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu18.04 配置全过程</title>
      <link href="/2019/01/04/2019-01-04-Ubuntu%E9%85%8D%E7%BD%AE%E5%85%A8%E8%BF%87%E7%A8%8B/"/>
      <url>/2019/01/04/2019-01-04-Ubuntu%E9%85%8D%E7%BD%AE%E5%85%A8%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Ubuntu18-04-配置全过程"><a href="#Ubuntu18-04-配置全过程" class="headerlink" title="Ubuntu18.04 配置全过程"></a>Ubuntu18.04 配置全过程</h1><p>因为最近在弄win10双系统，又因为PopOs在装机的时候设置grub比较麻烦，所以换成最新的Ubuntu稳定版来做成win/ubunut双系统。</p><h2 id="安装问题"><a href="#安装问题" class="headerlink" title="安装问题"></a>安装问题</h2><p>在装机的需要使用grub做启动引导。所以设置保留BIOS启动区域而不是挂载/boot。亲身经历，UEFI启动模式下，Ubuntu的引导挂载应该是biosgrub，否则出错。导致无法家在grub。</p><h2 id="界面配置"><a href="#界面配置" class="headerlink" title="界面配置"></a>界面配置</h2><h3 id="安装gnome-tweak-tool"><a href="#安装gnome-tweak-tool" class="headerlink" title="安装gnome-tweak-tool"></a>安装gnome-tweak-tool</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install gnome-tweak-tool</span><br></pre></td></tr></table></figure><p>如果需要更改shell则需要安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install gnome-shell-extensions</span><br></pre></td></tr></table></figure><p>这样就能轻松愉快的使用gnome-tewak-tool了。</p><h3 id="主题方案"><a href="#主题方案" class="headerlink" title="主题方案"></a>主题方案</h3><h4 id="主界面"><a href="#主界面" class="headerlink" title="主界面"></a>主界面</h4><p>因为前一阵使用Pop!_OS发现它默认的主题非常好看，所以下载Popos默认的主题，然后在gnome-tweak-tool中设置好就ok了，<a href="https://github.com/pop-os/gtk-theme" target="_blank" rel="noopener">这里是PopOs的gtk主题地址</a>。但是发现PopOs默认的输入法输入框是默认米黄色的，打字的时候不太显眼，所以在基础上添加了如下代码。添加方法：</p><ol><li>根据说明下载Pop-theme</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:system76/pop</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install pop-theme</span><br></pre></td></tr></table></figure><ol start="2"><li>定位到 <code>/usr/share/themes/Pop/gnome-shell/</code> 的gnome-shell.css和Pop.css 将IBus的界面代码替换成如下代码</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.candidate-popup-content</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">8px</span>;</span><br><span class="line">  <span class="attribute">spacing</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.candidate-index</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">4px</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">rgba</span>(255, 255, 255, 0.5);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.candidate-box</span><span class="selector-pseudo">:selected</span> <span class="selector-class">.candidate-index</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">rgba</span>(255, 255, 255, 0.5);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.candidate-box</span> &#123;</span><br><span class="line">  <span class="attribute">transition-duration</span>: <span class="number">0ms</span>;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">28px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">8px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.candidate-box</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(255, 255, 255, 0.06);</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">rgba</span>(255, 255, 255, 0.9);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.candidate-box</span><span class="selector-pseudo">:active</span> &#123;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="built_in">rgba</span>(255, 255, 255, 0.1);</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">rgba</span>(255, 255, 255, 0.9);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.candidate-box</span><span class="selector-pseudo">:selected</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#0046DB</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">rgba</span>(255, 255, 255, 0.85);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.candidate-page-button-box</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">28px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.vertical</span> <span class="selector-class">.candidate-page-button-box</span> &#123;</span><br><span class="line">  <span class="attribute">padding-top</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.horizontal</span> <span class="selector-class">.candidate-page-button-box</span> &#123;</span><br><span class="line">  <span class="attribute">padding-left</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.candidate-page-button</span> &#123;</span><br><span class="line">  <span class="attribute">min-width</span>: <span class="number">28px</span>;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">28px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.candidate-page-button-previous</span> &#123;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">  <span class="attribute">border-right-width</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.candidate-page-button-next</span> &#123;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.candidate-page-button-icon</span> &#123;</span><br><span class="line">  <span class="attribute">icon-size</span>: <span class="number">1.23077em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后成品：</p><p><img src="https://wx4.sinaimg.cn/large/006tNc79gy1g2dt15yse2j318u0miagk.jpg" alt="输入法"></p><ol start="3"><li>应用程序窗口用的是 macOS High Sierra  主题，仿照MAC的窗口。比较漂亮。<a href="https://www.gnome-look.org/p/1013714/" target="_blank" rel="noopener">macOS High Sierra 主题</a>，下载下来后解压后放到 <code>/usr/share/themes</code> 下，之后就能在gnome-tweak-tool中看到了，设置完成后可以看到如下效果。</li></ol><p><img src="https://wx4.sinaimg.cn/large/006tNc79gy1g2dt17ye4jj31900u01dj.jpg" alt="主题"></p><h4 id="gdm主题"><a href="#gdm主题" class="headerlink" title="gdm主题"></a>gdm主题</h4><p>gdm主题选用类似MAC登陆的主题，界面美观，而且还有毛玻璃效果。<a href="https://www.gnome-look.org/p/1207015/" target="_blank" rel="noopener">High Ubunterra</a>下载后解压之后，直接命令行执行./install.sh。之后直接右键设置后，直接将锁屏界面直接设置好。其实主要目的的就是将 <code>/usr/share/gnome-shell/theme</code> 中的ubuntu.css替换掉。</p><h4 id="grub主题"><a href="#grub主题" class="headerlink" title="grub主题"></a>grub主题</h4><p>grub的主题比较少，推荐的就是<a href="https://www.gnome-look.org/p/1000140/" target="_blank" rel="noopener">Breeze GRUB2 theme</a> 是一款比较漂亮美观的主题。具体成果界面可以点击链接地址查看。</p><p>普通主题需要作如下顺序的操作，但是 Breeze Grub2 theme 有脚本，直接执行解压后的脚本程序，就ok了。</p><ol><li>创建grub的主题文件夹</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir /boot/grub/themes</span><br></pre></td></tr></table></figure><ol start="2"><li>将主题包移动到这个目录下</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp 主题包名 /boot/grub/themes/</span><br></pre></td></tr></table></figure><ol start="3"><li>修改主题的配置文件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/grub.d/00_header</span><br></pre></td></tr></table></figure><ol start="4"><li>在配置文件中添加</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GRUB_THEME=<span class="string">"/boot/grub/themes/主题包名/theme.txt"</span></span><br><span class="line">GRUB_GFXMODE=<span class="string">"1920x1080x32"</span></span><br></pre></td></tr></table></figure><ol start="5"><li>最后执行 update-grub 命令</li></ol><h3 id="gnome拓展推荐"><a href="#gnome拓展推荐" class="headerlink" title="gnome拓展推荐"></a>gnome拓展推荐</h3><p>我没有什么特殊的拓展安装，在Ubuntu系统下，一般安装如下拓展。</p><ol><li><p>User themes 可以使用用户目录下的主题</p></li><li><p>removeable Drive Menu 当插入移除设备的时候在上方有状态图标提醒。</p></li><li><p>Caffeine 可以关闭屏保和自动挂起，很好用。</p></li><li><p>Dash To Dock 如果你不喜欢ubuntu的侧边dock可以尝试这个dock，比较美观的dock，可以设置在侧边或者在底下。</p></li><li><p>openWeather 可以在顶部栏中查看天气，点击可以查看最近天气，需要手动添加地址。</p></li><li><p>ClipBord Indicator 是可以记录粘贴板的内容，有时可以避免重复复制的操作。</p></li></ol><p>推荐的有这几个，但是gnome-shell拓展可谓非常的多，并且大多数都非常好用，可以去 <a href="https://extensions.gnome.org/" target="_blank" rel="noopener">gnome extensions 官网</a> 看一看，看有没有更适合自己的。</p><h3 id="配置Vim和终端"><a href="#配置Vim和终端" class="headerlink" title="配置Vim和终端"></a>配置Vim和终端</h3><h4 id="配置vim"><a href="#配置vim" class="headerlink" title="配置vim"></a>配置vim</h4><p>我vim使用的是vundle插件管理器，首先要安装vundle.</p><p>首先要下载git</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure><p>然后安装vundle</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vi</span><br></pre></td></tr></table></figure><p>将如下配置替换到.vimrc 中，首先要进行备份哦！！！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> nocompatible <span class="string">" be iMproved, required</span></span><br><span class="line"><span class="string">filetype off "</span> required</span><br><span class="line"><span class="built_in">set</span> number</span><br><span class="line"><span class="built_in">let</span> mapleader=<span class="string">","</span></span><br><span class="line"><span class="built_in">set</span> rtp+=~/.vim/bundle/Vundle.vim</span><br><span class="line">call vundle<span class="comment">#begin()</span></span><br><span class="line"></span><br><span class="line">Plugin <span class="string">'VundleVim/Vundle.vim'</span></span><br><span class="line">Plugin <span class="string">'scrooloose/nerdtree'</span></span><br><span class="line">Plugin <span class="string">'kien/ctrlp.vim'</span></span><br><span class="line">Plugin <span class="string">'junegunn/fzf'</span></span><br><span class="line">Plugin <span class="string">'Shougo/neocomplete.vim'</span></span><br><span class="line">Plugin <span class="string">'vim-airline/vim-airline'</span></span><br><span class="line">Plugin <span class="string">'vim-airline/vim-airline-themes'</span></span><br><span class="line">Plugin <span class="string">'terryma/vim-smooth-scroll'</span></span><br><span class="line">Plugin <span class="string">'terryma/vim-expand-region'</span></span><br><span class="line">Plugin <span class="string">'tpope/vim-commentary'</span></span><br><span class="line">Plugin <span class="string">'tpope/vim-surround'</span></span><br><span class="line">Plugin <span class="string">'godlygeek/tabular'</span></span><br><span class="line">Plugin <span class="string">'plasticboy/vim-markdown'</span></span><br><span class="line">Plugin <span class="string">'tpope/vim-fugitive'</span></span><br><span class="line">Plugin <span class="string">'airblade/vim-gitgutter'</span></span><br><span class="line">Plugin <span class="string">'justinmk/vim-sneak'</span></span><br><span class="line">Plugin <span class="string">'powerline/fonts'</span></span><br><span class="line">Plugin <span class="string">'scrooloose/nerdcommenter'</span> </span><br><span class="line">Plugin <span class="string">'suan/vim-instant-markdown'</span></span><br><span class="line">Plugin <span class="string">'mzlogin/vim-markdown-toc'</span></span><br><span class="line">call vundle<span class="comment">#end()            " required</span></span><br><span class="line">filetype plugin indent on</span><br><span class="line"><span class="string">" let g:airline_powerline_fonts = 1</span></span><br><span class="line"><span class="string">map &lt;C-n&gt; :NERDTreeToggle&lt;CR&gt;</span></span><br><span class="line"><span class="string">"</span> smooth-scroll</span><br><span class="line"><span class="keyword">function</span> SmoothScroll(up)</span><br><span class="line">    <span class="keyword">if</span> a:up</span><br><span class="line">        <span class="built_in">let</span> scrollaction=<span class="string">"^Y"</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">let</span> scrollaction=<span class="string">"^E"</span></span><br><span class="line">    endif</span><br><span class="line">    <span class="built_in">exec</span> <span class="string">"normal "</span> . scrollaction</span><br><span class="line">    redraw</span><br><span class="line">    <span class="built_in">let</span> counter=1</span><br><span class="line">    <span class="keyword">while</span> counter&lt;&amp;scroll</span><br><span class="line">        <span class="built_in">let</span> counter+=1</span><br><span class="line">        sleep 10m</span><br><span class="line">        redraw</span><br><span class="line">        <span class="built_in">exec</span> <span class="string">"normal "</span> . scrollaction</span><br><span class="line">    endwhile</span><br><span class="line">endfunction</span><br><span class="line">noremap &lt;silent&gt; &lt;c-u&gt; :call smooth_scroll<span class="comment">#up(&amp;scroll, 15, 2)&lt;CR&gt;</span></span><br><span class="line">noremap &lt;silent&gt; &lt;c<span class="_">-d</span>&gt; :call smooth_scroll<span class="comment">#down(&amp;scroll, 15, 2)&lt;CR&gt;</span></span><br><span class="line">noremap &lt;silent&gt; &lt;c-b&gt; :call smooth_scroll<span class="comment">#up(&amp;scroll*2, 10, 4)&lt;CR&gt;</span></span><br><span class="line">noremap &lt;silent&gt; &lt;c<span class="_">-f</span>&gt; :call smooth_scroll<span class="comment">#down(&amp;scroll*2, 10, 4)&lt;CR&gt;</span></span><br><span class="line"><span class="built_in">set</span> mouse= </span><br><span class="line">map &lt;ScrollWheelUp&gt; &lt;C-Y&gt;</span><br><span class="line">map &lt;ScrollWheelDown&gt; &lt;C-E&gt;</span><br><span class="line"><span class="string">"高亮错误</span></span><br><span class="line"><span class="string">"</span> <span class="built_in">let</span> g:syntastic_enable_highlighting=1</span><br><span class="line"><span class="string">" 快速选中</span></span><br><span class="line"><span class="string">"</span> <span class="built_in">let</span> g:expand_region_use_select_mode = 1</span><br><span class="line"><span class="string">" map w &lt;Plug&gt;(expand_region_expand)</span></span><br><span class="line"><span class="string">"</span> map W &lt;Plug&gt;(expand_region_shrink)</span><br><span class="line"><span class="string">" markdown setting</span></span><br><span class="line"><span class="string">let g:vim_markdown_toc_autofit = 1</span></span><br><span class="line"><span class="string">let g:vim_markdown_autowrite = 1</span></span><br><span class="line"><span class="string">let g:vim_markdown_folding_disabled = 1</span></span><br><span class="line"><span class="string">set updatetime=100</span></span><br><span class="line"><span class="string">let g:gitgutter_grep=''</span></span><br><span class="line"><span class="string">let g:gitgutter_terminal_reports_focus=0</span></span><br></pre></td></tr></table></figure><p>最后在vim中使用<code>:PluginInstall</code> 安装插件。具体的插件的作用以后会专门写一篇来介绍。也可自行百度。</p><h4 id="配置终端"><a href="#配置终端" class="headerlink" title="配置终端"></a>配置终端</h4><p>我使用的是zsh，首先安装zsh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install zsh</span><br></pre></td></tr></table></figure><p>然后配置将zsh为默认</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chsh -s /bin/zsh</span><br></pre></td></tr></table></figure><p>最后使用著名的oh-my-zsh 来装点B吧。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c <span class="string">"<span class="variable">$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>"</span></span><br></pre></td></tr></table></figure><h3 id="配置git环境和github连接"><a href="#配置git环境和github连接" class="headerlink" title="配置git环境和github连接"></a>配置git环境和github连接</h3><p>安装好git后，配置git</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">"你的github用户名"</span></span><br><span class="line">git config --global user.email <span class="string">"你的github邮箱地址"</span></span><br></pre></td></tr></table></figure><p>生成密钥，一路enter就可以</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"你自己的github对应的邮箱地址"</span></span><br></pre></td></tr></table></figure><p>将文件中生成的密钥复制到github上的配置中去</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><p>检查是否配置成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><h3 id="配置Java开发环境"><a href="#配置Java开发环境" class="headerlink" title="配置Java开发环境"></a>配置Java开发环境</h3><h4 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h4><ol><li>在<a href="https://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="noopener">官网</a>下载jdk源码,并在解压前创建 <code>/usr/local/java</code> 文件夹</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /usr/<span class="built_in">local</span>/java</span><br></pre></td></tr></table></figure><ol start="2"><li>将文件解压到刚创建的文件夹中，也可以解压到当前文件夹下，然后移动到刚才创建的文件夹下。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar -xzvf jdk1.8.0_191.tar.gz </span><br><span class="line"></span><br><span class="line">mv jdk1.8.0_191 /usr/<span class="built_in">local</span>/java/</span><br></pre></td></tr></table></figure><ol start="3"><li>使用vim编辑<code>/etc/profile</code> 文件,在结尾处添加如下内容</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/<span class="built_in">local</span>/java/jdk1.8.0_191 </span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span> </span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar</span><br></pre></td></tr></table></figure><ol start="4"><li>执行 <code>source /etc/profile</code> 刷新配置文件，然后使用 <code>java -version</code>来查看是否成功。</li></ol><p><img src="https://wx3.sinaimg.cn/large/006tNc79gy1g2dt166451j318s03waav.jpg" alt="java"></p><h4 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h4><ol><li><p>在<a href="http://maven.apache.org/download.cgi" target="_blank" rel="noopener">官网</a> 下载源码包，同样解压前创建 <code>/usr/local/maven</code>文件夹</p></li><li><p>将文件解压到<code>/usr/local/maven</code>中。</p></li><li><p>使用vim编辑 <code>/etc/profile</code>文件，在末尾添加如下内容</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> MAVEN_HOME=/usr/<span class="built_in">local</span>/maven/apache-maven-3.6.0</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$MAVEN_HOME</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><ol start="4"><li><p>同样使用<code>source /etc/profile</code> 命令刷新配置文件，使用<code>mvn -v</code> 命令查看是否安装成功。 </p></li><li><p>配置阿里maven镜像</p></li></ol><p>编辑 <code>/usr/local/maven/apache-maven-3.6.0/conf/setting.xml</code>，在<code>&lt;mirrors&gt;&lt;/mirrors&gt;</code>标签内添加如下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;mirror&gt;</span><br><span class="line">      &lt;id&gt;alimaven&lt;/id&gt;</span><br><span class="line">      &lt;name&gt;aliyun maven&lt;/name&gt;</span><br><span class="line">  　　&lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt;</span><br><span class="line">      &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;        </span><br><span class="line">    &lt;/mirror&gt;</span><br></pre></td></tr></table></figure><p><img src="https://wx1.sinaimg.cn/large/006tNc79gy1g2dt176wswj319k068di3.jpg" alt="maven"></p><h3 id="Mysql安装和数据库管理软件推荐"><a href="#Mysql安装和数据库管理软件推荐" class="headerlink" title="Mysql安装和数据库管理软件推荐"></a>Mysql安装和数据库管理软件推荐</h3><ol><li>进入<a href="https://dev.mysql.com/downloads/repo/apt/" target="_blank" rel="noopener">官网</a>下载ubuntu的deb包，直接使用命令安装</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i mysql-apt-config_0.8.11-1_all.deb</span><br></pre></td></tr></table></figure><ol start="2"><li>刷新源列表</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><ol start="3"><li>安装mysql</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install mysql-server mysql-client</span><br></pre></td></tr></table></figure><p>其中会让你输入密码，输入就行了。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot过程问题</title>
      <link href="/2019/01/04/2019-01-25-%E8%BF%87%E7%A8%8B%E9%97%AE%E9%A2%98/"/>
      <url>/2019/01/04/2019-01-25-%E8%BF%87%E7%A8%8B%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot过程问题"><a href="#SpringBoot过程问题" class="headerlink" title="SpringBoot过程问题"></a>SpringBoot过程问题</h1><h2 id="spring注解相关"><a href="#spring注解相关" class="headerlink" title="spring注解相关"></a>spring注解相关</h2><h3 id="RestController"><a href="#RestController" class="headerlink" title="@RestController"></a><code>@RestController</code></h3><p>​    <code>@RestController</code> 是<code>spring 4.0</code>来引入的简化的<code>RESTful WEB</code>应用的创建，是一个结合<code>@Constroller</code>和<code>@ResponseBody</code>的注解，不用每个类都使用<code>ResponseBody</code>注解来达到处理请求的目的。</p><p>​    控制器使用<code>@RestController</code>注释进行注释，因此不需要<code>@ResponseBody</code>。</p><h3 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="@RequestMapping"></a><code>@RequestMapping</code></h3><p><code>@RequestMapping</code>的注解中的参数：</p><p>name ： 在4.0后引入的，开始我错把name当value用，结果出现 <code>[java.lang.IllegalStateException: Ambiguous mapping found. Cannot map &#39;appController&#39; bean method]</code> 类似这种错误。其实name就是一个名字而已,没有什么特殊含义，但是官方文档中指出 <code>在类型级别和方法级别支持！在两个级别上使用时，组合名称通过串联以“＃”作为分隔符派生</code> 。使用上，官方说明是主要可以通过使用Spring jsp tag包里面的mvcUrl，来生成jsp到controller的链接。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/people"</span>)</span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">PersonController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping</span>(<span class="string">"/&#123;id&#125;"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> HttpEntity <span class="title">getPerson</span><span class="params">(@PathVariable String id)</span> </span>&#123; ... &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib uri=<span class="string">"http://www.springframework.org/tags"</span> prefix=<span class="string">"s"</span> %&gt;</span><br><span class="line"></span><br><span class="line"> &lt;a href="$&#123;s:mvcUrl('PC#getPerson').arg(0,"123").build()&#125;"&gt;Get Person&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>value:用来表示主要映射,是常用的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/user"</span>,method = RequestMethod.GET,produces = <span class="string">"application/json"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findUsers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.findUsers();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>path: 指定访问的uri地址</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(path = <span class="string">"/user"</span>,method = RequestMethod.POST,name = <span class="string">"this is user`s post methods"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">insertUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        userService.saveUser();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>method:映射的HTTP的访问方法，有GET, POST, HEAD, OPTIONS, PUT, PATCH, DELETE, TRACE</p><p>consumes： 指定<strong>处理请求的提交内容类型（Content-Type）</strong>，例如application/json, text/html;</p><p>produces: 指定<strong>返回的内容类型</strong>，仅当request请求头中的(Accept)类型中包含该指定类型才返回；</p><p>params： 指定request中必须包含某些参数值时，才让该方法处理。</p><p>headers： 指定request中必须包含某些指定的header值，才能让该方法处理请求。</p><h3 id="Jpa常用注解"><a href="#Jpa常用注解" class="headerlink" title="Jpa常用注解"></a><code>Jpa</code>常用注解</h3><h4 id="Entity"><a href="#Entity" class="headerlink" title="@Entity"></a>@Entity</h4><p>标注在类外侧，标注着这个类是一个实体类。</p><h4 id="Table"><a href="#Table" class="headerlink" title="@Table"></a><code>@Table</code></h4><p>​    标注在类外侧，标注实体的主表，其中有 <code>catalog</code>,<code>indexes</code>, <code>name</code>, <code>schema</code>，分别注明为：指定database的目录，索引，名称，和表的结构描述 </p><p>​    注意：schema定义了表、每个表的字段，还有表和字段之间的关系。 </p><h4 id="Id"><a href="#Id" class="headerlink" title="@Id"></a>@Id</h4><p>表示是实体类的主键</p><h4 id="GeneratedValue"><a href="#GeneratedValue" class="headerlink" title="@GeneratedValue"></a>@GeneratedValue</h4><p>​    提供主键的值得生成策略规范。GeneratedValue注释可以与Id注释一起应用于实体或映射超类的主键属性或字段，派生主键不支持该注解。提供两个可选值：1. <a href="https://docs.oracle.com/javaee/7/api/javax/persistence/GeneratedValue.html#generator--" target="_blank" rel="noopener">generator</a> ：要在SequenceGenerator或TableGenerator注解中指定的主键生成器的名称。2. <a href="https://docs.oracle.com/javaee/7/api/javax/persistence/GeneratedValue.html#strategy--" target="_blank" rel="noopener">strategy</a> 生成策略，有四个可选值AUTO,INDENTITY,SEQUENCE 和 TABLE ，默认为AUTO</p><h4 id="Column"><a href="#Column" class="headerlink" title="@Column"></a>@Column</h4><p>指定持久属性或字段的映射列。如果未指定Column注释，则应用默认值。</p><p><a href="https://docs.oracle.com/javaee/7/api/javax/persistence/Column.html#updatable--" target="_blank" rel="noopener">updatable</a>：是否包含在框架自动生成的update语句中。</p><p>其他可以通过例子一看便知：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Column</span>(name=<span class="string">"description"</span>, nullable=<span class="keyword">false</span>, length=<span class="number">512</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> description; &#125;</span><br></pre></td></tr></table></figure><h4 id="Transient"><a href="#Transient" class="headerlink" title="@Transient"></a>@Transient</h4><p><code>@Transient</code>表示该属性并非一个到数据库表的字段的映射,<code>ORM</code>框架将忽略该属性.<br>如果一个属性并非数据库表的字段映射,就<strong>务必</strong>将其标示为<code>@Transient</code>,否则,<code>ORM</code>框架默认其注解为<code>@Basic</code>.</p><h4 id="ManyToOne"><a href="#ManyToOne" class="headerlink" title="@ManyToOne"></a>@ManyToOne</h4><p>表示一个多对一的映射,该注解标注的属性通常是数据库表的外键</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//订单Order和用户User是一个ManyToOne的关系</span></span><br><span class="line"><span class="comment">//在Order类中定义</span></span><br><span class="line"><span class="meta">@ManyToOne</span>()</span><br><span class="line"><span class="meta">@JoinColumn</span>(name=”USER”)</span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="JoinColumn"><a href="#JoinColumn" class="headerlink" title="@JoinColumn"></a>@JoinColumn</h4><p>​    指定用于连接实体关联或元素集合的列。如果JoinColumn注解本身是默认的，则假定使用单个连接列并应用默认值。其默认的名称为实体User的名称+下划线+实体User的主键名称。也就是USER_ID.</p><h4 id="OneToMany"><a href="#OneToMany" class="headerlink" title="@OneToMany"></a>@OneToMany</h4><p>@OneToMany描述一个一对多的关联,该属性应该为集体类型,在数据库中并没有实际字段.例如:实体User和Order是OneToMany的关系,则实体User被删除时,其关联的实体Order也应该被全部删除</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@OneTyMany</span>(cascade=ALL)</span><br><span class="line"><span class="function"><span class="keyword">public</span> List <span class="title">getOrders</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> orders;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="OneToOne"><a href="#OneToOne" class="headerlink" title="@OneToOne"></a>@OneToOne</h4><p>描述一对一的关系</p><p>如User表和person表，一个是基本信息一个是详细信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@OneToOne</span>(fetch=FetchType.LAZY) <span class="comment">// Fetch是抓取策略，如果不写，自动的策略是LAZY</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Person <span class="title">getPerson</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> person;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ManyToMany"><a href="#ManyToMany" class="headerlink" title="@ManyToMany"></a>@ManyToMany</h4><p>@ManyToMany 描述一个多对多的关联.多对多关联上是两个一对多关联,但是在ManyToMany描述中,中间表是由ORM框架自动处理</p><h4 id="Embedded"><a href="#Embedded" class="headerlink" title="@Embedded"></a>@Embedded</h4><p>@Embedded将几个字段组合成一个类,并作为整个Entity的一个属性.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Embeddable</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Address</span> </span>&#123;city,street,zip&#125;</span><br><span class="line">    <span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Embedded</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Address <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>注解</th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>@Null</td><td>被注释的元素必须为 null</td></tr><tr><td>@NotNull</td><td>被注释的元素必须不为 null</td></tr><tr><td>@AssertTrue</td><td>被注释的元素必须为 true</td></tr><tr><td>@Min(value)</td><td>被注释的元素必须是一个数字，其值必须大于等于指定的最小值,同理@Max(value)</td></tr><tr><td>@DecimalMin(value)</td><td>被注释的元素必须是一个数字，其值必须大于等于指定的最小值，同理@DecimalMax(value)</td></tr><tr><td>@Size(max=, min=)</td><td>被注释的元素的大小必须在指定的范围内</td></tr><tr><td>@Past</td><td>被注释的元素必须是一个过去的日期，同理@Future</td></tr><tr><td>@Pattern(regex=,flag=)</td><td>符合正则</td></tr><tr><td>Hibernate Validator 附加的 constraint</td><td></td></tr><tr><td>@NotBlank(message =)</td><td>验证字符串非null，且长度必须大于0，message表示提示信息</td></tr><tr><td>@Email</td><td>邮箱验证</td></tr><tr><td>@Range(min=,max=,message=)</td><td>被注释的元素必须在合适的范围内</td></tr><tr><td></td><td></td></tr></tbody></table><h2 id="spring-boot-配置问题"><a href="#spring-boot-配置问题" class="headerlink" title="spring boot 配置问题"></a>spring boot 配置问题</h2><h3 id="spring2-0后静态资源访问不到的问题"><a href="#spring2-0后静态资源访问不到的问题" class="headerlink" title="spring2.0后静态资源访问不到的问题"></a>spring2.0后静态资源访问不到的问题</h3><p>需要手动写配置类进行静态资源配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加静态资源文件，外部可以直接访问地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> registry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addResourceHandler(<span class="string">"/static/**"</span>).addResourceLocations(<span class="string">"classpath:/static/"</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">"/templates/**"</span>).addResourceLocations(<span class="string">"classpath:/templates/"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置SpringBoot-Jpa默认mysql生成表引擎为InnoDB"><a href="#配置SpringBoot-Jpa默认mysql生成表引擎为InnoDB" class="headerlink" title="配置SpringBoot Jpa默认mysql生成表引擎为InnoDB"></a>配置<code>SpringBoot Jpa</code>默认<code>mysql</code>生成表引擎为<code>InnoDB</code></h3><p>在配置文件<code>appliction.properties</code>中加入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.jpa.database-platform=org.hibernate.dialect.MySQL5InnoDBDialect</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu系的IBUS输入法上方panel的输入法图标消失问题</title>
      <link href="/2018/12/29/2018-12-18-Pop!_Os%E7%9A%84Ibus%E8%BE%93%E5%85%A5%E6%B3%95%E4%B8%8A%E6%96%B9panel%E5%9B%BE%E6%A0%87%E6%B6%88%E5%A4%B1%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2018/12/29/2018-12-18-Pop!_Os%E7%9A%84Ibus%E8%BE%93%E5%85%A5%E6%B3%95%E4%B8%8A%E6%96%B9panel%E5%9B%BE%E6%A0%87%E6%B6%88%E5%A4%B1%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="Ubuntu系的IBUS输入法上方panel的输入法图标消失问题"><a href="#Ubuntu系的IBUS输入法上方panel的输入法图标消失问题" class="headerlink" title="Ubuntu系的IBUS输入法上方panel的输入法图标消失问题"></a>Ubuntu系的IBUS输入法上方panel的输入法图标消失问题</h1><p>最近迷上了Pop!_Os，基于Ubuntu的发行版，非常简洁，开箱即用。和ubuntu相同，ibus的输入法图标有时消失，在这里总结以下，方便后面再出现问题的时候查阅。</p><p>打开终端输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ibus-daemon -drx</span><br></pre></td></tr></table></figure><p>解决！！</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>String、StringBuffer、StringBuilder的区别和关系</title>
      <link href="/2018/11/09/2018-11-08-String%E5%92%8CStringBuffer%E5%92%8CStringBuilder%E7%9A%84%E8%81%94%E7%B3%BB%E5%92%8C%E5%8C%BA%E5%88%AB/"/>
      <url>/2018/11/09/2018-11-08-String%E5%92%8CStringBuffer%E5%92%8CStringBuilder%E7%9A%84%E8%81%94%E7%B3%BB%E5%92%8C%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h1 id="String、StringBuffer、StringBuilder的区别和关系"><a href="#String、StringBuffer、StringBuilder的区别和关系" class="headerlink" title="String、StringBuffer、StringBuilder的区别和关系"></a>String、StringBuffer、StringBuilder的区别和关系</h1><p><code>String</code>声明后是一个常量，而<code>Stringbuffer</code>和<code>StringBuilder</code>是数据结构是变量，所以比String在连接字符时效率高。</p><p>并且StringBuffer和StringBuilder的区别是StringBuffer是线程安全的(synchronized) ，而StringBuilder是非线程安全的，所以速度大致排行为：StringBuilder&gt;StringBuffer&gt;String</p><p>以上只是基于印象或者说是死记硬背的东西，没有看源码是否真的是这样的。下面就来看看String,StringBuilder,StringBuffer的源码来真正的记住。</p><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><p>String中的concat方法实现了字符串的拼接。</p><h3 id="实例变量"><a href="#实例变量" class="headerlink" title="实例变量"></a>实例变量</h3><p>String类中有两个实例变量，分别为value和hash</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** The value is used for character storage. */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">char</span> value[];</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Cache the hash code for the string */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> hash; <span class="comment">// Default to 0</span></span><br></pre></td></tr></table></figure><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><p>String的构造方法很多，但是都比较简单，下面来说比较常用的几种。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当新建一个String对象的时候，会默认付一个空的字符序列,请注意，由于字符串是不可变的，因此不必使用此构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = <span class="string">""</span>.value;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 这个构造方法,会默认新建一个值为original的字符串。同上，如果字符串不可变的，就没必要这样声明。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(String original)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = original.value;</span><br><span class="line">        <span class="keyword">this</span>.hash = original.hash;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 使用copyof方法用来复制一个新的字符数组，后续修改字符数组，不会影响到新建的字符串</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">char</span> value[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.value = Arrays.copyOf(value, value.length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="concat方法"><a href="#concat方法" class="headerlink" title="concat方法"></a>concat方法</h3><p>为什么说String的效率低，就体现在concat拼接字符串的时候每次都要返回一个新的String对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> String <span class="title">concat</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> otherLen = str.length();</span><br><span class="line">        <span class="keyword">if</span> (otherLen == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> len = value.length;</span><br><span class="line">        <span class="keyword">char</span> buf[] = Arrays.copyOf(value, len + otherLen);</span><br><span class="line">        str.getChars(buf, len);</span><br><span class="line"><span class="comment">// 返回一个新建的String对象</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(buf, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h2><p>StringBuilder继承了AbstractStringBuilder，其中的实例变量和String中的基本相同，</p><h3 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a>构造方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">StringBuilder</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(capacity);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 调用父类的构造方法</span></span><br><span class="line">AbstractStringBuilder(<span class="keyword">int</span> capacity) &#123;</span><br><span class="line">        value = <span class="keyword">new</span> <span class="keyword">char</span>[capacity];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="append方法"><a href="#append方法" class="headerlink" title="append方法"></a>append方法</h3><p>可以看到，并没有新建对象，只是在改变对象中的内容。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> StringBuilder <span class="title">append</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.append(str);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// append调用的还是父类的append方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AbstractStringBuilder <span class="title">append</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (str == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> appendNull();</span><br><span class="line">        <span class="keyword">int</span> len = str.length();</span><br><span class="line">        ensureCapacityInternal(count + len);</span><br><span class="line">        str.getChars(<span class="number">0</span>, len, value, count);</span><br><span class="line"><span class="comment">//把value扩容后再把str加进去</span></span><br><span class="line">        count += len;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="StringBuffer"><a href="#StringBuffer" class="headerlink" title="StringBuffer"></a>StringBuffer</h2><p>和StringBuilder一样，也是继承了AbstractStringBuilder类，但是看一个append这个方法的源码就能够知道有什么区别了</p><h3 id="append方法-1"><a href="#append方法-1" class="headerlink" title="append方法"></a>append方法</h3><p>添加了synchronized关键字，使得变为线程安全的，但是代价就是效率不如StringBuilder高。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> StringBuffer <span class="title">append</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">    toStringCache = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">super</span>.append(str);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于SpringMvc实现restFul时DELETE和PUT出现错误</title>
      <link href="/2018/11/09/2018-12-18-%E5%85%B3%E4%BA%8ESpringMvc%E4%BD%BF%E7%94%A8DELETE%E5%92%8CPUT%E8%AF%B7%E6%B1%82%E6%97%B6405%E9%94%99%E8%AF%AF/"/>
      <url>/2018/11/09/2018-12-18-%E5%85%B3%E4%BA%8ESpringMvc%E4%BD%BF%E7%94%A8DELETE%E5%92%8CPUT%E8%AF%B7%E6%B1%82%E6%97%B6405%E9%94%99%E8%AF%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="关于RESTful"><a href="#关于RESTful" class="headerlink" title="关于RESTful"></a>关于RESTful</h1><p>我理解的restful是一种风格，每一个url表示一个资源，一个资源不同的操作享用同一个接口，但是传输的状态是不同的，比如http中的POST,DELETE,PUT,GET。</p><h1 id="再springMVC中实现RESTful"><a href="#再springMVC中实现RESTful" class="headerlink" title="再springMVC中实现RESTful"></a>再springMVC中实现RESTful</h1><ol><li>web.xml中配置</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;filter&gt;</span><br><span class="line">        &lt;filter-name&gt;HiddenHttpMethodFilter&lt;/filter-name&gt;</span><br><span class="line">        &lt;filter-<span class="class"><span class="keyword">class</span>&gt;<span class="title">org</span>.<span class="title">springframework</span>.<span class="title">web</span>.<span class="title">filter</span>.<span class="title">HiddenHttpMethodFilter</span>&lt;/<span class="title">filter</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">filter</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">filter</span>-<span class="title">mapping</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">filter</span>-<span class="title">name</span>&gt;<span class="title">HiddenHttpMethodFilter</span>&lt;/<span class="title">filter</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">url</span>-<span class="title">pattern</span>&gt;/*&lt;/<span class="title">url</span>-<span class="title">pattern</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">filter</span>-<span class="title">mapping</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    &lt;<span class="title">filter</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">filter</span>-<span class="title">name</span>&gt;<span class="title">HttpMethodFilter</span>&lt;/<span class="title">filter</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">filter</span>-<span class="title">class</span>&gt;<span class="title">org</span>.<span class="title">springframework</span>.<span class="title">web</span>.<span class="title">filter</span>.<span class="title">HttpPutFormContentFilter</span>&lt;/<span class="title">filter</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">filter</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">filter</span>-<span class="title">mapping</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">filter</span>-<span class="title">name</span>&gt;<span class="title">HttpMethodFilter</span>&lt;/<span class="title">filter</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">url</span>-<span class="title">pattern</span>&gt;/*&lt;/<span class="title">url</span>-<span class="title">pattern</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">filter</span>-<span class="title">mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>springmvc control层使用相应状态码来标识。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/navbarCategory/&#123;id&#125;"</span>, method = RequestMethod.DELETE)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>消息中间件，RPC框架，数据库中间件的概念认知</title>
      <link href="/2018/10/30/2018-10-29-%E4%BB%80%E4%B9%88%E6%98%AF%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6%EF%BC%8CRPC%E6%A1%86%E6%9E%B6%EF%BC%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
      <url>/2018/10/30/2018-10-29-%E4%BB%80%E4%B9%88%E6%98%AF%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6%EF%BC%8CRPC%E6%A1%86%E6%9E%B6%EF%BC%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD%E9%97%B4%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="消息中间件，RPC框架，数据库中间件的概念认知"><a href="#消息中间件，RPC框架，数据库中间件的概念认知" class="headerlink" title="消息中间件，RPC框架，数据库中间件的概念认知"></a>消息中间件，RPC框架，数据库中间件的概念认知</h1><h2 id="消息中间件"><a href="#消息中间件" class="headerlink" title="消息中间件"></a>消息中间件</h2><h3 id="什么是消息中间件"><a href="#什么是消息中间件" class="headerlink" title="什么是消息中间件"></a>什么是消息中间件</h3><p>对中间件的理解大概就是具体业务和底层逻辑解耦的组件。相当于前端业务和底层逻辑的中间桥梁。</p><p>消息中间件是在分布式系统中发送和接受消息的基础服务设施。</p><h3 id="能够做什么？"><a href="#能够做什么？" class="headerlink" title="能够做什么？"></a>能够做什么？</h3><ul><li>业务解耦：交易系统不需要知道短信通知服务的存在，只需要发布消息</li><li>削峰填谷：比如上游系统的吞吐能力高于下游系统，在流量洪峰时可能会冲垮下游系统，消息中间件可以在峰值时堆积消息，而在峰值过去后下游系统慢慢消费消息解决流量洪峰的问题</li><li>事件驱动：系统与系统之间可以通过消息传递的形式驱动业务，以流式的模型处理</li></ul><h2 id="RPC框架"><a href="#RPC框架" class="headerlink" title="RPC框架"></a>RPC框架</h2><h3 id="什么是RPC框架"><a href="#什么是RPC框架" class="headerlink" title="什么是RPC框架"></a>什么是RPC框架</h3><p>远程过程调用协议RPC（Remote Procedure Call Protocol) 两台服务器A，B，一个应用部署在A服务器上，想要调用B服务器上应用提供的函数/方法，<br>由于不在一个内存空间，不能直接调用，需要通过网络来表达调用的语义和传达调用的数据。</p><h3 id="能够做什么？-1"><a href="#能够做什么？-1" class="headerlink" title="能够做什么？"></a>能够做什么？</h3><ul><li>建立客户端和服务器之间的TCP链接，不同的RPC协议，有不同的连接寻址方式。</li><li>在发起远程调用时，由于网络协议是二进制的，所以在传输前要进行对传输实体进行转换二进制的过程，也是就序列化过程（Serialize），通过寻址和二进制的数据传输到服务器端</li><li>在接受到数据后，需要进行反序列化过程解析二进制数据。</li></ul><p>其实就是解决在分布式下，横向拓展的前提下，不同服务器相互调用方法的问题。</p><h2 id="数据库中间件"><a href="#数据库中间件" class="headerlink" title="数据库中间件"></a>数据库中间件</h2><h3 id="什么是数据库中间件"><a href="#什么是数据库中间件" class="headerlink" title="什么是数据库中间件"></a>什么是数据库中间件</h3><p>同样在分布式的架构中，数据库也放到不同的服务器上，需要通过中间的路由进行调用。这个路由实际上就是数据库中间件。</p><h3 id="能够做什么？-2"><a href="#能够做什么？-2" class="headerlink" title="能够做什么？"></a>能够做什么？</h3><ul><li>实现读写分离，但是每个服务器上都需要有一份完整的数据库</li><li>实现分库分表，通过消息中间件进行查询分派到某一个特定的服务器上，通过这个服务器查询出内容返回到消息中间件，再通过中间件返回到客户端。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Junit的使用和源码分析</title>
      <link href="/2018/10/29/2018-10-28-Junit4/"/>
      <url>/2018/10/29/2018-10-28-Junit4/</url>
      
        <content type="html"><![CDATA[<h1 id="Junit的使用和源码分析"><a href="#Junit的使用和源码分析" class="headerlink" title="Junit的使用和源码分析"></a>Junit的使用和源码分析</h1><p>Junit是一个编写可重复测试的Java测试框架，代码编写非常有技巧性，值得反复阅读。</p><h2 id="跟着官方文档学习Junit"><a href="#跟着官方文档学习Junit" class="headerlink" title="跟着官方文档学习Junit"></a>跟着官方文档学习Junit</h2><p>官方文档往往是学习最好的资料。</p><h3 id="简单测试例子"><a href="#简单测试例子" class="headerlink" title="简单测试例子"></a>简单测试例子</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAdd</span><span class="params">()</span></span>&#123;</span><br><span class="line">        FirstTest firstTest = <span class="keyword">new</span> FirstTest();</span><br><span class="line">        <span class="keyword">int</span> result = firstTest.add(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">        <span class="comment">//  assertEquals(4,result); </span></span><br><span class="line">        assertEquals(<span class="number">3</span>,result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &lt;!--</span><br><span class="line">       - 如果判断不相等的时候，后台报错信息</span><br><span class="line">       - java.lang.AssertionError: </span><br><span class="line">       - Expected :<span class="number">4</span></span><br><span class="line">       - Actual   :<span class="number">3</span></span><br><span class="line">       - &lt;Click to see difference&gt;</span><br><span class="line">     --&gt;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这只是简单的例子，实际上的单元测试要比这个复杂的多，在实际应用上单元测试十分有必要，编写后台代码时能够尽快检验代码的正确性。</p><h3 id="Assertions-断言"><a href="#Assertions-断言" class="headerlink" title="Assertions 断言"></a>Assertions 断言</h3><p>Junit提供了所有基本数据类型，Object类和数组的断言，参数是 预期值后面是实际值，可选项，第一个参数可以是断言失败时输出的内容，与其他断言稍有不同的是，AssertThat的参数是 失败输出的内容，实际值和一个Matcher<br>Object。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AssertTests</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAssertArrayEquals</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">byte</span>[] expected = <span class="string">"trial"</span>.getBytes();</span><br><span class="line">    <span class="keyword">byte</span>[] actual = <span class="string">"trial"</span>.getBytes();</span><br><span class="line">    assertArrayEquals(<span class="string">"failure - byte arrays not same"</span>, expected, actual);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAssertEquals</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    assertEquals(<span class="string">"failure - strings are not equal"</span>, <span class="string">"text"</span>, <span class="string">"text"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAssertFalse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    assertFalse(<span class="string">"failure - should be false"</span>, <span class="keyword">false</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAssertNotNull</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    assertNotNull(<span class="string">"should not be null"</span>, <span class="keyword">new</span> Object());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAssertNotSame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    assertNotSame(<span class="string">"should not be same Object"</span>, <span class="keyword">new</span> Object(), <span class="keyword">new</span> Object());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAssertNull</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    assertNull(<span class="string">"should be null"</span>, <span class="keyword">null</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAssertSame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Integer aNumber = Integer.valueOf(<span class="number">768</span>);</span><br><span class="line">    assertSame(<span class="string">"should be same"</span>, aNumber, aNumber);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// JUnit Matchers assertThat</span></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAssertThatBothContainsString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    assertThat(<span class="string">"albumen"</span>, both(containsString(<span class="string">"a"</span>)).and(containsString(<span class="string">"b"</span>)));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAssertThatHasItems</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    assertThat(Arrays.asList(<span class="string">"one"</span>, <span class="string">"two"</span>, <span class="string">"three"</span>), hasItems(<span class="string">"one"</span>, <span class="string">"three"</span>));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAssertThatEveryItemContainsString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    assertThat(Arrays.asList(<span class="keyword">new</span> String[] &#123; <span class="string">"fun"</span>, <span class="string">"ban"</span>, <span class="string">"net"</span> &#125;), everyItem(containsString(<span class="string">"n"</span>)));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Core Hamcrest Matchers with assertThat</span></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAssertThatHamcrestCoreMatchers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    assertThat(<span class="string">"good"</span>, allOf(equalTo(<span class="string">"good"</span>), startsWith(<span class="string">"good"</span>)));</span><br><span class="line">    assertThat(<span class="string">"good"</span>, not(allOf(equalTo(<span class="string">"bad"</span>), equalTo(<span class="string">"good"</span>))));</span><br><span class="line">    assertThat(<span class="string">"good"</span>, anyOf(equalTo(<span class="string">"bad"</span>), equalTo(<span class="string">"good"</span>)));</span><br><span class="line">    assertThat(<span class="number">7</span>, not(CombinableMatcher.&lt;Integer&gt; either(equalTo(<span class="number">3</span>)).or(equalTo(<span class="number">4</span>))));</span><br><span class="line">    assertThat(<span class="keyword">new</span> Object(), not(sameInstance(<span class="keyword">new</span> Object())));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAssertTrue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    assertTrue(<span class="string">"failure - should be true"</span>, <span class="keyword">true</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="异常测试"><a href="#异常测试" class="headerlink" title="异常测试"></a>异常测试</h3><p>下面分为两种方式来完成对异常的测试</p><h4 id="期待的异常"><a href="#期待的异常" class="headerlink" title="期待的异常"></a>期待的异常</h4><p>如何检测程序是否如期的抛出异常，junit可以使用注解的参数来实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span>(expected = IndexOutOfBoundsException.class)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testException</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">new</span> ArrayList&lt;Integer&gt;().get(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="深入的异常"><a href="#深入的异常" class="headerlink" title="深入的异常"></a>深入的异常</h4><p>上述方法对于简单的情况很有用，但它有其局限性。例如，您无法在异常中测试消息的值，也无法在抛出异常后测试域对象的状态</p><ul><li>try/catch 语句</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTryCatch</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> ArrayList&lt;Integer&gt;().get(<span class="number">0</span>);</span><br><span class="line">        fail(<span class="string">"失败信息"</span>);</span><br><span class="line">    &#125;<span class="keyword">catch</span> (IndexOutOfBoundsException indexOutOfBoundsExecption)&#123;</span><br><span class="line">          assertThat(indexOutOfBoundsExecption.getMessage(), is(<span class="string">"Index: 0, Size: 0"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>rule 规则</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Rule</span></span><br><span class="line"><span class="keyword">public</span> ExpectedException thrown = ExpectedException.none();</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testExpectException</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;Object&gt; list = <span class="keyword">new</span> ArrayList&lt;Object&gt;();</span><br><span class="line">    thrown.expect(IndexOutOfBoundsException.class);</span><br><span class="line">    thrown.expectMessage(<span class="string">"Index: 0, Size: 0"</span>);</span><br><span class="line">    list.get(<span class="number">0</span>); <span class="comment">// execution will never get past this line</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Matchers-and-assertThat-匹配器和assertThat"><a href="#Matchers-and-assertThat-匹配器和assertThat" class="headerlink" title="Matchers and assertThat [ 匹配器和assertThat ]"></a>Matchers and assertThat [ 匹配器和assertThat ]</h3><p>新加入了<code>assertThat</code>断言机制 assertThat([value], [matcher statement]);</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">assertThat(x, is(<span class="number">3</span>));</span><br><span class="line">assertThat(x, is(not(<span class="number">4</span>)));</span><br><span class="line">assertThat(responseString, either(containsString(<span class="string">"color"</span>)).or(containsString(<span class="string">"colour"</span>)));</span><br><span class="line">assertThat(myList, hasItem(<span class="string">"3"</span>));</span><br></pre></td></tr></table></figure><p><code>assertThat</code> 更具有可读性和可输入性，并且有组合性，就像 <code>is(not(4))</code> 任何Machers都可以组合起来使用</p><p>以前的assertEquals等也是可以用的，<code>assertThat</code> 在使用Matchers的时候需要使用 <code>import static org.hamcrest.CoreMatchers.*;</code>来引用。里面的方法非常多。。</p><h2 id="junit源码跟读"><a href="#junit源码跟读" class="headerlink" title="junit源码跟读"></a>junit源码跟读</h2><h3 id="使用junit流程"><a href="#使用junit流程" class="headerlink" title="使用junit流程"></a>使用junit流程</h3><h4 id="使用继承自TestCase类"><a href="#使用继承自TestCase类" class="headerlink" title="使用继承自TestCase类"></a>使用继承自TestCase类</h4><p>下面通过运行junit的自带的test，源程序为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Some simple tests.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> fValue1;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> fValue2;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        fValue1 = <span class="number">2</span>;</span><br><span class="line">        fValue2 = <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Test <span class="title">suite</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">           * the type safe way</span></span><br><span class="line"><span class="comment">           *</span></span><br><span class="line"><span class="comment">          TestSuite suite= new TestSuite();</span></span><br><span class="line"><span class="comment">          suite.addTest(</span></span><br><span class="line"><span class="comment">              new SimpleTest("add") &#123;</span></span><br><span class="line"><span class="comment">                   protected void runTest() &#123; testAdd(); &#125;</span></span><br><span class="line"><span class="comment">              &#125;</span></span><br><span class="line"><span class="comment">          );</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">          suite.addTest(</span></span><br><span class="line"><span class="comment">              new SimpleTest("testDivideByZero") &#123;</span></span><br><span class="line"><span class="comment">                   protected void runTest() &#123; testDivideByZero(); &#125;</span></span><br><span class="line"><span class="comment">              &#125;</span></span><br><span class="line"><span class="comment">          );</span></span><br><span class="line"><span class="comment">          return suite;</span></span><br><span class="line"><span class="comment">          */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * the dynamic way</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TestSuite(SimpleTest.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAdd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> result = fValue1 + fValue2;</span><br><span class="line">        <span class="comment">// forced failure result == 5</span></span><br><span class="line">        assertTrue(result == <span class="number">6</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> unused;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDivideByZero</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> zero = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">8</span> / zero;</span><br><span class="line">        unused = result; <span class="comment">// avoid warning for not using result</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testEquals</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        assertEquals(<span class="number">12</span>, <span class="number">12</span>);</span><br><span class="line">        assertEquals(<span class="number">12L</span>, <span class="number">12L</span>);</span><br><span class="line">        assertEquals(<span class="keyword">new</span> Long(<span class="number">12</span>), <span class="keyword">new</span> Long(<span class="number">12</span>));</span><br><span class="line"></span><br><span class="line">        assertEquals(<span class="string">"Size"</span>, <span class="number">12</span>, <span class="number">13</span>);</span><br><span class="line">        assertEquals(<span class="string">"Capacity"</span>, <span class="number">12.0</span>, <span class="number">11.99</span>, <span class="number">0.0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        junit.textui.TestRunner.run(suite());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来看main方法，使用 <code>junit.textui.TestRunner.run(suite());</code> 使用TestRunner运行test。首先先来看suite方法，有两种方法</p><ol><li>静态的,需要手动在testSuite中添加test。</li><li>动态的，静态需要实现TestCase的runTest方法。而动态的只需要返回 TestSuite(SimpleTest.class);，下面来看这个TestSuite类</li></ol><p>testSuite实际上就是运行test的集合，使用vector来存储test,其中这里使用到的TestSuite构造方法是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TestSuite</span><span class="params">(<span class="keyword">final</span> Class&lt;?&gt; theClass)</span> </span>&#123;</span><br><span class="line">        addTestsFromTestCase(theClass);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addTestsFromTestCase</span><span class="params">(<span class="keyword">final</span> Class&lt;?&gt; theClass)</span> </span>&#123;</span><br><span class="line">        fName = theClass.getName();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            getTestConstructor(theClass); <span class="comment">// Avoid generating multiple error messages</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            addTest(warning(<span class="string">"Class "</span> + theClass.getName() + <span class="string">" has no public constructor TestCase(String name) or TestCase()"</span>));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// 这个类是否是public的 如果不是 发出warning ，并且fail(message)</span></span><br><span class="line">        <span class="keyword">if</span> (!Modifier.isPublic(theClass.getModifiers())) &#123;</span><br><span class="line">            addTest(warning(<span class="string">"Class "</span> + theClass.getName() + <span class="string">" is not public"</span>));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; superClass = theClass;</span><br><span class="line">        List&lt;String&gt; names = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"><span class="comment">//        这句话说明的是如果这个类是superClass的超类，或者接口就返回true，否则返回false</span></span><br><span class="line">        <span class="keyword">while</span> (Test.class.isAssignableFrom(superClass)) &#123;</span><br><span class="line"><span class="comment">//            如果是true  有顺序的返回声明的方法</span></span><br><span class="line">            <span class="keyword">for</span> (Method each : MethodSorter.getDeclaredMethods(superClass)) &#123;</span><br><span class="line">                addTestMethod(each, names, theClass);</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//            获得superclass类，递归的查找test方法</span></span><br><span class="line">            superClass = superClass.getSuperclass();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (fTests.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            addTest(warning(<span class="string">"No tests found in "</span> + theClass.getName()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>最后提到的 <code>fTests.size() == 0</code> 这里会发生warning 然后fail。这个fTests 已经再前面声明<br>了，声明方法是：<code>private Vector&lt;Test&gt; fTests = new Vector&lt;Test&gt;(10);</code> </p><p>在对每个声明的方法循环的时候，使用到 <code>addTestMethod</code> 方法，来对每个方法进行处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addTestMethod</span><span class="params">(Method m, List&lt;String&gt; names, Class&lt;?&gt; theClass)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 获得方法名如果list数组中已经包含这个方法名，就直接退出</span></span><br><span class="line">        String name = m.getName();</span><br><span class="line">        <span class="keyword">if</span> (names.contains(name)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!isPublicTestMethod(m)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isTestMethod(m)) &#123;</span><br><span class="line">                addTest(warning(<span class="string">"Test method isn't public: "</span> + m.getName() + <span class="string">"("</span> + theClass.getCanonicalName() + <span class="string">")"</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// 把这个方法名加入到names List中</span></span><br><span class="line">        names.add(name);</span><br><span class="line">        addTest(createTest(theClass, name));</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//再来看外层的addTest方法 把拥有的test方法放到fTests中。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addTest</span><span class="params">(Test test)</span> </span>&#123;</span><br><span class="line">        fTests.add(test);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>使用createTest来针对test方法创建一个Test类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">public</span> Test <span class="title">createTest</span><span class="params">(Class&lt;?&gt; theClass, String name)</span> </span>&#123;</span><br><span class="line">        Constructor&lt;?&gt; constructor;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            constructor = getTestConstructor(theClass);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> warning(<span class="string">"Class "</span> + theClass.getName() + <span class="string">" has no public constructor TestCase(String name) or TestCase()"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Object test;</span><br><span class="line"><span class="comment">// 通过反射方式获得方法的test实例</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (constructor.getParameterTypes().length == <span class="number">0</span>) &#123;</span><br><span class="line">                test = constructor.newInstance(<span class="keyword">new</span> Object[<span class="number">0</span>]);</span><br><span class="line">                <span class="keyword">if</span> (test <span class="keyword">instanceof</span> TestCase) &#123;</span><br><span class="line">                    ((TestCase) test).setName(name);<span class="comment">//如果继承TestCase</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                test = constructor.newInstance(<span class="keyword">new</span> Object[]&#123;name&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> (warning(<span class="string">"Cannot instantiate test case: "</span> + name + <span class="string">" ("</span> + Throwables.getStacktrace(e) + <span class="string">")"</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> (warning(<span class="string">"Exception in constructor: "</span> + name + <span class="string">" ("</span> + Throwables.getStacktrace(e.getTargetException()) + <span class="string">")"</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> (warning(<span class="string">"Cannot access test case: "</span> + name + <span class="string">" ("</span> + Throwables.getStacktrace(e) + <span class="string">")"</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (Test) test;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>经过以上的步骤获得了这个类中及其父类中的所有方法的Test。</p><p>使用testRunner.run运行test</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        junit.textui.TestRunner.run(suite());</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 使用TestRunner的run的静态方法 返回一个TestResult用来返回结果。   </span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">public</span> TestResult <span class="title">run</span><span class="params">(Test test)</span> </span>&#123;</span><br><span class="line">        TestRunner runner = <span class="keyword">new</span> TestRunner();</span><br><span class="line">        <span class="keyword">return</span> runner.doRun(test);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 调用runner的doRun方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> TestResult <span class="title">doRun</span><span class="params">(Test test)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> doRun(test, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> TestResult <span class="title">doRun</span><span class="params">(Test suite, <span class="keyword">boolean</span> wait)</span> </span>&#123;</span><br><span class="line"><span class="comment">//      用来返回结果的TestResult</span></span><br><span class="line">        TestResult result = createTestResult();</span><br><span class="line"><span class="comment">// 注册一个TestListener</span></span><br><span class="line">        result.addListener(fPrinter);</span><br><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line"><span class="comment">//      test.run方法</span></span><br><span class="line">        suite.run(result);</span><br><span class="line">        <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">long</span> runTime = endTime - startTime;</span><br><span class="line">        fPrinter.print(result, runTime);</span><br><span class="line">        pause(wait);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>运行Test的核心方法 返回TestResult返回结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Creates the TestResult to be used for the test run.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> TestResult <span class="title">createTestResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> TestResult();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">addListener</span><span class="params">(TestListener listener)</span> </span>&#123;</span><br><span class="line"><span class="comment">// protected List&lt;TestListener&gt; fListeners;</span></span><br><span class="line">        fListeners.add(listener);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// suite.run() fTests中的每一个test </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(TestResult result)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Test each : fTests) &#123;</span><br><span class="line">            <span class="keyword">if</span> (result.shouldStop()) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            runTest(each, result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Runs the test case and collects the results in TestResult.</span></span><br><span class="line"><span class="comment"> * 调用testResult的run方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(TestResult result)</span> </span>&#123;</span><br><span class="line">    result.run(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 运行test</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(<span class="keyword">final</span> TestCase test)</span> </span>&#123;</span><br><span class="line">        startTest(test);</span><br><span class="line">        Protectable p = <span class="keyword">new</span> Protectable() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">protect</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                test.runBare();<span class="comment">//执行runBare方法执行test用例</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        runProtected(test, p);</span><br><span class="line"></span><br><span class="line">        endTest(test);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startTest</span><span class="params">(Test test)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> count = test.countTestCases();</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            fRunTests += count;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (TestListener each : cloneListeners()) &#123;</span><br><span class="line">            each.startTest(test);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在resultPriter中使用继承TestListener中的startTest方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startTest</span><span class="params">(Test test)</span> </span>&#123;</span><br><span class="line">        getWriter().print(<span class="string">"."</span>);<span class="comment">//运行一个则加一个点</span></span><br><span class="line">        <span class="keyword">if</span> (fColumn++ &gt;= <span class="number">40</span>) &#123;</span><br><span class="line">            getWriter().println();</span><br><span class="line">            fColumn = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行一个空的测试序列</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">runBare</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        Throwable exception = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">// 设置装置。比如打开网络连接等，在执行测试之前调用方法。</span></span><br><span class="line">        setUp();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 看下面的runTest方法 </span></span><br><span class="line">            runTest();<span class="comment">//执行test</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable running) &#123;</span><br><span class="line">            exception = running;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                tearDown();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable tearingDown) &#123;</span><br><span class="line">                <span class="keyword">if</span> (exception == <span class="keyword">null</span>) exception = tearingDown;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (exception != <span class="keyword">null</span>) <span class="keyword">throw</span> exception;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">runTest</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        assertNotNull(<span class="string">"TestCase.fName cannot be null"</span>, fName); <span class="comment">// Some VMs crash when calling getMethod(null,null);</span></span><br><span class="line">        Method runMethod = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            runMethod = getClass().getMethod(fName, (Class[]) <span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            fail(<span class="string">"Method \""</span> + fName + <span class="string">"\" not found"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// .......... runMethod.invoke(this); 执行方法</span></span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">            runMethod.invoke(<span class="keyword">this</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">        <span class="comment">// 如果方法执行错误，会触发这个异常 会连续被上层捕捉到</span></span><br><span class="line">            e.fillInStackTrace();</span><br><span class="line">            <span class="keyword">throw</span> e.getTargetException();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.fillInStackTrace();</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>如果测试失败，则最终将被runProtected中的try/catch捕捉到后输出错误信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">runProtected</span><span class="params">(<span class="keyword">final</span> Test test, Protectable p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        p.protect();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (AssertionFailedError e) &#123;</span><br><span class="line">    <span class="comment">// 验证失败，添加一条失败信息</span></span><br><span class="line">        addFailure(test, e);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ThreadDeath e) &#123; <span class="comment">// don't catch ThreadDeath by accident</span></span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">        addError(test, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过以上的步骤执行完一个test。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中Deque和ArrayDeque</title>
      <link href="/2018/10/26/2018-10-24-Java%E4%B8%ADDeque%E5%8F%8A%E5%85%B6%E5%AD%90%E7%B1%BB/"/>
      <url>/2018/10/26/2018-10-24-Java%E4%B8%ADDeque%E5%8F%8A%E5%85%B6%E5%AD%90%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="Java中Deque和ArrayDeque"><a href="#Java中Deque和ArrayDeque" class="headerlink" title="Java中Deque和ArrayDeque"></a>Java中Deque和ArrayDeque</h1><h2 id="Deque类"><a href="#Deque类" class="headerlink" title="Deque类"></a>Deque类</h2><p>一个线性的可在双端插入、删除节点的结构。他名字时Deque，实际上时“double ended queue”的简写；</p><h2 id="ArrayDeque类"><a href="#ArrayDeque类" class="headerlink" title="ArrayDeque类"></a>ArrayDeque类</h2><p>对于ArrayDeque中的数组，它是一个逻辑上的循环数组，所谓循环是指元素到数组尾之后可以接着从数组头开始，数组的长度、第一个和最后一个元素都与head和tail这两个变量有关</p><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><p>ArrayDeque就像他的名字一样，使用Array数组来实现Deque结构。构造方法和以前提到的ArrayList相似。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayDeque</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 初始化的数组大小是16</span></span><br><span class="line">        elements = <span class="keyword">new</span> Object[<span class="number">16</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayDeque</span><span class="params">(<span class="keyword">int</span> numElements)</span> </span>&#123;</span><br><span class="line">        allocateElements(numElements);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayDeque</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">        allocateElements(c.size());</span><br><span class="line">        <span class="comment">// addAll方法就是为c 进行for循环添加</span></span><br><span class="line">        addAll(c);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="添加和移除方法"><a href="#添加和移除方法" class="headerlink" title="添加和移除方法"></a>添加和移除方法</h3><ul><li>add方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在前面添加元素，也就是在数组的第一个位置上加元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (e == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">            <span class="comment">// 在前面添加的时候，head-1 的位置上插入 e</span></span><br><span class="line">        elements[head = (head - <span class="number">1</span>) &amp; (elements.length - <span class="number">1</span>)] = e;</span><br><span class="line">        <span class="keyword">if</span> (head == tail)</span><br><span class="line">            doubleCapacity();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (e == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">            添加到下一个位置</span><br><span class="line">        elements[tail] = e;</span><br><span class="line">        <span class="comment">/* </span></span><br><span class="line"><span class="comment">         * 如果当前添加位置的下一个位置 与上 长度-1 </span></span><br><span class="line"><span class="comment">         *（因为长度都是2的倍数，所以-1之后，2进制后几位都是1，保证负数的时候也能够找到正确的索引）</span></span><br><span class="line"><span class="comment">         * 如果tail和head相等说明数组满了，需要扩容</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> ( (tail = (tail + <span class="number">1</span>) &amp; (elements.length - <span class="number">1</span>)) == head)</span><br><span class="line">            doubleCapacity();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>有了这两种方法，队列或者栈的方法都可以轻松实现了。</p><p>在进行增加元素的时候涉及到 <code>doubleCapacity</code> 这个方法，这个方法主要用来扩充数组的容量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doubleCapacity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">assert</span> head == tail;</span><br><span class="line">        <span class="keyword">int</span> p = head;</span><br><span class="line">        <span class="keyword">int</span> n = elements.length;</span><br><span class="line">        <span class="keyword">int</span> r = n - p; <span class="comment">// head右边元素的个数</span></span><br><span class="line">        <span class="keyword">int</span> newCapacity = n &lt;&lt; <span class="number">1</span>; <span class="comment">// 扩充为原来的2倍</span></span><br><span class="line">        <span class="keyword">if</span> (newCapacity &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Sorry, deque too big"</span>);</span><br><span class="line">        Object[] a = <span class="keyword">new</span> Object[newCapacity]; <span class="comment">//创建新数组</span></span><br><span class="line">        Systkkem.arraycopy(elements, p, a, <span class="number">0</span>, r); </span><br><span class="line">        System.arraycopy(elements, <span class="number">0</span>, a, r, p);<span class="comment">// 两部copy数组相当于从 head -&gt; tail 重新排序了</span></span><br><span class="line">        elements = a;</span><br><span class="line">        head = <span class="number">0</span>;</span><br><span class="line">        tail = n;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>remove方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> removeFirst();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">removeFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        E x = pollFirst();</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">pollFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> h = head;</span><br><span class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">        E result = (E) elements[h];</span><br><span class="line">        <span class="comment">// Element is null if deque empty</span></span><br><span class="line">        <span class="keyword">if</span> (result == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        elements[h] = <span class="keyword">null</span>;     <span class="comment">// Must null out slot</span></span><br><span class="line">        <span class="comment">// 把element的头部位置置空后，将head向前移</span></span><br><span class="line">        head = (h + <span class="number">1</span>) &amp; (elements.length - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>toArray方法</li></ul><p>toArray方法主要是方便输出。用来真正的按照逻辑顺序，进行物理重排，实现方法和doubleCapacity实现相同。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object[] toArray() &#123;</span><br><span class="line">        <span class="keyword">return</span> copyElements(<span class="keyword">new</span> Object[size()]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> &lt;T&gt; T[] copyElements(T[] a) &#123;</span><br><span class="line">        <span class="keyword">if</span> (head &lt; tail) &#123;</span><br><span class="line">         <span class="comment">// 如果顺序正常</span></span><br><span class="line">            System.arraycopy(elements, head, a, <span class="number">0</span>, size());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (head &gt; tail) &#123;</span><br><span class="line">         <span class="comment">// 否则将head右侧的先copy到数组中，在copy剩下的</span></span><br><span class="line">            <span class="keyword">int</span> headPortionLen = elements.length - head;</span><br><span class="line">            System.arraycopy(elements, head, a, <span class="number">0</span>, headPortionLen);</span><br><span class="line">            System.arraycopy(elements, <span class="number">0</span>, a, headPortionLen, tail);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ul><li>size方法</li></ul><p>和很多数据结构类不同的是，他的size并不是依靠本身的变量字段进行维护，而是通过size方法计算而来。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> (tail - head) &amp; (elements.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>总结一下，ArrayDeque实现了双端队列的特点，能够完成栈和队列的功能，效率比同样继承Deque的LinkedList效率高，因为在ArrayDeque中的计算大部分为位运算。ArrayDeque逻辑上循环的数组，但实际上并不是。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的栈和队列</title>
      <link href="/2018/10/18/2018-10-17-Java%E4%B8%AD%E7%9A%84%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/"/>
      <url>/2018/10/18/2018-10-17-Java%E4%B8%AD%E7%9A%84%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<!-- vim-markdown-toc GFM --><ul><li><a href="#java中的栈和队列">java中的栈和队列</a><ul><li><a href="#stack-栈">Stack 栈</a><ul><li><a href="#push方法和pop方法">push方法和pop方法</a></li><li><a href="#peek方法">peek方法</a></li></ul></li><li><a href="#queue-队列">Queue 队列</a><ul><li><a href="#offer-方法和-pull方法">offer 方法和 pull方法</a></li><li><a href="#add方法和remove方法">add方法和remove方法</a></li></ul></li></ul></li></ul><!-- vim-markdown-toc --><h1 id="java中的栈和队列"><a href="#java中的栈和队列" class="headerlink" title="java中的栈和队列"></a>java中的栈和队列</h1><h2 id="Stack-栈"><a href="#Stack-栈" class="headerlink" title="Stack 栈"></a>Stack 栈</h2><p>栈是一个后进先出的数据结构，有这样的数据结构功能的还有Dequ类，推荐使用Dequ</p><h3 id="push方法和pop方法"><a href="#push方法和pop方法" class="headerlink" title="push方法和pop方法"></a>push方法和pop方法</h3><p>push方法是向栈顶放值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">push</span><span class="params">(E item)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 这里调用父类Vector的addElement方法</span></span><br><span class="line">        addElement(item);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> item;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// addElement方法是加锁的方法 调用element实际上就是数组长度加一并且在该问之上付值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">addElement</span><span class="params">(E obj)</span> </span>&#123;</span><br><span class="line">        modCount++;</span><br><span class="line">        ensureCapacityHelper(elementCount + <span class="number">1</span>);</span><br><span class="line">        elementData[elementCount++] = obj;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>pop方法是在将栈顶的值出栈</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 同样加锁的方法 调用方法 移除在数组最后位置的元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> E <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        E       obj;</span><br><span class="line">        <span class="keyword">int</span>     len = size();</span><br><span class="line"></span><br><span class="line">        obj = peek();</span><br><span class="line">        removeElementAt(len - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="peek方法"><a href="#peek方法" class="headerlink" title="peek方法"></a>peek方法</h3><p>peek方法是看一下栈顶元素的值，但不做任何操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> E <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>     len = size();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (len == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> EmptyStackException();</span><br><span class="line">        <span class="keyword">return</span> elementAt(len - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这几个方法和linkedList类中的对应的方法非常像，所以其实LindedList也可以当作栈用。</p><h2 id="Queue-队列"><a href="#Queue-队列" class="headerlink" title="Queue 队列"></a>Queue 队列</h2><p>队列和栈相反，是一个先进后出的数据结构，想成现实中的排队再明白不过了。</p><h3 id="offer-方法和-pull方法"><a href="#offer-方法和-pull方法" class="headerlink" title="offer 方法和 pull方法"></a>offer 方法和 pull方法</h3><p>offer方法可以将元素放入队列当中，pull可以将元素从头部移除。</p><h3 id="add方法和remove方法"><a href="#add方法和remove方法" class="headerlink" title="add方法和remove方法"></a>add方法和remove方法</h3><p>add和remove方法分别调用offer和pull方法，不同的是，如果队列满了，add方法会抛出异常，而offer方法会返回null。如果队列空了，remove方法会抛出异常，而pull方法会返回null。</p><p>以后会提及队列的实现类以及Dequ相关类。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Enum枚举类分析和相关拓展</title>
      <link href="/2018/10/16/2018-10-15-Enum%E7%B1%BB%E5%8F%8A%E7%9B%B8%E5%85%B3%E6%8B%93%E5%B1%95/"/>
      <url>/2018/10/16/2018-10-15-Enum%E7%B1%BB%E5%8F%8A%E7%9B%B8%E5%85%B3%E6%8B%93%E5%B1%95/</url>
      
        <content type="html"><![CDATA[<h1 id="Enum枚举类分析和相关拓展"><a href="#Enum枚举类分析和相关拓展" class="headerlink" title="Enum枚举类分析和相关拓展"></a>Enum枚举类分析和相关拓展</h1><p>其实我认为使用枚举类就是对使用常量的扩充，例如类中使用类型，分类相同的类变量的时候，可以考虑使用枚举类来替换掉。</p><p>参考了网上的文章，大致有两个好处，第一是确定传入的参数类型。而不是形参是int类型，随便一个int类型就能够满足。第二是对比static静态变量更能够确定变量的意义。下面举一个例子来看。</p><h2 id="Enum类实例"><a href="#Enum类实例" class="headerlink" title="Enum类实例"></a>Enum类实例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 列举简单的行驶工具 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> trafficTool &#123;</span><br><span class="line">    BIKE,CAR,BUS,TRAIN,AIRPLANE</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TrafficToolTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">chooseTool</span><span class="params">(TrafficTool trafficTool)</span></span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (trafficTool)&#123;</span><br><span class="line">            <span class="keyword">case</span> BIKE:</span><br><span class="line">                System.out.println(<span class="string">"自行车"</span>);<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> CAR:</span><br><span class="line">                System.out.println(<span class="string">"汽车"</span>);<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TrafficToolTest trafficToolTest = <span class="keyword">new</span> TrafficToolTest();</span><br><span class="line">        trafficToolTest.chooseTool(TrafficTool.BIKE);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>和普通的类一样，同样也可以添加构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">SPRING(<span class="string">"春天"</span>),SUMMER(<span class="string">"夏天"</span>),FALL(<span class="string">"秋天"</span>),WINTER(<span class="string">"冬天"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line"></span><br><span class="line">SeasonEnum(String name)&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以继承</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> SeasonEnum &#123;</span><br><span class="line">    SPRING(<span class="string">"春天"</span>) &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">comm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"这是春天"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,SUMMER(<span class="string">"夏天"</span>) &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">comm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"这是夏天"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,FALL(<span class="string">"秋天"</span>) &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">comm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"这是冬天"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,WINTER(<span class="string">"冬天"</span>) &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">comm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"这是冬天"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line"></span><br><span class="line">    SeasonEnum(String name)&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">comm</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上是枚举类的基本使用。</p><h2 id="EnumMap-和-EnumSet"><a href="#EnumMap-和-EnumSet" class="headerlink" title="EnumMap 和 EnumSet"></a><code>EnumMap</code> 和 <code>EnumSet</code></h2><p><code>public class EnumMap&lt;K extends Enum&lt;K&gt;, V&gt; extends AbstractMap&lt;K, V&gt;</code> 这是关于EnumMap的继承关系。<br>可以发现这是key为枚举类的一个Map。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 简单创建，以后就可以实现枚举类的多种复用 */</span></span><br><span class="line">EnumMap&lt;SeasonEnum,Integer&gt; enumIntegerEnumMap = <span class="keyword">new</span> EnumMap&lt;SeasonEnum, Integer&gt;(SeasonEnum.class);</span><br><span class="line">Set&lt;SeasonEnum&gt; set = enumIntegerEnumMap.keySet();</span><br><span class="line">enumIntegerEnumMap.put(SeasonEnum.SPRING,<span class="number">1</span>);</span><br><span class="line">System.out.println(enumIntegerEnumMap.get(SeasonEnum.SPRING));</span><br></pre></td></tr></table></figure><p><code>EnumSet</code> 相对于 <code>EnumMap</code> 等同于 <code>hashSet</code> 相对于 <code>HashMap</code> 的存在，很好理解。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HashSet和HashTable的的源码分析</title>
      <link href="/2018/10/16/2018-10-15-HashSet%E5%92%8CHashTable%E7%9A%84%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
      <url>/2018/10/16/2018-10-15-HashSet%E5%92%8CHashTable%E7%9A%84%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<!-- TOC depthFrom:1 depthTo:6 withLinks:1 updateOnSave:1 orderedList:0 --><ul><li><a href="#hashset和hashtable的的源码分析">HashSet和HashTable的的源码分析</a><ul><li><a href="#hashset">HashSet</a><ul><li><a href="#hashset结构源码">HashSet结构源码</a></li><li><a href="#hashset的基本方法">HashSet的基本方法</a></li><li><a href="#hashset的iterator和contains方法">HashSet的Iterator和contains方法</a></li></ul></li><li><a href="#hashtable">HashTable</a></li></ul></li></ul><!-- /TOC --><h1 id="HashSet和HashTable的的源码分析"><a href="#HashSet和HashTable的的源码分析" class="headerlink" title="HashSet和HashTable的的源码分析"></a>HashSet和HashTable的的源码分析</h1><h2 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h2><p>HashSet其实就是使用HashMap来实现的，方法都是依靠Hash Map的方法。如hashSet构造，hashSet的添加等操作。这样能够实现hashset去重。因为hashMap的key不能重复。这样就能看上篇，当hashMap遇到key值重复的处理。</p><h3 id="HashSet结构源码"><a href="#HashSet结构源码" class="headerlink" title="HashSet结构源码"></a>HashSet结构源码</h3><p>HashSet的结构就相当于HashMap只将key值put进去，但是Value值却为空的new Object。可以看作为只有key的HashMap.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 可以看到hashSet的这几个构造方法和HashMap息息相关 */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> HashMap&lt;E,Object&gt; map;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashSet</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">    map = <span class="keyword">new</span> HashMap&lt;&gt;(Math.max((<span class="keyword">int</span>) (c.size()/.<span class="number">75f</span>) + <span class="number">1</span>, <span class="number">16</span>));</span><br><span class="line">    addAll(c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashSet</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</span><br><span class="line">    map = <span class="keyword">new</span> HashMap&lt;&gt;(initialCapacity, loadFactor);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashSet</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">    map = <span class="keyword">new</span> HashMap&lt;&gt;(initialCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">HashSet(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor, <span class="keyword">boolean</span> dummy) &#123;</span><br><span class="line">    map = <span class="keyword">new</span> LinkedHashMap&lt;&gt;(initialCapacity, loadFactor);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HashSet的基本方法"><a href="#HashSet的基本方法" class="headerlink" title="HashSet的基本方法"></a>HashSet的基本方法</h3><p>add和remove和size等基本方法都是调用HashMap的</p><p>如add方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">  <span class="comment">/* 这里的PRESENT等于new Object() */</span></span><br><span class="line">       <span class="keyword">return</span> map.put(e, PRESENT)==<span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="HashSet的Iterator和contains方法"><a href="#HashSet的Iterator和contains方法" class="headerlink" title="HashSet的Iterator和contains方法"></a>HashSet的Iterator和contains方法</h3><p>同样的也是调用的HashMap的基本方法，但是需要先得到Map的keySet集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> map.keySet().iterator();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> map.containsKey(o);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="HashTable"><a href="#HashTable" class="headerlink" title="HashTable"></a>HashTable</h2><p>首先HashTable和HashMap的结构类似。但是有最重要的区别就是HashTable是synchronized的，也就是线程安全的。在他的基本方法前都有synchronized锁所限制。</p><p>结构就不看了，只看一个Put方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/* 其实大致和HashMap是类似的也是使用Entry作为基本结构 */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">     <span class="comment">// Make sure the value is not null</span></span><br><span class="line">     <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">// Makes sure the key is not already in the hashtable.</span></span><br><span class="line">     Entry&lt;?,?&gt; tab[] = table;</span><br><span class="line">     <span class="keyword">int</span> hash = key.hashCode();</span><br><span class="line">     <span class="comment">/* 这里的0x7FFFFFFF 是32-bit的int的最大值 */</span></span><br><span class="line">     <span class="keyword">int</span> index = (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;</span><br><span class="line">     <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">     Entry&lt;K,V&gt; entry = (Entry&lt;K,V&gt;)tab[index];</span><br><span class="line">     <span class="comment">/* 如果这个entry存在，也就是键值重复 */</span></span><br><span class="line">     <span class="keyword">for</span>(; entry != <span class="keyword">null</span> ; entry = entry.next) &#123;</span><br><span class="line">         <span class="keyword">if</span> ((entry.hash == hash) &amp;&amp; entry.key.equals(key)) &#123;</span><br><span class="line">             V old = entry.value;</span><br><span class="line">             entry.value = value;</span><br><span class="line">             <span class="keyword">return</span> old;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">    <span class="comment">/* 否则添加Entry节点 */</span></span><br><span class="line">     addEntry(hash, key, value, index);</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addEntry</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    modCount++;</span><br><span class="line"></span><br><span class="line">    Entry&lt;?,?&gt; tab[] = table;</span><br><span class="line">    <span class="keyword">if</span> (count &gt;= threshold) &#123;</span><br><span class="line">      <span class="comment">/* 如果当前count大于阈值的大小 重新生成table size和hash值 */</span></span><br><span class="line">        <span class="comment">// Rehash the table if the threshold is exceeded</span></span><br><span class="line">        rehash();</span><br><span class="line"></span><br><span class="line">        tab = table;</span><br><span class="line">        hash = key.hashCode();</span><br><span class="line">        index = (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Creates the new entry.</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    Entry&lt;K,V&gt; e = (Entry&lt;K,V&gt;) tab[index];</span><br><span class="line">    tab[index] = <span class="keyword">new</span> Entry&lt;&gt;(hash, key, value, e);</span><br><span class="line">    count++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过上面的代码可以看出HashTable和HashMap的结构还是有差异的，HashMap是纵向的列表当出现相同的hash值的时候，扩展出横向列表，当横向的列表到达一定的长度的时候，这个横向的链表就会自动整理成红黑树的形式，而hashTable不存在横向的这种结构的，当count&gt;=阈值的时候就会把Hash重置，使之不会出现hash值重复的情况。可以说hashTable比较hashMap的结构更简单，但是效率会比HashMap的低。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HashMap的源码查看</title>
      <link href="/2018/10/11/2018-10-10-hashmap%E7%9A%84%E6%BA%90%E7%A0%81%E6%9F%A5%E7%9C%8B/"/>
      <url>/2018/10/11/2018-10-10-hashmap%E7%9A%84%E6%BA%90%E7%A0%81%E6%9F%A5%E7%9C%8B/</url>
      
        <content type="html"><![CDATA[<!-- TOC depthFrom:1 depthTo:6 withLinks:1 updateOnSave:1 orderedList:0 --><ul><li><a href="#hashmap的源码查看">HashMap的源码查看</a><ul><li><a href="#hashmap结构源码">HashMap结构源码</a><ul><li><a href="#基本属性">基本属性</a></li><li><a href="#依赖的数据结构">依赖的数据结构</a><ul><li><a href="#node节点">Node节点</a></li></ul></li><li><a href="#hashmap的三个构造方法">hashMap的三个构造方法</a></li></ul></li><li><a href="#hashmap的方法源码">hashMap的方法源码</a><ul><li><a href="#put方法">put方法</a><ul><li><a href="#在看get方法之前先看和put方法息息相关的resize方法">在看get方法之前先看和put方法息息相关的resize方法</a></li></ul></li><li><a href="#get方法">get方法</a></li><li><a href="#remove方法">remove方法</a></li><li><a href="#keyset方法">keySet方法</a></li></ul></li></ul></li></ul><!-- /TOC --><h1 id="HashMap的源码查看"><a href="#HashMap的源码查看" class="headerlink" title="HashMap的源码查看"></a>HashMap的源码查看</h1><h2 id="HashMap结构源码"><a href="#HashMap结构源码" class="headerlink" title="HashMap结构源码"></a>HashMap结构源码</h2><h3 id="基本属性"><a href="#基本属性" class="headerlink" title="基本属性"></a>基本属性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/* 实际上结构就是一个node数组 */</span></span><br><span class="line"> <span class="keyword">transient</span> Node&lt;K,V&gt;[] table;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Holds cached entrySet(). Note that AbstractMap fields are used</span></span><br><span class="line"><span class="comment">  * for keySet() and values().</span></span><br><span class="line"><span class="comment">  * 得到entryset</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">transient</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * The number of key-value mappings contained in this map.</span></span><br><span class="line"><span class="comment">    map的大小</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">transient</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 操作次数 */</span></span><br><span class="line"> <span class="keyword">transient</span> <span class="keyword">int</span> modCount;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/* 临界值，如果超过临界值就会自动扩充数组 */</span></span><br><span class="line"> <span class="keyword">int</span> threshold;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/* 加载因子  */</span></span><br><span class="line"> <span class="keyword">final</span> <span class="keyword">float</span> loadFactor;</span><br></pre></td></tr></table></figure><h3 id="依赖的数据结构"><a href="#依赖的数据结构" class="headerlink" title="依赖的数据结构"></a>依赖的数据结构</h3><h4 id="Node节点"><a href="#Node节点" class="headerlink" title="Node节点"></a>Node节点</h4><p>首先看到hashmap中的node类继承了map.Entry&lt;k,v&gt;结构，有类型为K的key和类型为V的value；其次node是一个链表结构。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> hash;</span><br><span class="line">        <span class="keyword">final</span> K key;</span><br><span class="line">        V value;</span><br><span class="line">        Node&lt;K,V&gt; next;</span><br><span class="line"><span class="comment">/* node的构造方法 */</span></span><br><span class="line">        Node(<span class="keyword">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">            <span class="keyword">this</span>.hash = hash;</span><br><span class="line">            <span class="keyword">this</span>.key = key;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> K <span class="title">getKey</span><span class="params">()</span>        </span>&#123; <span class="keyword">return</span> key; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">getValue</span><span class="params">()</span>      </span>&#123; <span class="keyword">return</span> value; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> key + <span class="string">"="</span> + value; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Objects.hashCode(key) ^ Objects.hashCode(value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">setValue</span><span class="params">(V newValue)</span> </span>&#123;</span><br><span class="line">            V oldValue = value;</span><br><span class="line">            value = newValue;</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (o == <span class="keyword">this</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Map.Entry) &#123;</span><br><span class="line">                Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;)o;</span><br><span class="line">                <span class="keyword">if</span> (Objects.equals(key, e.getKey()) &amp;&amp;</span><br><span class="line">                    Objects.equals(value, e.getValue()))</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="hashMap的三个构造方法"><a href="#hashMap的三个构造方法" class="headerlink" title="hashMap的三个构造方法"></a>hashMap的三个构造方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 第一个参数 是默认的初始化阈值大小，第二个是加载因子大小 */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">    <span class="comment">/* 如果制定的初始化阈值小于0 */</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal initial capacity: "</span> +</span><br><span class="line">                                           initialCapacity);</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">        initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line">    <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal load factor: "</span> +</span><br><span class="line">                                           loadFactor);</span><br><span class="line">    <span class="keyword">this</span>.loadFactor = loadFactor;</span><br><span class="line">    <span class="keyword">this</span>.threshold = tableSizeFor(initialCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使用this调用上面的方法 */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用默认的阈值和因子，大小分别为16和0.75</span></span><br><span class="line"><span class="comment"> * Constructs an empty &lt;tt&gt;HashMap&lt;/tt&gt; with the default initial capacity</span></span><br><span class="line"><span class="comment"> * (16) and the default load factor (0.75).</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR; <span class="comment">// all other fields defaulted</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="hashMap的方法源码"><a href="#hashMap的方法源码" class="headerlink" title="hashMap的方法源码"></a>hashMap的方法源码</h2><p>hashMap中最重要的当然是put和get方法了，就要先从这两个最重要的方法入手。</p><h3 id="put方法"><a href="#put方法" class="headerlink" title="put方法"></a>put方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">  <span class="comment">/* 调用putVal方法 */</span></span><br><span class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Implements Map.put and related methods</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> hash hash for key key的hash码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key the key key值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value the value to put value值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> onlyIfAbsent if true, don't change existing value 如果是true 不改变当前值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> evict if false, the table is in creation mode. 如果是false，那么table就属于创建模式 （？）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> previous value, or null if none</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent,</span></span></span><br><span class="line"><span class="function"><span class="params">               <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, i;</span><br><span class="line">    <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">    <span class="comment">/* 当Map为空的时候  这时候tab为16也就是n为16*/</span></span><br><span class="line">    <span class="comment">/* 这是当map中的内容为空的时候</span></span><br><span class="line"><span class="comment">     * newCap = DEFAULT_INITIAL_CAPACITY;</span></span><br><span class="line"><span class="comment">     * newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">        n = (tab = resize()).length;</span><br><span class="line">        <span class="comment">/* 如果当前tab的length&amp;hash值再tab列表中不重复 */</span></span><br><span class="line">    <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)</span><br><span class="line">    <span class="comment">/* 新建一个noede 再tab[i]的位置上 */</span></span><br><span class="line">        tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt; e; K k;</span><br><span class="line">        <span class="comment">/* 当添加重复的key的时候 这时候hash和key的值都相等，就相当于不添加 */</span></span><br><span class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">            ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            e = p;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">        <span class="comment">/* 如果e是treeNode的时候  */</span></span><br><span class="line">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    p.next = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">                    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                    <span class="comment">/* 如果当前列表中的长度大于等于 8-1 的时候，把这个列表整理成树形结构 */</span></span><br><span class="line">                        treeifyBin(tab, hash);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                p = e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">            V oldValue = e.value;</span><br><span class="line">            <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</span><br><span class="line">                e.value = value;</span><br><span class="line">            afterNodeAccess(e);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ++modCount;</span><br><span class="line">    <span class="comment">/* 如果当前size大于threshold的时候扩充table */</span></span><br><span class="line">    <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">        resize();</span><br><span class="line">    afterNodeInsertion(evict);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="在看get方法之前先看和put方法息息相关的resize方法"><a href="#在看get方法之前先看和put方法息息相关的resize方法" class="headerlink" title="在看get方法之前先看和put方法息息相关的resize方法"></a>在看get方法之前先看和put方法息息相关的resize方法</h4><p>我理解的 <code>hashMap</code> 大致形状，总体为纵向拓展，如果 <code>hash&amp;length-1</code> 的值重复的话，说明位置冲突，首先会加在这个位置元素后面，如果大小超过 <code>TREEIFY_THRESHOLD - 1</code> 的时候自动为这列整理成树形状。这样就会变为纵向列表，横向列表或树的结构。</p><p>在未重复hash的前提下，如果table的大小超过设置的 <code>threshold</code> 的大小的时候，就会触发 <code>resize</code> 方法。下面就来看看resize方法的代码结构。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">        Node&lt;K,V&gt;[] oldTab = table;</span><br><span class="line">        <span class="keyword">int</span> oldCap = (oldTab == <span class="keyword">null</span>) ? <span class="number">0</span> : oldTab.length;</span><br><span class="line">        <span class="keyword">int</span> oldThr = threshold;</span><br><span class="line">        <span class="keyword">int</span> newCap, newThr = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class="line">                threshold = Integer.MAX_VALUE;</span><br><span class="line">                <span class="keyword">return</span> oldTab;</span><br><span class="line">            &#125; <span class="comment">//newcap是oldcap的2倍</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class="line">                     oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">                newThr = oldThr &lt;&lt; <span class="number">1</span>; <span class="comment">// double threshold</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>) <span class="comment">// initial capacity was placed in threshold</span></span><br><span class="line">            newCap = oldThr;</span><br><span class="line">        <span class="keyword">else</span> &#123;               <span class="comment">// zero initial threshold signifies using defaults</span></span><br><span class="line">            newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class="line">            newThr = (<span class="keyword">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (newThr == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">float</span> ft = (<span class="keyword">float</span>)newCap * loadFactor;</span><br><span class="line">            newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="keyword">float</span>)MAXIMUM_CAPACITY ?</span><br><span class="line">                      (<span class="keyword">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line">        &#125;</span><br><span class="line">        threshold = newThr;</span><br><span class="line">        <span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"rawtypes"</span>,<span class="string">"unchecked"</span>&#125;)</span><br><span class="line">        Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node[newCap];</span><br><span class="line">        table = newTab;</span><br><span class="line">        <span class="keyword">if</span> (oldTab != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; oldCap; ++j) &#123; <span class="comment">//循环原table数组 ？因为在扩容后 hash &amp; (size-1) 的位置发生了变化 ，所以应当进行重排</span></span><br><span class="line">                Node&lt;K,V&gt; e;</span><br><span class="line">                <span class="keyword">if</span> ((e = oldTab[j]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    oldTab[j] = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="keyword">if</span> (e.next == <span class="keyword">null</span>)<span class="comment">//说明e不存在hash冲突</span></span><br><span class="line">                        newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                        ((TreeNode&lt;K,V&gt;)e).split(<span class="keyword">this</span>, newTab, j, oldCap);</span><br><span class="line">                    <span class="keyword">else</span> &#123; <span class="comment">// preserve order</span></span><br><span class="line">                        Node&lt;K,V&gt; loHead = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</span><br><span class="line">                        Node&lt;K,V&gt; hiHead = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</span><br><span class="line">                        Node&lt;K,V&gt; next;</span><br><span class="line">                        <span class="keyword">do</span> &#123; <span class="comment">//再去循环bin</span></span><br><span class="line">                            next = e.next;</span><br><span class="line">                            <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123; <span class="comment">//如果在低位 （老）数组中也就是元素hast和就数组取模为0时，说明重排后仍在老数组内</span></span><br><span class="line">                                <span class="keyword">if</span> (loTail == <span class="keyword">null</span>)</span><br><span class="line">                                    loHead = e;</span><br><span class="line">                                <span class="keyword">else</span></span><br><span class="line">                                    loTail.next = e;</span><br><span class="line">                                loTail = e;<span class="comment">//递归向下继续排</span></span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">else</span> &#123;<span class="comment">//否则在高位数组中 ，也就是在扩容出来的数组中</span></span><br><span class="line">                                <span class="keyword">if</span> (hiTail == <span class="keyword">null</span>)</span><br><span class="line">                                    hiHead = e;</span><br><span class="line">                                <span class="keyword">else</span></span><br><span class="line">                                    hiTail.next = e;</span><br><span class="line">                                hiTail = e;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">while</span> ((e = next) != <span class="keyword">null</span>);</span><br><span class="line">                        <span class="keyword">if</span> (loTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            loTail.next = <span class="keyword">null</span>;</span><br><span class="line">                            newTab[j] = loHead; <span class="comment">//低位数组还是在原来的位置上</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (hiTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            hiTail.next = <span class="keyword">null</span>;</span><br><span class="line">                            newTab[j + oldCap] = hiHead; <span class="comment">//高位数组在旧数组+j的位置上</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newTab;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="get方法"><a href="#get方法" class="headerlink" title="get方法"></a>get方法</h3><p>get方法是根据hash和key值进行查找,同理containKey方法也是调用getNode方法进行判断。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt; e;</span><br><span class="line">    <span class="keyword">return</span> (e = getNode(hash(key), key)) == <span class="keyword">null</span> ? <span class="keyword">null</span> : e.value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> hash, Object key)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; <span class="keyword">int</span> n; K k;</span><br><span class="line">    <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">        (first = tab[(n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (first.hash == hash &amp;&amp; <span class="comment">// 先回检查第一个节点</span></span><br><span class="line">            ((k = first.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            <span class="keyword">return</span> first;</span><br><span class="line">        <span class="keyword">if</span> ((e = first.next) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (first <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                <span class="keyword">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">              <span class="comment">/* 从第二个节点开始循环 查找hash和key分别相同  */</span></span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">return</span> e;</span><br><span class="line">            &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="remove方法"><a href="#remove方法" class="headerlink" title="remove方法"></a>remove方法</h3><p>使用remove方法根据key移除节点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">remove</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt; e;</span><br><span class="line">    <span class="keyword">return</span> (e = removeNode(hash(key), key, <span class="keyword">null</span>, <span class="keyword">false</span>, <span class="keyword">true</span>)) == <span class="keyword">null</span> ?</span><br><span class="line">        <span class="keyword">null</span> : e.value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Implements Map.remove and related methods</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> hash key的hash值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key 键值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value 如果想匹配的话就是value，否则空</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> matchValue 如果是ture那么就移除和value equal的</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> movable 如果是false的话，移除这个节点不要移动其他节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the node, or null if none</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title">removeNode</span><span class="params">(<span class="keyword">int</span> hash, Object key, Object value,</span></span></span><br><span class="line"><span class="function"><span class="params">                           <span class="keyword">boolean</span> matchValue, <span class="keyword">boolean</span> movable)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, index;</span><br><span class="line">    <span class="comment">/* 确定节点 */</span></span><br><span class="line">    <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">        (p = tab[index = (n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        Node&lt;K,V&gt; node = <span class="keyword">null</span>, e; K k; V v;</span><br><span class="line">        <span class="comment">/* 如果hash值相同 key值也相同 说明就是这个节点 */</span></span><br><span class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">            ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            node = p;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((e = p.next) != <span class="keyword">null</span>) &#123;</span><br><span class="line">          <span class="comment">/* 否则横向查找下一个节点 */</span></span><br><span class="line">            <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                node = ((TreeNode&lt;K,V&gt;)p).getTreeNode(hash, key);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">do</span> &#123;</span><br><span class="line">                    <span class="comment">/* 省略-------- */</span></span><br><span class="line">                &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node != <span class="keyword">null</span> &amp;&amp; (!matchValue || (v = node.value) == value ||</span><br><span class="line">                             (value != <span class="keyword">null</span> &amp;&amp; value.equals(v)))) &#123;</span><br><span class="line">            <span class="keyword">if</span> (node <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                ((TreeNode&lt;K,V&gt;)node).removeTreeNode(<span class="keyword">this</span>, tab, movable);</span><br><span class="line">                <span class="comment">/* 接下来把tab中对应的index remove掉 */</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (node == p)</span><br><span class="line">                tab[index] = node.next;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                p.next = node.next;</span><br><span class="line">            ++modCount;</span><br><span class="line">            --size;</span><br><span class="line">            afterNodeRemoval(node);</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="keySet方法"><a href="#keySet方法" class="headerlink" title="keySet方法"></a>keySet方法</h3><p>ketSet方法也是经常用到的方法，keySet方法实际上就是返回新建的keyset结构。具体结构可以看如下代码，可以看到只有使用forEach和Iterator方法的时候才会循环tab来找key的set数据。数据结构中都是调用外部方法的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">KeySet</span> <span class="keyword">extends</span> <span class="title">AbstractSet</span>&lt;<span class="title">K</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span>                 </span>&#123; <span class="keyword">return</span> size; &#125; <span class="comment">//返回当前size</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span>               </span>&#123; HashMap.<span class="keyword">this</span>.clear(); &#125; <span class="comment">//直接调用hashMap的clear方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Iterator&lt;K&gt; <span class="title">iterator</span><span class="params">()</span>     </span>&#123; <span class="keyword">return</span> <span class="keyword">new</span> KeyIterator(); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123; <span class="keyword">return</span> containsKey(o); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> removeNode(hash(key), key, <span class="keyword">null</span>, <span class="keyword">false</span>, <span class="keyword">true</span>) != <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Spliterator&lt;K&gt; <span class="title">spliterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> KeySpliterator&lt;&gt;(HashMap.<span class="keyword">this</span>, <span class="number">0</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">forEach</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> K&gt; action)</span> </span>&#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab;</span><br><span class="line">        <span class="keyword">if</span> (action == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">if</span> (size &gt; <span class="number">0</span> &amp;&amp; (tab = table) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> mc = modCount;</span><br><span class="line">            <span class="comment">/* 把当前操作数记下来  */</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tab.length; ++i) &#123;</span><br><span class="line">                <span class="keyword">for</span> (Node&lt;K,V&gt; e = tab[i]; e != <span class="keyword">null</span>; e = e.next)</span><br><span class="line">                    action.accept(e.key);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (modCount != mc)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是几个非常常用的hashMap的方法和基本的数据结构源码的分析查看。就当做笔记记录一下。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LinkedList的源码查看</title>
      <link href="/2018/10/08/2018-10-08-LinkedList%E7%9A%84%E6%BA%90%E7%A0%81%E6%9F%A5%E7%9C%8B/"/>
      <url>/2018/10/08/2018-10-08-LinkedList%E7%9A%84%E6%BA%90%E7%A0%81%E6%9F%A5%E7%9C%8B/</url>
      
        <content type="html"><![CDATA[<!-- TOC depthFrom:1 depthTo:6 withLinks:1 updateOnSave:1 orderedList:0 --><ul><li><a href="#linkedlist的源码查看">LinkedList的源码查看</a><ul><li><a href="#结构源码">结构源码</a><ul><li><a href="#依靠结构">依靠结构</a></li><li><a href="#linkedlist构造函数">LinkedList构造函数</a></li></ul></li><li><a href="#基本方法">基本方法</a><ul><li><a href="#添加">添加</a></li><li><a href="#移除">移除</a><ul><li><a href="#remove方法">remove方法</a></li><li><a href="#removefirst">removeFirst</a></li><li><a href="#removelast-和removefirst同理">removeLast 和removeFirst同理</a></li></ul></li><li><a href="#赋值取值操作">赋值取值操作</a><ul><li><a href="#get方法">get方法</a></li><li><a href="#set方法">set方法</a></li></ul></li><li><a href="#linkedlist中的栈操作">LinkedList中的栈操作</a><ul><li><a href="#peek方法">peek方法</a></li><li><a href="#poll方法">poll方法</a></li><li><a href="#push方法">push方法</a></li><li><a href="#pop方法">pop方法</a></li><li><a href="#offer方法">offer方法</a></li></ul></li></ul></li></ul></li></ul><!-- /TOC --><h1 id="LinkedList的源码查看"><a href="#LinkedList的源码查看" class="headerlink" title="LinkedList的源码查看"></a>LinkedList的源码查看</h1><h2 id="结构源码"><a href="#结构源码" class="headerlink" title="结构源码"></a>结构源码</h2><h3 id="依靠结构"><a href="#依靠结构" class="headerlink" title="依靠结构"></a>依靠结构</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* LinkedList的内部变量 可以看出LinkedList其实就是一个链表 */</span></span><br><span class="line"><span class="keyword">transient</span> <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 指向首节点</span></span><br><span class="line"><span class="comment"> * Invariant: (first == null &amp;&amp; last == null) ||</span></span><br><span class="line"><span class="comment"> *            (first.prev == null &amp;&amp; first.item != null)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">transient</span> Node&lt;E&gt; first;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 指向尾节点</span></span><br><span class="line"><span class="comment"> * Invariant: (first == null &amp;&amp; last == null) ||</span></span><br><span class="line"><span class="comment"> *            (last.next == null &amp;&amp; last.item != null)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">transient</span> Node&lt;E&gt; last;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 内部node实现 */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    E item;</span><br><span class="line">    Node&lt;E&gt; next;</span><br><span class="line">    Node&lt;E&gt; prev;</span><br><span class="line"><span class="comment">/* 双向链表 */</span></span><br><span class="line">    Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</span><br><span class="line">        <span class="keyword">this</span>.item = element;</span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">        <span class="keyword">this</span>.prev = prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="LinkedList构造函数"><a href="#LinkedList构造函数" class="headerlink" title="LinkedList构造函数"></a>LinkedList构造函数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 空构造函数 比较常用 */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LinkedList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 有collection参数的构造函数 */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LinkedList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>();</span><br><span class="line">    addAll(c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> addAll(size, c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 参数：当前数量也就是要得到当前链表的位置 */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(<span class="keyword">int</span> index, Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">    checkPositionIndex(index);</span><br><span class="line"></span><br><span class="line">    Object[] a = c.toArray();</span><br><span class="line">    <span class="keyword">int</span> numNew = a.length;</span><br><span class="line">    <span class="keyword">if</span> (numNew == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    Node&lt;E&gt; pred, succ;</span><br><span class="line">    <span class="comment">// 对插入前情况的判断</span></span><br><span class="line">    <span class="keyword">if</span> (index == size) &#123;</span><br><span class="line"><span class="comment">//          如果在尾部插入 pred=最后一个节点</span></span><br><span class="line">        succ = <span class="keyword">null</span>;</span><br><span class="line">        pred = last;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//          否则在中部插入 succ=当前节点 pred=前一节点</span></span><br><span class="line"><span class="comment">/* - - - - - - - - -  */</span></span><br><span class="line"><span class="comment">/*     ^ ^ */</span></span><br><span class="line"><span class="comment">/*     1 2  如果想在2位置插入元素，前一个元素不动，将后面的元素后移*/</span></span><br><span class="line">        succ = node(index);</span><br><span class="line">        pred = succ.prev;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (Object o : a) &#123;</span><br><span class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>) E e = (E) o;</span><br><span class="line"><span class="comment">//构造方法 前节点/内容/后节点 始终pred是前置节点</span></span><br><span class="line">        Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(pred, e, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">if</span> (pred == <span class="keyword">null</span>)</span><br><span class="line"><span class="comment">//如果pred==null 说明 本身列表开始就是空的或者在开头插入元素</span></span><br><span class="line">            first = newNode;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line"><span class="comment">//否则在后面插入newNode</span></span><br><span class="line">            pred.next = newNode;</span><br><span class="line"><span class="comment">//向后循环节点</span></span><br><span class="line">        pred = newNode;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//如果succ==null 说明到最后一个节点后位置 将最后的元素pred赋值给last</span></span><br><span class="line">    <span class="keyword">if</span> (succ == <span class="keyword">null</span>) &#123;</span><br><span class="line">        last = pred;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">/* 否则插入在succ前 */</span></span><br><span class="line">        pred.next = succ;</span><br><span class="line">        succ.prev = pred;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    size += numNew;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="基本方法"><a href="#基本方法" class="headerlink" title="基本方法"></a>基本方法</h2><h3 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* add方法默认调用linklast方法，也就是向后添加元素 */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    linkLast(e);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 同样有addLast 达到相同的目的，就是不返回任何东西 */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        linkLast(e);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Links e as last element.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">linkLast</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; l = last;</span><br><span class="line">    <span class="comment">/* 获得最后一个元素当作该节点的前置节点 */</span></span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(l, e, <span class="keyword">null</span>);</span><br><span class="line">    <span class="comment">/* 把当前节点付给last */</span></span><br><span class="line">    last = newNode;</span><br><span class="line">    <span class="keyword">if</span> (l == <span class="keyword">null</span>)</span><br><span class="line">        first = newNode;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        l.next = newNode;</span><br><span class="line">    size++;</span><br><span class="line">    modCount++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然也可以调用方法在最前面添加元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    linkFirst(e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">linkFirst</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; f = first;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(<span class="keyword">null</span>, e, f);</span><br><span class="line">    first = newNode;</span><br><span class="line">    <span class="keyword">if</span> (f == <span class="keyword">null</span>)</span><br><span class="line">        last = newNode;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        f.prev = newNode;</span><br><span class="line">    size++;</span><br><span class="line">    modCount++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="移除"><a href="#移除" class="headerlink" title="移除"></a>移除</h3><h4 id="remove方法"><a href="#remove方法" class="headerlink" title="remove方法"></a>remove方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">  <span class="comment">/* 先判断是否越界 */</span></span><br><span class="line">      checkElementIndex(index);</span><br><span class="line">      <span class="keyword">return</span> unlink(node(index));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="function">E <span class="title">unlink</span><span class="params">(Node&lt;E&gt; x)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// assert x != null;</span></span><br><span class="line">    <span class="keyword">final</span> E element = x.item;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; next = x.next;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; prev = x.prev;</span><br><span class="line"><span class="comment">/* 如果prev是空 说明当前元素是第一个元素 */</span></span><br><span class="line">    <span class="keyword">if</span> (prev == <span class="keyword">null</span>) &#123;</span><br><span class="line">        first = next;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">/* 当前节点与前后节点断绝链接 */</span></span><br><span class="line">        prev.next = next;</span><br><span class="line">        x.prev = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/* 如果是最后一个元素 */</span></span><br><span class="line">    <span class="keyword">if</span> (next == <span class="keyword">null</span>) &#123;</span><br><span class="line">        last = prev;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">/* 当前节点与前后节点断绝链接 因为LinkedList是双向链表 */</span></span><br><span class="line">        next.prev = prev;</span><br><span class="line">        x.next = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/* 置空 */</span></span><br><span class="line">    x.item = <span class="keyword">null</span>;</span><br><span class="line">    size--;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">return</span> element;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="removeFirst"><a href="#removeFirst" class="headerlink" title="removeFirst"></a>removeFirst</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">removeFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; f = first;</span><br><span class="line">    <span class="keyword">if</span> (f == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">    <span class="keyword">return</span> unlinkFirst(f);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> E <span class="title">unlinkFirst</span><span class="params">(Node&lt;E&gt; f)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// assert f == first &amp;&amp; f != null;</span></span><br><span class="line">    <span class="keyword">final</span> E element = f.item;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; next = f.next;</span><br><span class="line">    f.item = <span class="keyword">null</span>;</span><br><span class="line">    f.next = <span class="keyword">null</span>; <span class="comment">// help GC</span></span><br><span class="line">    first = next;</span><br><span class="line">    <span class="keyword">if</span> (next == <span class="keyword">null</span>)</span><br><span class="line">        last = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        next.prev = <span class="keyword">null</span>;</span><br><span class="line">    size--;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">return</span> element;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="removeLast-和removeFirst同理"><a href="#removeLast-和removeFirst同理" class="headerlink" title="removeLast 和removeFirst同理"></a>removeLast 和removeFirst同理</h4><h3 id="赋值取值操作"><a href="#赋值取值操作" class="headerlink" title="赋值取值操作"></a>赋值取值操作</h3><h4 id="get方法"><a href="#get方法" class="headerlink" title="get方法"></a>get方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    checkElementIndex(index);</span><br><span class="line">    <span class="comment">/* 得到index处节点的item信息 */</span></span><br><span class="line">    <span class="keyword">return</span> node(index).item;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="set方法"><a href="#set方法" class="headerlink" title="set方法"></a>set方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">    checkElementIndex(index);</span><br><span class="line">    Node&lt;E&gt; x = node(index);</span><br><span class="line">    E oldVal = x.item;</span><br><span class="line">    x.item = element;</span><br><span class="line">    <span class="comment">/* set方法会返回原来的值 */</span></span><br><span class="line">    <span class="keyword">return</span> oldVal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="LinkedList中的栈操作"><a href="#LinkedList中的栈操作" class="headerlink" title="LinkedList中的栈操作"></a>LinkedList中的栈操作</h3><h4 id="peek方法"><a href="#peek方法" class="headerlink" title="peek方法"></a>peek方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Retrieves, but does not remove, the head (first element) of this list.</span></span><br><span class="line"><span class="comment"> * 只是检索栈首元素，但并不弹出</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the head of this list, or &#123;<span class="doctag">@code</span> null&#125; if this list is empty</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.5</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; f = first;</span><br><span class="line">    <span class="keyword">return</span> (f == <span class="keyword">null</span>) ? <span class="keyword">null</span> : f.item;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同理 <code>peekFirst</code> 和 <code>peekLast</code></p><h4 id="poll方法"><a href="#poll方法" class="headerlink" title="poll方法"></a>poll方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Retrieves and removes the head (first element) of this list.</span></span><br><span class="line"><span class="comment"> * 检索并且移除栈首元素 unlinkFirst是可以返回移除元素的</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the head of this list, or &#123;<span class="doctag">@code</span> null&#125; if this list is empty</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.5</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">poll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; f = first;</span><br><span class="line">    <span class="keyword">return</span> (f == <span class="keyword">null</span>) ? <span class="keyword">null</span> : unlinkFirst(f);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同理  <code>pollFirst</code> 和 <code>pollLast</code></p><h4 id="push方法"><a href="#push方法" class="headerlink" title="push方法"></a>push方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Pushes an element onto the stack represented by this list.  In other</span></span><br><span class="line"><span class="comment"> * words, inserts the element at the front of this list.</span></span><br><span class="line"><span class="comment"> * 在栈首堆一个元素</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This method is equivalent to &#123;<span class="doctag">@link</span> #addFirst&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> e the element to push</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.6</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    addFirst(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="pop方法"><a href="#pop方法" class="headerlink" title="pop方法"></a>pop方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Pops an element from the stack represented by this list.  In other</span></span><br><span class="line"><span class="comment"> * words, removes and returns the first element of this list.</span></span><br><span class="line"><span class="comment"> * 出栈</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This method is equivalent to &#123;<span class="doctag">@link</span> #removeFirst()&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the element at the front of this list (which is the top</span></span><br><span class="line"><span class="comment"> *         of the stack represented by this list)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> NoSuchElementException if this list is empty</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.6</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> removeFirst();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="offer方法"><a href="#offer方法" class="headerlink" title="offer方法"></a>offer方法</h4><p>实际上 <code>offer</code> 是调用的 <code>add</code> 方法，但是区别就在 <code>linkedlist</code> 继承了 <code>Dequ</code> 和 <code>List</code> 父类。一般当 <code>queue</code> 用的时候要用 <code>offer/push/pop</code>  而当使用 <code>list</code> 的时候用 <code>add/remove</code> 。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ArrayList的源码查看</title>
      <link href="/2018/10/04/2018-10-04-ArrayList%E7%9A%84%E6%BA%90%E7%A0%81%E6%9F%A5%E7%9C%8B/"/>
      <url>/2018/10/04/2018-10-04-ArrayList%E7%9A%84%E6%BA%90%E7%A0%81%E6%9F%A5%E7%9C%8B/</url>
      
        <content type="html"><![CDATA[<!-- TOC depthFrom:1 depthTo:6 withLinks:1 updateOnSave:1 orderedList:0 --><ul><li><a href="#arraylist的源码查看">ArrayList的源码查看</a><ul><li><a href="#结构源码">结构源码</a></li><li><a href="#常用方法源码">常用方法源码</a></li></ul></li></ul><!-- /TOC --><h1 id="ArrayList的源码查看"><a href="#ArrayList的源码查看" class="headerlink" title="ArrayList的源码查看"></a>ArrayList的源码查看</h1><h2 id="结构源码"><a href="#结构源码" class="headerlink" title="结构源码"></a>结构源码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 没有参数的情况下 */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 默认是拥有默认容量（10）的空的 array list */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line"><span class="comment">/* 这个默认的容量是定义好的10  */</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 当参数是容量的大小的时候  */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">/* 如果自定义初始容量大小*/</span></span><br><span class="line">        <span class="keyword">this</span>.elementData = <span class="keyword">new</span> Object[initialCapacity];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (initialCapacity == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">/* 如果参数小于0 报参数异常的错误（IllegalArgumentException） */</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal Capacity: "</span>+</span><br><span class="line">                                           initialCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 当参数是一个Collection结构的时候 */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">     elementData = c.toArray();</span><br><span class="line">     <span class="keyword">if</span> ((size = elementData.length) != <span class="number">0</span>) &#123;</span><br><span class="line">         <span class="comment">// c.toArray might (incorrectly) not return Object[] (see 6260652)</span></span><br><span class="line">         <span class="keyword">if</span> (elementData.getClass() != Object[].class)</span><br><span class="line">         <span class="comment">/* 如果不是object类型的话 转换成object类型 */</span></span><br><span class="line">             elementData = Arrays.copyOf(elementData, size, Object[].class);</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="comment">// replace with empty array.</span></span><br><span class="line">         <span class="keyword">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="常用方法源码"><a href="#常用方法源码" class="headerlink" title="常用方法源码"></a>常用方法源码</h2><ul><li>add 添加方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 只有一个参数的添加 */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">  <span class="comment">/* 扩充容量 */</span></span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">    <span class="comment">/* ArrayList其实就是个数组 将新add的值放到数组的最后面 */</span></span><br><span class="line">    elementData[size++] = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityInternal</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">      ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">calculateCapacity</span><span class="params">(Object[] elementData, <span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">  <span class="comment">/* 如果是空的话返回 默认或当前 */</span></span><br><span class="line">    <span class="keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">        <span class="keyword">return</span> Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">     &#125;</span><br><span class="line">    <span class="keyword">return</span> minCapacity;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureExplicitCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">  <span class="comment">/* The number of times this list has been &lt;i&gt;structurally modified&lt;/i&gt;. */</span></span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">    <span class="comment">/* 如果当前的容量大于给定的长度的时候 需要扩充 */</span></span><br><span class="line">        grow(minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">int</span> oldCapacity = elementData.length; <span class="comment">// 原长度</span></span><br><span class="line">    <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>); <span class="comment">//新长度 右移运算。长度为1.5倍的原长度</span></span><br><span class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = minCapacity;</span><br><span class="line">   <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">    <span class="comment">// minCapacity is usually close to size, so this is a win:</span></span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>remove 移除元素方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    rangeCheck(index); <span class="comment">//如果超出 IndexOutOfBoundsException</span></span><br><span class="line"></span><br><span class="line">    modCount++;</span><br><span class="line">    E oldValue = elementData(index);</span><br><span class="line">    <span class="comment">/* 想要移除元素的位置 */</span></span><br><span class="line">    <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">    <span class="comment">/* arraycopy是个native方法 相当于把index+1位置上的元素挪到index位置上 */</span></span><br><span class="line">        System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</span><br><span class="line">                         numMoved);</span><br><span class="line">    elementData[--size] = <span class="keyword">null</span>; <span class="comment">// clear to let GC do its work</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> oldValue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 只会移除第一个符合条件的条目 */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)</span><br><span class="line">              <span class="keyword">if</span> (elementData[index] == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">/* 这个fastRemove方法和上面的方法大相径庭  */</span></span><br><span class="line">                  fastRemove(index);</span><br><span class="line">                  <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">              &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)</span><br><span class="line">              <span class="keyword">if</span> (o.equals(elementData[index])) &#123;</span><br><span class="line">                  fastRemove(index);</span><br><span class="line">                  <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">              &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>contain 是否包含</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> indexOf(o) &gt;= <span class="number">0</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">               <span class="keyword">if</span> (elementData[i]==<span class="keyword">null</span>)</span><br><span class="line">                   <span class="keyword">return</span> i;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="comment">/* 内部就是for循环一个一个判断的 */</span></span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">               <span class="keyword">if</span> (o.equals(elementData[i]))</span><br><span class="line">                   <span class="keyword">return</span> i;</span><br><span class="line">                         &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>get 方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    rangeCheck(index);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> elementData(index);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 本质就是返回数组位置的元素 */</span></span><br><span class="line"><span class="function">E <span class="title">elementData</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> (E) elementData[index];</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>整理并学习stackOverFlow上的热门回答</title>
      <link href="/2018/07/25/2018-07-25-stackOverFlow%E4%B8%8A%E7%9A%84%E7%83%AD%E9%97%A8%E9%97%AE%E9%A2%98/"/>
      <url>/2018/07/25/2018-07-25-stackOverFlow%E4%B8%8A%E7%9A%84%E7%83%AD%E9%97%A8%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="基础Java知识"><a href="#基础Java知识" class="headerlink" title="基础Java知识"></a>基础Java知识</h1><p>平常没事的时候会逛逛stackOverFlow,上面有很多非常基础的问题，并且回答者讲解的非常的透彻，我想通过整理上面的热门回答来梳理一下自己的Java基础知识。</p><h2 id="热门"><a href="#热门" class="headerlink" title="热门"></a>热门</h2><h3 id="什么是NullPointerExpection-如何去尽可能的避免"><a href="#什么是NullPointerExpection-如何去尽可能的避免" class="headerlink" title="什么是NullPointerExpection,如何去尽可能的避免"></a>什么是NullPointerExpection,如何去尽可能的避免</h3><p>当你声明一个引用变量(对象)的时候，实际上是创建一个指向该对象的指针。参考如下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> x ;</span><br><span class="line">x = <span class="number">10</span> ;</span><br></pre></td></tr></table></figure><p>在例子中，我们声明了变量 <code>x</code> 。因为是原始类型，系统会默认付给变量<code>x</code>初始值是0。但是第二行使用<code>x=10</code>，将数值10付给变量x，实际过程是将10写入变量x所指向的内存位置。<br>然而，当我们声明一个引用类型，对于int来说也就是其包装类型。会出现不一样的情形。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Integer num;</span><br><span class="line">num = <span class="keyword">new</span> Integer(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><p>当你创建num的时候，系统不会默认创建一个默认值，因为他引用对象，然而，他会包含一个指针，这个指针虽然存在，但是他没有初始值，所以java会将变量的指针指向空(null)。<br>在第二行使用new关键字实例化了num，这时，会将变量num指针指向这个实例对象。</p><p>在当用到这个变量之前未给变量做实例化时，也就是变量的指针还指向空时，运行后会出现NullPointerExpection 这个问题。</p><p>可能觉得在实际codeing的时候不会出现上面的问题，但是实际上，每个方法的引用对象如果不判断传进来的值是否非空，都可能会出现这个问题</p><p>错误的示范：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">(SomeObject obj)</span> </span>&#123;</span><br><span class="line">   <span class="comment">//do something to obj</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用的时候 传递null值时,会出现空指针异常</span></span><br><span class="line">doSomething(<span class="keyword">null</span>);</span><br></pre></td></tr></table></figure><p>正确的示范：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">(SomeObject obj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(obj != <span class="keyword">null</span>) &#123;</span><br><span class="line">       <span class="comment">//do something</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="comment">//do something else</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>尽量在每次开发的过程当中，仔细斟酌变量是否可能为空，当可能为空时一定要做这种判断来预防空指针。保证代码的健壮性。</p><h3 id="如何比较字符串"><a href="#如何比较字符串" class="headerlink" title="如何比较字符串"></a>如何比较字符串</h3><p>在当使用 <code>==</code> 比较字符串是可能会出现bug，这时可以用equals解决。所以引出一个问题，什么时候使用 <code>==</code> 什么时候使用equals</p><p>主要有两方面的差异：</p><ol><li><p><code>==</code> 是比较对象引用，也就是真正的比较两个对象或者变量的地址是否是相同的。而equals比较的是值是否相等。</p></li><li><p><code>==</code> 没有非空的判断，而equals如果比较的对象如果是空则会出现异常，所以一般使用equals的方法都是使用已知的非空对象.equals(Object) 如 <code>&quot;hello&quot;.equals(x)</code></p></li></ol><p>equals是Object的方法，大部分类中也重写了equals方法，所以在比较对象的时候应该使用equals,而当比较基本数据类型如int的时候可以使用 <code>==</code></p><h3 id="Java是传值还是传引用"><a href="#Java是传值还是传引用" class="headerlink" title="Java是传值还是传引用"></a>Java是传值还是传引用</h3><p><strong>Java是传值的</strong> 。但是，通常我们定位值的时候称他为 “引用” 。具一个非常典型的例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Dog aDog = <span class="keyword">new</span> Dog(<span class="string">"Max"</span>);</span><br><span class="line">    <span class="comment">// we pass the object to foo</span></span><br><span class="line">    foo(aDog);</span><br><span class="line">    <span class="comment">// aDog variable is still pointing to the "Max" dog when foo(...) returns</span></span><br><span class="line">    aDog.getName().equals(<span class="string">"Max"</span>); <span class="comment">// true</span></span><br><span class="line">    aDog.getName().equals(<span class="string">"Fifi"</span>); <span class="comment">// false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">(Dog d)</span> </span>&#123;</span><br><span class="line">    d.getName().equals(<span class="string">"Max"</span>); <span class="comment">// true</span></span><br><span class="line">    <span class="comment">// change d inside of foo() to point to a new Dog instance "Fifi"</span></span><br><span class="line">    d = <span class="keyword">new</span> Dog(<span class="string">"Fifi"</span>);</span><br><span class="line">    d.getName().equals(<span class="string">"Fifi"</span>); <span class="comment">// true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然foo方法内改变了传进来的aDog的值，注意这里是 <code>值</code>，所以在调用完foo方法之后再去判断变量aDog的时候他的引用到的值没有变，变的只是当时传进去的值而不是变量的应用，所以可以说，对象的引用是按值传递的。如果这样还是迷糊的话，<br>还可以逆向来想，如果是传引用的话，在当foo方法改变了aDog的时候，也就是说明改变了aDog所引用到的真正的这个值。这样是不能成立。</p><p>所以不管怎么想：Java是传值的！！</p><h3 id="怎样快速打印出array数组内的值"><a href="#怎样快速打印出array数组内的值" class="headerlink" title="怎样快速打印出array数组内的值"></a>怎样快速打印出array数组内的值</h3><p>因为array并没有实现toString()方法，所以当使用array.toString()的时候会打印出类似 <code>[I@17f052a3</code> 的地址信息，在jdk1.5之后可以使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] x = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">String arrayString = Arrays.toString(x);</span><br><span class="line">System.out.println(arrayString);</span><br><span class="line"><span class="comment">//结果： [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><p>这样的方式可以非常方便的打印出数组内所有元素,嵌套数组可以使用deepToString方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(Arrays.toString(deepArray));</span><br><span class="line"><span class="comment">//output: [[Ljava.lang.String;@106d69c, [Ljava.lang.String;@52e922]</span></span><br><span class="line">System.out.println(Arrays.deepToString(deepArray));</span><br><span class="line">结果：[[John, Mary], [Alice, Bob]]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bash相关问题总结</title>
      <link href="/2018/07/13/2018-07-12-bash%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"/>
      <url>/2018/07/13/2018-07-12-bash%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="bash相关问题总结"><a href="#bash相关问题总结" class="headerlink" title="bash相关问题总结"></a>bash相关问题总结</h1><h2 id="七月专题"><a href="#七月专题" class="headerlink" title="七月专题 - -"></a>七月专题 - -</h2><h3 id="关于bash中的-lt-lt-lt-的含义"><a href="#关于bash中的-lt-lt-lt-的含义" class="headerlink" title="关于bash中的 &lt;&lt;&lt; 的含义"></a>关于bash中的 <code>&lt;&lt;&lt;</code> 的含义</h3><p>在StackOverflow中有个例子非常的详细。。先贴连接 <a href="https://unix.stackexchange.com/questions/80362/what-does-mean" target="_blank" rel="noopener">What does &lt;&lt;&lt; mean? </a>以下是我的渣翻译，可能会翻译错。。</p><p>我们可以这样对字符串进行处理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$string</span>"</span> | <span class="built_in">command</span></span><br></pre></td></tr></table></figure><p>然而在bash中，这样写（使用管道）就相当于把命令分到子shell中进行处理，考虑这种情况</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"hello world"</span> | <span class="built_in">read</span> first second</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$second</span> <span class="variable">$first</span></span><br></pre></td></tr></table></figure><p>它会输出一个空行，子shell成功的读到了两个变量，但是随后子shell退出，两个变量就消失掉了。所以输出是没有结果的。应当这样写</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"hello world"</span> | &#123;</span><br><span class="line">    <span class="built_in">read</span> first second</span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$second</span> <span class="variable">$first</span></span><br><span class="line">&#125;</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">但是这样还是没有解决这种分成子shell去执行的尴尬。这时候就能够使用 `&lt;&lt;&lt;` 了</span><br><span class="line"></span><br><span class="line">````bash</span><br><span class="line"><span class="built_in">read</span> first second &lt;&lt;&lt; <span class="built_in">echo</span> <span class="string">"hello world"</span></span><br></pre></td></tr></table></figure><h3 id="关于-var-var是变量名"><a href="#关于-var-var是变量名" class="headerlink" title="关于${!var} var是变量名"></a>关于${!var} var是变量名</h3><p>使用${!var}的作用是当ver不存在的时候会原样输出，也就是显示${var}</p><h3 id="关于bash中的trap命令的使用"><a href="#关于bash中的trap命令的使用" class="headerlink" title="关于bash中的trap命令的使用"></a>关于bash中的trap命令的使用</h3><p>trap可以强化bash脚本，让脚本更加稳定。</p><h4 id="trap的使用方式"><a href="#trap的使用方式" class="headerlink" title="trap的使用方式"></a>trap的使用方式</h4><p>trap有三种使用方式，对应这不同的对信号的回应方式。</p><ol><li>trap ”something“ signal</li></ol><p>其中”something“ 是在接受signal信号之后作出的命令</p><ol start="2"><li>trap signal </li></ol><p>trap不指定任何命令，接受信号的默认操作，默认操作是结束进程的运行</p><ol start="3"><li>trap “” signal</li></ol><p>trap命令指定一个空命令串，允许忽视信号</p><h4 id="常用信号"><a href="#常用信号" class="headerlink" title="常用信号"></a>常用信号</h4><ul><li><p>HUB(1) 挂起，通常因终端掉线或用户退出而引发</p></li><li><p>INT(2) 中断，通常因按下Ctrl+C组合键而引发</p></li><li><p>QUIT(3) 退出，通常因按下Ctrl+/组合键而引发</p></li><li><p>ABRT(6) 中止，通常因某些严重的执行错误而引发</p></li><li><p>ALRM(14) 报警，通常用来处理超时</p></li><li><p>TERM(15) 终止，通常在系统关机时发送</p></li><li><p>KILL(9) 杀死进程</p></li><li><p>STOP 停止进程执行</p></li></ul><p>更过的信号 可以使用 trap -l 命令来查看</p>]]></content>
      
      
      <categories>
          
          <category> Bash </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bash </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA 中的快捷键</title>
      <link href="/2018/07/13/2018-07-15-idea%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
      <url>/2018/07/13/2018-07-15-idea%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="IDEA-中的快捷键"><a href="#IDEA-中的快捷键" class="headerlink" title="IDEA 中的快捷键"></a>IDEA 中的快捷键</h1><p>以前经常用idea开发，但是竟然没有怎么使用到idea的快捷键。。没有真正的使用到idea中非常重要的特性。今天正好看到了有一篇微信公众号里文章总结了关于常用的idea快捷键。<br>遂而也想小小总结一下，希望在以后的开发中多用快捷键，提高开发效率。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><ol><li><p>ctrl+alt+o = 优化导入的包</p></li><li><p>alt+insert = 加入代码</p></li><li><p>ctrl+alt+T = 生成try–catch结构</p></li><li><p>alt+回车   = 导入包</p></li><li><p>ctrl+alt+l = 格式化代码</p></li><li><p>ctrl+e     = 最近更改的代码</p></li><li><p>Shift+F6   = 重构-重命名 包、类、方法、变量、甚至注释等</p></li></ol><h2 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h2><ol><li><p>ctrl+Shift+backspace =回到上次编辑的地方</p></li><li><p>ctrl+alt+left/right = 回到前后编辑的地方</p></li><li><p>Shift+Shift 在目录中查找类</p></li><li><p>ctrl+n 查找类</p></li><li><p>ctrl+Shift+n 查找文件</p></li><li><p>ctrl+e 打开最近文件</p></li><li><p>ctrl+f 文件内容查找</p></li><li><p>ctrl+shift+f 全局内容查找</p></li><li><p>ctrl+w 快速选中</p></li><li><p>ctrl+b/ctrl+alt+b 对应这回溯到父类和到子类的快捷键</p></li></ol><h2 id="对行的删除，复制，粘贴操作可以使用vim插件来实现"><a href="#对行的删除，复制，粘贴操作可以使用vim插件来实现" class="headerlink" title="对行的删除，复制，粘贴操作可以使用vim插件来实现"></a>对行的删除，复制，粘贴操作可以使用vim插件来实现</h2><h2 id="最后vim的十大快捷键（copy的）"><a href="#最后vim的十大快捷键（copy的）" class="headerlink" title="最后vim的十大快捷键（copy的）"></a>最后vim的十大快捷键（copy的）</h2><p>Ø  Top #10切来切去：Ctrl+Tab</p><p>Ø  Top #9选你所想：Ctrl+W</p><p>Ø  Top #8代码生成：Template/Postfix +Tab</p><p>Ø  Top #7发号施令：Ctrl+Shift+A</p><p>Ø  Top #6无处藏身：Shift+Shift</p><p>Ø  Top #5自动完成：Ctrl+Shift+Enter</p><p>Ø  Top #4创造万物：Alt+Insert</p><p>太难割舍，前三名并列吧！</p><p>Ø  Top #1智能补全：Ctrl+Shift+Space</p><p>Ø  Top #1自我修复：Alt+Enter</p><p>Ø  Top #1重构一切：Ctrl+Shift+Alt+T</p><h2 id="另外补充"><a href="#另外补充" class="headerlink" title="另外补充"></a>另外补充</h2><ol><li><p>alt+1 project视图</p></li><li><p>alt+7 类方法结构</p></li><li><p>alt+home 显示导航栏</p></li><li><p>shift+f6 重命名</p></li><li><p>ctrl+shift+加号 折叠代码</p></li></ol><p>关闭tab页其实是有必要的</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bash学习记录（十六） bash学习终章</title>
      <link href="/2018/07/08/2018-07-06-bash_15_%E7%BB%88%E7%AB%A0/"/>
      <url>/2018/07/08/2018-07-06-bash_15_%E7%BB%88%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="bash学习终章"><a href="#bash学习终章" class="headerlink" title="bash学习终章"></a>bash学习终章</h1><p>学习bash有很长时间了，很多时间花费在学习基础语法上，没有真正的上手实践编写一些使用的bash脚本，接下来我把剩余的比较常见的bash语法学习完，找一些github上的的大牛写过的bash脚本去先<br>分析，然后自己边理解边实践吧，我的目标就是能够基本熟练的使用bash脚本。</p><h2 id="bash的list结构"><a href="#bash的list结构" class="headerlink" title="bash的list结构"></a>bash的list结构</h2><p>这里所说到的list结构不是Java语言中的list结构，而是在做条件的时候的一种链式机构，可以使用 <code>&amp;&amp;</code> 或者 <code>||</code> 来处理多个命令的方法。</p><p>其中分为两种简单的结构</p><ul><li>和结构 （and list）</li></ul><p>这种结构会同时比较多个命令，如果前一个命令返回true，则下一个命令一次去执行。但是如果前一个命令返回false，那么后面都不去执行（命令链终止）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># command-1 &amp;&amp; command-2 &amp;&amp; command-3 &amp;&amp; ... command-n</span></span><br><span class="line"><span class="keyword">if</span> [ ! -z <span class="string">"<span class="variable">$1</span>"</span> ] &amp;&amp; <span class="built_in">echo</span> <span class="string">"Argument #1 = <span class="variable">$1</span>"</span> &amp;&amp; [ ! -z <span class="string">"<span class="variable">$2</span>"</span> ] &amp;&amp;</span><br></pre></td></tr></table></figure><ul><li>与结构 （or list）</li></ul><p>这个结构和 and list正好相反，如果前一个命令返回false，则下一个命令依次去执行。如果前一个命令时ture，那么终止命令链。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># command-1 || command-2 || command-3 || ... command-n</span></span><br><span class="line">[ ! -f <span class="string">"<span class="variable">$file</span>"</span> ] || (rm -f <span class="variable">$file</span>; <span class="built_in">echo</span> <span class="string">"File \"<span class="variable">$file</span>\" deleted."</span>)</span><br></pre></td></tr></table></figure><h2 id="bash中的数组"><a href="#bash中的数组" class="headerlink" title="bash中的数组"></a>bash中的数组</h2><p>数组也是非常常见的一种数据结构，那么在bash中如何初始化和使用数组呢</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一种方式为数组赋值</span></span><br><span class="line">area[11]=23</span><br><span class="line">area[13]=37</span><br><span class="line">area[51]=UFOs</span><br><span class="line"><span class="comment"># 第二种方式</span></span><br><span class="line">area2=( zero one two three four )</span><br><span class="line"><span class="comment"># 第三种方式</span></span><br><span class="line">area3=([17]=seventeen [24]=twenty-four)</span><br></pre></td></tr></table></figure><p>可以看到可以方便的使用小括号进行数组的初始化，以后会接触到更多关于bash数组的实例，比如写一个使用bash的冒泡排序。</p><h2 id="Linux中的-dev和-proc"><a href="#Linux中的-dev和-proc" class="headerlink" title="Linux中的 /dev和 /proc"></a>Linux中的 <code>/dev</code>和 <code>/proc</code></h2><ul><li><code>/dev</code> 是设备文件的目录，可以看出来dev时device设备的缩写。如果想查看某些特定设备的文件，可以直接去对应的 <code>/dev/*</code>的目录下面去找对应的目录就行了。</li></ul><p>作为参考</p><pre><code>/dev/hd[a-t]：IDE设备/dev/sd[a-z]：SCSI设备/dev/fd[0-7]：标准软驱/dev/md[0-31]：软raid设备/dev/loop[0-7]：本地回环设备/dev/ram[0-15]：内存/dev/null：无限数据接收设备 ,相当于回收站/dev/zero：无限零资源/dev/tty[0-63]：虚拟终端/dev/ttyS[0-3]：串口/dev/lp[0-3]：并口/dev/console：控制台/dev/fb[0-31]：framebuffer/dev/cdrom =&gt; /dev/hdc/dev/modem =&gt; /dev/ttyS[0-9]/dev/pilot =&gt; /dev/ttyS[0-9]</code></pre><ul><li><code>/proc</code> 可以看作是一个文件系统，但是是伪文件系统，因为他之存储一些当前内核状态的一系列特殊文件。以下就不详细举例了，可以看看这个文件夹下的内容。使用 cat命令或者less之类的查看。</li></ul><h2 id="bash中的null和0"><a href="#bash中的null和0" class="headerlink" title="bash中的null和0"></a>bash中的null和0</h2><p>bash中的null和zero是通过设备资源文件 <code>/dev/null</code> , <code>/dev/zero</code> 来实现的</p><ul><li>null 使用 <code>dev/null</code> 这个设备文件是一个”黑洞”，可以看作是一个只能够写文件。写进去的东西都会被清空，当然也可以使用从 <code>/dev/null</code> 写入到文件来实现清空文件内容的目的。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat newfile1 &gt; /dev/null <span class="comment">#会什么也不输出</span></span><br><span class="line">cat /dev/null &gt; /var/<span class="built_in">log</span>/wtmp <span class="comment"># 清空该文件内容</span></span><br></pre></td></tr></table></figure><ul><li>zero 为指定目的的文件来清零（指定大小的文件）</li></ul><h3 id="以上就是我在bash学习中的所有内容，当然会在以后写一些实际的bash脚本。这个bash学习系列就写到这。"><a href="#以上就是我在bash学习中的所有内容，当然会在以后写一些实际的bash脚本。这个bash学习系列就写到这。" class="headerlink" title="以上就是我在bash学习中的所有内容，当然会在以后写一些实际的bash脚本。这个bash学习系列就写到这。"></a>以上就是我在bash学习中的所有内容，当然会在以后写一些实际的bash脚本。这个bash学习系列就写到这。</h3>]]></content>
      
      
      <categories>
          
          <category> Bash </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bash </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bash学习记录（十五）bash中的函数定义与使用</title>
      <link href="/2018/07/03/2018-07-03-bash_14_bash%E4%B8%AD%E7%9A%84%E5%87%BD%E6%95%B0/"/>
      <url>/2018/07/03/2018-07-03-bash_14_bash%E4%B8%AD%E7%9A%84%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="bash中的函数"><a href="#bash中的函数" class="headerlink" title="bash中的函数"></a>bash中的函数</h1><p>其实bash函数和bash脚本时一样的，函数的使用如同使用一段bash脚本块一样。但是定义为bash函数执行更快。</p><h2 id="函数定义与调用"><a href="#函数定义与调用" class="headerlink" title="函数定义与调用"></a>函数定义与调用</h2><p>与很多脚本语言一样，使用 <code>function</code> 作为关键词来声明函数。下面来使用一段例子代码来说明函数的定义的格式。乍一看是不是和js有点像呢。。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">hello</span></span>()&#123;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"使用函数会输出这句话"</span></span><br><span class="line"><span class="built_in">return</span> 1</span><br><span class="line">&#125;</span><br><span class="line">hello <span class="comment">#使用函数</span></span><br></pre></td></tr></table></figure><h2 id="函数的参数传递"><a href="#函数的参数传递" class="headerlink" title="函数的参数传递"></a>函数的参数传递</h2><p>与编写bash相似，参数使用 <code>$+位置的形式获取</code> 如$1获取紧跟在调用函数后的第一个参数的值。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">hello</span></span>()&#123;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"使用函数会输出这句话"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"输出第一个参数 <span class="variable">$1</span>"</span></span><br><span class="line"><span class="built_in">return</span> 1</span><br><span class="line">&#125;</span><br><span class="line">hello world</span><br><span class="line"><span class="comment"># 输出结果 ‘ 输出第一个参数 world ’</span></span><br></pre></td></tr></table></figure><h2 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h2><p>使用return来返回特定值 如上面的函数中使用到了 <code>return 1</code> ,在return后发生的语句都不能被执行。并且return的的值只能在1~256之间的数。使用$?来获取返回到值。</p><h2 id="函数的嵌套"><a href="#函数的嵌套" class="headerlink" title="函数的嵌套"></a>函数的嵌套</h2><p>如同在Java js中使用函数类似，bash中的函数也允许使用嵌套结构。但是需要在外层函数调用内容函数。这是当然的了，因为在内部声明函数，却没有调用，这当然时不起作用的了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">x1</span></span>()&#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"在函数x1中！"</span></span><br><span class="line">        <span class="keyword">function</span> <span class="function"><span class="title">x2</span></span>()&#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"在函数x2中！"</span></span><br><span class="line">        &#125;</span><br><span class="line">        x2 <span class="comment"># 这里需要调用内层函数</span></span><br><span class="line">&#125;</span><br><span class="line">x1</span><br><span class="line"><span class="comment">#结果：</span></span><br><span class="line"><span class="comment">#在函数x1中！</span></span><br><span class="line"><span class="comment">#在函数x2中！</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Bash </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bash学习记录（十四）linux中的IO</title>
      <link href="/2018/07/01/2018-07-01-bash_13_bash%E4%B8%AD%E7%9A%84%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/"/>
      <url>/2018/07/01/2018-07-01-bash_13_bash%E4%B8%AD%E7%9A%84%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="linux中的IO"><a href="#linux中的IO" class="headerlink" title="linux中的IO"></a>linux中的IO</h1><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p>linux中总有三种文件，一种时stdin（标准输入），stdout（标准输出），stderr（标准错误），可以重定向这些和其他任意文件，重定向的目的就是可以将文件中的任意内容作为输出或者输出源。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>系统为每一个打开的文件分配一个文件描述符（FD），为标准输入stdin，标准输出stdout,标准错误stderr分别分配给0，1，2</p><p>简单输入输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"helloworld"</span>  &gt; newfile1</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"helloworld"</span> 1 &gt; newfile1 <span class="comment">#等同于第一句</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"helloworld"</span> 1 &gt;&gt; newfile1 <span class="comment">#追加内容</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">command</span> &lt; newfile1 <span class="comment">#标准输入 同理等同于cat 0 &lt; newfile1</span></span><br></pre></td></tr></table></figure><p>使用标准输出和标准错误输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ls 2&gt; newfile <span class="comment">#将错误信息输出到newfile中</span></span><br><span class="line">ls &gt; newfile 2&gt;1&amp; <span class="comment">#将标准输入和标准输出一起输出到newfile中</span></span><br><span class="line"><span class="comment"># 其中&amp;表示和的关系</span></span><br></pre></td></tr></table></figure><p>绑定重定向</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ls &gt;&amp; m <span class="comment">#把标准输出到文件描述符m中</span></span><br><span class="line">ls &lt; &amp;- <span class="comment">#关闭标准输入</span></span><br><span class="line">n &lt; &amp;- <span class="comment">#关闭输入文件描述符n</span></span><br><span class="line">n &gt; &amp;- <span class="comment">#关闭输出文件描述符n</span></span><br><span class="line">1&gt;&amp;-, &gt;&amp;- <span class="comment"># 关闭标准输出</span></span><br></pre></td></tr></table></figure><h3 id="其实在linux-下一切都是文件。把所有都想成文件就好理解的多了。"><a href="#其实在linux-下一切都是文件。把所有都想成文件就好理解的多了。" class="headerlink" title="其实在linux 下一切都是文件。把所有都想成文件就好理解的多了。"></a>其实在linux 下一切都是文件。把所有都想成文件就好理解的多了。</h3>]]></content>
      
      
      <categories>
          
          <category> Bash </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bash </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bash学习记录（十一）命令篇（2）</title>
      <link href="/2018/06/24/2018-06-24-bash_10_bash%E5%91%BD%E4%BB%A4%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2018/06/24/2018-06-24-bash_10_bash%E5%91%BD%E4%BB%A4%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="bash命令令篇（二）"><a href="#bash命令令篇（二）" class="headerlink" title="bash命令令篇（二）"></a>bash命令令篇（二）</h1><h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><p>基本命令就是非常需要初学者掌握的重要的知识点，只有掌握这种基本的命令才能稍微熟练的操作linux。具体的基本命令也不一一列举了，对于这种基本命令用几遍就能够掌握了。而且网上的教程一大堆。</p><h2 id="时间日期命令"><a href="#时间日期命令" class="headerlink" title="时间日期命令"></a>时间日期命令</h2><ul><li><p>date: 打印或者是设置本地时间。主要语法可以 <code>man date</code>  主要有date -u 打印 UTC时间。在后面可以使用 +参数的形式格式化为具体的时间格式。</p></li><li><p>zdump: 输出特殊时区的时间。如 <code>zdump EMP</code></p></li><li><p>time： 输出详细的时间信息比如 <code>time ls -l</code></p></li><li><p>at: at命令一般使用在特定时间执行的时候。</p></li><li><p>batch：batch命令和at命令相似。不同在于batch命令能够同时处理多条命令。</p></li><li><p>cal：cal命令可以整洁的打印出来日历</p></li><li><p>sleep：sleep可以使shell暂停固定时间长度</p></li><li><p>hwclock：访问硬件系统时间。需要管理员权限。</p></li></ul><h2 id="文本和文件处理命令"><a href="#文本和文件处理命令" class="headerlink" title="文本和文件处理命令"></a>文本和文件处理命令</h2><ul><li><p>sort：文件排序的实用性工具，同时出现在管道当中，可以使用-m选项合并预分类的输入文件。</p></li><li><p>uniq：使用uniq命令能够去除重复的行，通常和sort使用在管道当中。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ cat list_1.txt|uniq -c|sort -nr</span><br><span class="line">     5 this is the second line</span><br><span class="line">     3 this is the first line</span><br><span class="line">     1 this is the third line</span><br></pre></td></tr></table></figure><ul><li>expand:可以将tab转换成普通空格，unexpand可以将空格转换成tab，同样比较常见在管道命令当中。</li></ul><p>cut：从文件中提取字段的工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cut -d <span class="string">' '</span> -f 1,2 list_1.txt</span><br></pre></td></tr></table></figure><ul><li><p>paste:合并两个文件的内容，是每行都对应合并。而不是一个文件合并到另一个文件的下面。</p></li><li><p>join：和paste命令相似，但是join命令只粘贴两文件有共同标记的行，一般这个标记是数字。</p></li><li><p>head：输出文件的前10行，也可以更改输出的行数。</p></li><li><p>tail：输出文件的末尾10行，同样的可以更改输出的行数。</p></li><li><p>grep：正则匹配出文件的内容，一般使用在管道中，用来匹配上一个输入或者文件的匹配到的内容</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cat list_1.txt| grep <span class="string">"third"</span>  </span><br><span class="line">this is the third line</span><br><span class="line">              ^ 这里的third是红色的表示匹配到的内容</span><br></pre></td></tr></table></figure><ul><li>wc：输出文件的行数字数等信息</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ wc /usr/share/doc/sed-4.1.2/README</span><br><span class="line">13  70  447 README</span><br><span class="line">[13 lines  70 words  447 characters]</span><br></pre></td></tr></table></figure><ul><li>tr 字符翻译的过滤器，将特定字符替换成其他字符</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ tr <span class="string">"is"</span> <span class="string">"*"</span> &lt; list_1.txt  </span><br><span class="line">th** ** the f*r*t l*ne</span><br><span class="line">th** ** the *econd l*ne</span><br><span class="line">th** ** the th*rd l*ne</span><br></pre></td></tr></table></figure><ul><li><p>nl nl和cat -b有着相似的意义，都能够连同行号打印出来，不同的是，nl可以将空行去除掉。</p></li><li><p>iconv 这个命令能够将文件转换编码，如utf-8转换成utf-16这类的转化。</p></li></ul><h3 id="这类命令真的很多，需要积累的东西也很多，我在这里就做个简单的说明，具体的使用可以-man-命令-查看具体的使用方法。也是学习的一种方式！！"><a href="#这类命令真的很多，需要积累的东西也很多，我在这里就做个简单的说明，具体的使用可以-man-命令-查看具体的使用方法。也是学习的一种方式！！" class="headerlink" title="这类命令真的很多，需要积累的东西也很多，我在这里就做个简单的说明，具体的使用可以 man 命令 查看具体的使用方法。也是学习的一种方式！！"></a>这类命令真的很多，需要积累的东西也很多，我在这里就做个简单的说明，具体的使用可以 man 命令 查看具体的使用方法。也是学习的一种方式！！</h3>]]></content>
      
      
      <categories>
          
          <category> Bash </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bash </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bash学习记录（十二）命令篇（3）</title>
      <link href="/2018/06/24/2018-06-27-bash_11_bash%E5%91%BD%E4%BB%A4%E7%AF%87%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>/2018/06/24/2018-06-27-bash_11_bash%E5%91%BD%E4%BB%A4%E7%AF%87%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="bash命令篇（三）"><a href="#bash命令篇（三）" class="headerlink" title="bash命令篇（三）"></a>bash命令篇（三）</h1><h2 id="bash中的关于通信的命令"><a href="#bash中的关于通信的命令" class="headerlink" title="bash中的关于通信的命令"></a>bash中的关于通信的命令</h2><ol><li>host 通过ip或者域名搜索互联网的主机地址（使用DNS）</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ host www.baidu.com</span><br><span class="line">www.baidu.com has address 61.135.169.125</span><br><span class="line">www.baidu.com has address 61.135.169.121</span><br><span class="line">www.baidu.com is an <span class="built_in">alias</span> <span class="keyword">for</span> www.a.shifen.com.</span><br><span class="line">www.baidu.com is an <span class="built_in">alias</span> <span class="keyword">for</span> www.a.shifen.com.</span><br></pre></td></tr></table></figure><ol start="2"><li>nslookup 向上寻找name server</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ nslookup  -sil 66.97.104.180 </span><br><span class="line">Server:127.0.1.1</span><br><span class="line">Address:127.0.1.1<span class="comment">#53</span></span><br><span class="line"></span><br><span class="line">Non-authoritative answer:</span><br><span class="line">180.104.97.66.in-addr.arpaname = 66-97-104-180.dynamic.bugtusselwireless.com.</span><br><span class="line"></span><br><span class="line">Authoritative answers can be found from:</span><br><span class="line">104.97.66.in-addr.arpanameserver = ns2.bugnet.net.</span><br><span class="line">104.97.66.in-addr.arpanameserver = ns1.bugnet.net.</span><br><span class="line">ns1.bugnet.netinternet address = 204.11.133.241</span><br><span class="line">ns2.bugnet.netinternet address = 204.11.133.244</span><br></pre></td></tr></table></figure><ol start="3"><li><p>ping 熟知的ping命令，常用来探测与另一个主机是否有网络链接</p></li><li><p>ftp 从远程主机下载或者上传给远程主机的协议。</p></li><li><p>telnt 链接远程主机的协议</p></li><li><p>wget 使用非交互式的从网站web或者ftp站点下载文件。</p></li><li><p>rcp 远程拷贝，在两台不同的机器间拷贝。</p></li><li><p>ssh <code>secure shell</code> 他代替了telnt rcp等命令。</p></li><li><p>scp <code>secure cp</code> 他用来代替rcp命令，需要登录授权的远程拷贝文件的命令。</p><p> 这里只是简略的谈谈常见的关于机器交互的命令，这些都是熟能生巧的东西，最重要的是要上手练习。</p></li></ol><h2 id="数学运算符"><a href="#数学运算符" class="headerlink" title="数学运算符"></a>数学运算符</h2><ol><li><p>dc：dc是使用逆波兰表示法进行计算，如 11 +   ，3 6 *</p></li><li><p>bc：bc是现代linux下比较常见处理复杂运算的命令那个，可以计算浮点数。</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$bc</span> -l -q</span><br><span class="line">4/3                   /*未指定精度默认保留整数*/</span><br><span class="line">scale=5               /*指定精度为5*/</span><br><span class="line">4/3</span><br><span class="line">1.33333</span><br><span class="line">ibase=2               /*指定进制转换的输入机制为二进制，输出默认为是十进制*/</span><br><span class="line">10</span><br><span class="line">4^2                   /*指数运算，注：指数不能为浮点数*/</span><br><span class="line">4*a(1)                /*计算π值，a()是个函数：arctan()，好吧，老师教的都被狗吃了，π值是等于四倍的arctan(1)么？*/</span><br><span class="line">3.14159265358979323844</span><br><span class="line">quit                  /*退出*/</span><br></pre></td></tr></table></figure><ol start="3"><li>let: 表达式可以应用在let命令当中。</li></ol><h3 id="其实在我使用linux系统的几年里，感觉命令不能死记硬背，多用自然就会掌握了。但是有些比较冷门的命令还是背下来比较好-。"><a href="#其实在我使用linux系统的几年里，感觉命令不能死记硬背，多用自然就会掌握了。但是有些比较冷门的命令还是背下来比较好-。" class="headerlink" title="其实在我使用linux系统的几年里，感觉命令不能死记硬背，多用自然就会掌握了。但是有些比较冷门的命令还是背下来比较好 - -。"></a>其实在我使用linux系统的几年里，感觉命令不能死记硬背，多用自然就会掌握了。但是有些比较冷门的命令还是背下来比较好 - -。</h3>]]></content>
      
      
      <categories>
          
          <category> Bash </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bash </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bash学习记录（十三）命令篇（4）</title>
      <link href="/2018/06/24/2018-06-28-bash_12_bash%E7%AE%A1%E7%90%86%E5%91%98%E5%91%BD%E4%BB%A4/"/>
      <url>/2018/06/24/2018-06-28-bash_12_bash%E7%AE%A1%E7%90%86%E5%91%98%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="系统命令"><a href="#系统命令" class="headerlink" title="系统命令"></a>系统命令</h1><p>linux上提供非常多的有关于系统的命令，我只能挑出我比较常见的命令来记录下来。</p><h2 id="用户与用户组"><a href="#用户与用户组" class="headerlink" title="用户与用户组"></a>用户与用户组</h2><ul><li><p>users 显示所有登录用户</p></li><li><p>groups 列出当前用户和他所在的用户组</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ groups</span><br><span class="line">nanyin adm cdrom sudo dip plugdev input lpadmin sambashare</span><br></pre></td></tr></table></figure><ul><li><p>chown 命令可以改变文件所属的用户或者用户组。也可以简单的理解给用户某些文件的权限。</p></li><li><p>chgrp 命令可以改变用户所属组。</p></li><li><p>useradd 可以为系统添加一个用户，并且在创建该用户的home文件夹。删除用户可以使用userdel命令进行删除。</p></li><li><p>usermod 命令可以改变用户属性，可以是密码也可以是用户组之类的</p></li><li><p>id 命令可以打印出用户及所在用户组的用户名和组名以及对应的id值</p></li><li><p>whoami 打印出当前用户的用户名称</p></li><li><p>passwd 设置，更改和管理用户的密码</p></li></ul><h2 id="基本信息和状态"><a href="#基本信息和状态" class="headerlink" title="基本信息和状态"></a>基本信息和状态</h2><ul><li><p>uname 可以输出系统的具体参数如内核版本等信息。</p></li><li><p>arch 可以输出系统基于多少位</p></li><li><p>nc （netcat）是用于连接和侦听TCP和UDP端口的完整工具包。</p></li><li><p>lsdev 输出设备，也就是硬件信息</p></li><li><p>df 格式化输出文件系统占用比 一般使用df -h</p></li><li><p>stat 输出文件的状态信息。</p></li></ul><h2 id="系统工作流"><a href="#系统工作流" class="headerlink" title="系统工作流"></a>系统工作流</h2><ul><li><p>ps 查看进程信息 通常后面加 <code>ax</code> 或者 <code>aux</code> 使用。</p></li><li><p>pstree 以树形结构展示进程信息。</p></li><li><p>top 输出cpu的信息使用 -b参数以text的形式输出。能够以静态的方式查看。</p></li><li><p>nice用于指定进程调节优先级的命令。</p></li><li><p>pidof 可以输出具体进程的id 如：<code>pidof xclock</code> 会输出 xclock的进程id号。</p></li></ul><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><ul><li><p>nmap 网络映射和端口扫描（现在只记得大学时网络攻防里用过windows里有个工具叫nmap什么的。。）参数有很多。。</p></li><li><p>ifconfig 最熟的查看网络接口设置。</p></li><li><p>netstat 输出网络状态和信息，如路由表和连接状态等。</p></li><li><p>ip 可以查询和设置ip和访问网卡设别信息</p></li></ul><h2 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h2><ul><li><p>mount 挂载文件系统</p></li><li><p>umount 卸载设备</p></li><li><p>sync 强制立即从缓冲区写入数据以来达到立即更新数据的目的。</p></li><li><p>mkswap swapon swapoff 分别对应格式化为交换分区，启动交换分区，关闭交换分区。</p></li><li><p>fdisk 创建或更改分区表，也就是用来分区的工具。非常常见。当时我还是选择cfdisk</p></li><li><p>lspci 输出总线信息，和连接总线的设备信息。</p></li></ul><h3 id="其实还有很多命令没有涉及到，如果想练习这些基本的系统命令的话，可以跟着arch-wiki-装一遍arch，装完后这里的命令就都能记住了。"><a href="#其实还有很多命令没有涉及到，如果想练习这些基本的系统命令的话，可以跟着arch-wiki-装一遍arch，装完后这里的命令就都能记住了。" class="headerlink" title="其实还有很多命令没有涉及到，如果想练习这些基本的系统命令的话，可以跟着arch wiki 装一遍arch，装完后这里的命令就都能记住了。"></a>其实还有很多命令没有涉及到，如果想练习这些基本的系统命令的话，可以跟着arch wiki 装一遍arch，装完后这里的命令就都能记住了。</h3>]]></content>
      
      
      <categories>
          
          <category> Bash </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bash </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于ElementryOS图形界面挂起之后唤醒后出现黑屏问题</title>
      <link href="/2018/06/23/2018-06-23-%E5%85%B3%E4%BA%8EelementryOS%E6%8C%82%E8%B5%B7%E4%B9%8B%E5%90%8E%E5%94%A4%E9%86%92%E6%97%B6%E9%BB%91%E5%B1%8F%E9%97%AE%E9%A2%98/"/>
      <url>/2018/06/23/2018-06-23-%E5%85%B3%E4%BA%8EelementryOS%E6%8C%82%E8%B5%B7%E4%B9%8B%E5%90%8E%E5%94%A4%E9%86%92%E6%97%B6%E9%BB%91%E5%B1%8F%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="关于ElementryOS图形界面挂起之后唤醒后出现黑屏问题"><a href="#关于ElementryOS图形界面挂起之后唤醒后出现黑屏问题" class="headerlink" title="关于ElementryOS图形界面挂起之后唤醒后出现黑屏问题"></a>关于ElementryOS图形界面挂起之后唤醒后出现黑屏问题</h1><p>这两天在ElementryOs上踩到了坑，为了以后少踩点这种坑，打算以后将这种小问题也写下来。</p><p>如何解决：安装  <code>xserver-xorg</code></p><p>在ElementryOS的终端中使用 <code>$ sudo apt-get install xserver-xorg</code>  我使用这个方法可以解决问题</p><p>解决时间：2018-6-23 版本：ElementryOS Loki 0.4</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bash学习记录（十）命令篇（1）</title>
      <link href="/2018/06/19/2018-06-19-bash_09-bash%E5%91%BD%E4%BB%A4%E7%AF%87%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2018/06/19/2018-06-19-bash_09-bash%E5%91%BD%E4%BB%A4%E7%AF%87%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="Bash中的命令"><a href="#Bash中的命令" class="headerlink" title="Bash中的命令"></a>Bash中的命令</h1><h2 id="内建命令"><a href="#内建命令" class="headerlink" title="内建命令"></a>内建命令</h2><p>内建命令是bash工具集中自带的命令，好处是执行速度比外部命令要快，因为内建命令一般直接执行命令，而外部命令一般要分支出一个子进程。</p><h3 id="I-O操作"><a href="#I-O操作" class="headerlink" title="I/O操作"></a>I/O操作</h3><ul><li><code>echo</code> 当然是最熟悉的echo命令进行输出了。但是需要注意的是在使用 echo `command ` 的时候echo会默认将取消输出的所有换行。</li></ul><p>再当使用 echo “`command`“的时候可以避免换行符的缺失。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"`ll`"</span></span><br><span class="line">total 12K</span><br><span class="line">drwxr-xr-x 2 nanyin nanyin 4.0K Jun 19 21:18 bash</span><br><span class="line">drwxr-xr-x 3 nanyin nanyin 4.0K Jun 18 21:16 git</span><br><span class="line">-rw-r--r-- 1 nanyin nanyin 1.1K Jun 19 21:31 总结.txt</span><br></pre></td></tr></table></figure><ul><li><code>printf</code> 在C中使用的printf 能够格式化输出内容。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基本使用</span></span><br><span class="line"><span class="built_in">printf</span> format-string... parameter...</span><br><span class="line"><span class="comment"># 例子</span></span><br><span class="line"><span class="built_in">declare</span> -r PI=3.1415926535</span><br><span class="line"><span class="built_in">printf</span> <span class="string">"pi to 2 decimal is  %1.2f"</span> <span class="variable">$PI</span> <span class="comment"># pi to 2 decimal is  3.14%</span></span><br></pre></td></tr></table></figure><ul><li><code>read</code> 读取参数的命令，可以通过这个命令读取输入参数。通常情况下，在输入read数据期间输入\会抑制换行符。 -r选项会导致输入的\被字面解释。同样read命令有很多参数可以使用</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"please input a value:"</span></span><br><span class="line"><span class="built_in">read</span> var1</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"input var1 is <span class="variable">$var1</span>"</span></span><br></pre></td></tr></table></figure><p>当read 后面不跟任何值的话他默认给 $REPLY 赋值，之后可以取这个值作为read进来的值。</p><p>在当输入内容后面加上 <code>/</code> 的话会起到输入时候的换行的作用，而使用 -r 参数会将 <code>/</code>按照原样输出出来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"input var1 is <span class="variable">$var1</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Enter a string terminated by a \\, then press &lt;ENTER&gt;."</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Then, enter a second string (no \\ this time), and again press &lt;ENTER&gt;."</span></span><br><span class="line"><span class="built_in">read</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"the default value is <span class="variable">$REPLY</span>"</span></span><br><span class="line"><span class="comment"># 当read后面不写具体值的时候会把值付给 REPLY</span></span><br></pre></td></tr></table></figure><p>read有很多有用的参数可以调用，实现复杂的输入功能。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">read</span> -s -n1 -p <span class="string">"Hit a key "</span> keypress</span><br><span class="line"><span class="comment"># read 有很多非常有意思的参数，比如 -s的意思就是不要回显输入</span></span><br><span class="line"><span class="comment"># -n1 的意思是输入指定数量的字符</span></span><br><span class="line"><span class="comment"># -p 是先输出前面的提示。</span></span><br><span class="line"><span class="built_in">echo</span>; <span class="built_in">echo</span> <span class="string">"Keypress was "</span>\<span class="string">"<span class="variable">$keypress</span>\""</span>.<span class="string">"</span></span><br></pre></td></tr></table></figure><p>read也可以使用文件作为输入的源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"文件temp_file中内容有两行 一行是hello world 第二行是 Hello World"</span></span><br><span class="line"><span class="built_in">read</span> var1 var2 &lt; temp_file</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"var1 is <span class="variable">$var1</span> var2 is <span class="variable">$var2</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"这里显然输出的第一行的内容"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"---------------------------"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"其实还能自定义IFS分割符然后根据规则自定义文件输入"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"all users in the list:"</span></span><br><span class="line">OIFS=<span class="variable">$IFS</span> ; IFS=:</span><br><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> name passwd uid gid fullname ignore</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$name</span> (<span class="variable">$fullname</span>)"</span></span><br><span class="line"><span class="keyword">done</span> &lt; /etc/passwd</span><br><span class="line">IFS=<span class="variable">$OIFS</span></span><br></pre></td></tr></table></figure><h3 id="文件系统操作"><a href="#文件系统操作" class="headerlink" title="文件系统操作"></a>文件系统操作</h3><p>操作文件系统的命令有很多但是都非常的常用也非常的简单。这里不做具体的说明其中举一两个非常常见的。</p><p>cd : 切换目录</p><p>pwd ： 查看当前工作目录</p><h3 id="变量操作"><a href="#变量操作" class="headerlink" title="变量操作"></a>变量操作</h3><p>let 是能够进行简单变量运算的命令 比如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> a=1+2</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$a</span></span><br><span class="line"><span class="built_in">let</span> b=<span class="string">"2+3"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$b</span></span><br></pre></td></tr></table></figure><p>eval 命令是能够将字符串转换成成命令。并且可以多次调用以去评估是否是命令去执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> command_string=<span class="string">"ps ax"</span></span><br><span class="line"> process=<span class="string">"ps ax"</span></span><br><span class="line"> <span class="built_in">eval</span> <span class="string">"<span class="variable">$command_string</span>"</span> | grep <span class="string">"<span class="variable">$process</span>"</span></span><br><span class="line"><span class="comment"># 26973 pts/3    R+     0:00 grep --color ps ax</span></span><br><span class="line"><span class="comment"># 26974 pts/3    R+     0:00 ps ax</span></span><br><span class="line"></span><br><span class="line">a=<span class="string">'$b'</span></span><br><span class="line">b=<span class="string">'$c'</span></span><br><span class="line">c=d</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$a</span>             <span class="comment"># $b</span></span><br><span class="line">                    <span class="comment"># First level.</span></span><br><span class="line"><span class="built_in">eval</span> <span class="built_in">echo</span> <span class="variable">$a</span>        <span class="comment"># $c</span></span><br><span class="line">                    <span class="comment"># Second level.</span></span><br><span class="line"><span class="built_in">eval</span> <span class="built_in">eval</span> <span class="built_in">echo</span> <span class="variable">$a</span>   <span class="comment"># d</span></span><br><span class="line">                    <span class="comment"># Third level.</span></span><br></pre></td></tr></table></figure><p>set和unset命令，一看就知道是设置和取消变量的意思。</p><p>export 命令一般使用在设置环境变量上，如在/etc/profile文件中设置JAVA_HOME</p><p>declare和typeset命令指定和/或限制变量的属性。</p><p>getopts 是能够定义属性的 比如 在解压tar包的时候使用<code>-xvf</code><br>之类的命令的时候就是使用getopts来达到不同的 -a -b 之类的实现。这个命令一般出现在case 或者while循环中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="built_in">getopts</span> <span class="string">":abcde:fg"</span> Option</span><br><span class="line"><span class="comment"># Initial declaration.</span></span><br><span class="line"><span class="comment"># a, b, c, d, e, f, and g are the options (flags) expected.</span></span><br><span class="line"><span class="comment"># The : after option 'e' shows it will have an argument passed with it.</span></span><br><span class="line"><span class="comment"># e参数后面的的表示会有参数传递给他</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="keyword">case</span> <span class="variable">$Option</span> <span class="keyword">in</span></span><br><span class="line">    a ) <span class="comment"># Do something with variable 'a'.</span></span><br><span class="line">    b ) <span class="comment"># Do something with variable 'b'.</span></span><br><span class="line">    ...</span><br><span class="line">    e)  <span class="comment"># Do something with 'e', and also with $OPTARG,</span></span><br><span class="line">        <span class="comment"># which is the associated argument passed with option 'e'.</span></span><br><span class="line">    ...</span><br><span class="line">    g ) <span class="comment"># Do something with variable 'g'.</span></span><br><span class="line">  <span class="keyword">esac</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">shift</span> $((<span class="variable">$OPTIND</span> - 1))</span><br><span class="line"><span class="comment"># Move argument pointer to next.</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Bash </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bash </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bash学习记录（七）循环和分支（1）</title>
      <link href="/2018/06/12/2018-06-11-bash_07_bash%E4%B8%AD%E7%9A%84%E5%BE%AA%E7%8E%AF%E5%92%8C%E5%88%86%E6%94%AF/"/>
      <url>/2018/06/12/2018-06-11-bash_07_bash%E4%B8%AD%E7%9A%84%E5%BE%AA%E7%8E%AF%E5%92%8C%E5%88%86%E6%94%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="循环和分支"><a href="#循环和分支" class="headerlink" title="循环和分支"></a>循环和分支</h1><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><p>循环就是一块当条件为真的迭代的代码块。</p><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><p>for arg in [list] 这是最基础的循环形式。如果do和for在一行里，那么就需要在do前面加分号如：<code>for arg in list ;do</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> arg <span class="keyword">in</span> list</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">.. commend(s)</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>for循环有很多用法，举几个例子来了解一下for循环都能够干些什么吧。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># for i in "hello world !" # 这样当作整个字符串</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span>  hello world !</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="comment"># 与命令结合</span></span><br><span class="line"><span class="keyword">if</span> [ -e <span class="string">"/bin/bash"</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"is exist"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出当前目录下匹配文件的内容 类似使用find命令</span></span><br><span class="line">FILE=<span class="string">"*txt"</span></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> <span class="variable">$FILE</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Contents of <span class="variable">$file</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"------------------"</span></span><br><span class="line">cat <span class="string">"<span class="variable">$file</span>"</span></span><br><span class="line"><span class="built_in">echo</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果in list内容缺失就表示使用 in $@ 也就是所有传进来的参数</span></span><br><span class="line"><span class="keyword">for</span> a</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span>  <span class="string">"<span class="variable">$a</span>"</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="comment">#通过使用命令来构造for循环的list</span></span><br><span class="line"><span class="keyword">for</span> b <span class="keyword">in</span> `ls`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$b</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用for循环输出用户的信息</span></span><br><span class="line">PASSWORD_FILE=/etc/passwd</span><br><span class="line">n=1</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> $(awk <span class="string">'BEGIN&#123;FS=":";&#125;&#123;print $1&#125;'</span>&lt; <span class="string">"<span class="variable">$PASSWORD_FILE</span>"</span>)</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"USER #<span class="variable">$n</span>=<span class="variable">$name</span>"</span></span><br><span class="line"><span class="built_in">let</span> <span class="string">"n+=1"</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#使用函数给for循环作值</span></span><br><span class="line"><span class="function"><span class="title">give_parm</span></span>()&#123;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"1 2 3 5 6"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> $(give_parm)</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$c</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 类C语言的for循环</span></span><br><span class="line"><span class="keyword">for</span> (( ai=1;ai&lt;5;ai++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$ai</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><p>while循环用来测试一个条件,并且一直循环直到条件为true也就是退出码为0的时候退出循环。一般while循环用在提前不知道循环次数的时候。while循环使用中括号把条件括起来，也可以使用双中括号。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> [condition]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">····commends</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>当while有多个条件的时候，只有最后一个参数会决定循环次数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="built_in">echo</span> <span class="string">"previous-variable = <span class="variable">$previous</span>"</span></span><br><span class="line">      <span class="built_in">echo</span></span><br><span class="line">      previous=<span class="variable">$var1</span></span><br><span class="line">      [ <span class="string">"<span class="variable">$var1</span>"</span> != end ] <span class="comment"># Keeps track of what $var1 was previously.</span></span><br><span class="line">      <span class="comment"># Four conditions on *while*, but only the final one controls loop.</span></span><br><span class="line">      <span class="comment"># The *last* exit status is the one that counts.</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Input variable #1 (end to exit) "</span></span><br><span class="line">  <span class="built_in">read</span> var1</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"variable #1 = <span class="variable">$var1</span>"</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>也有类似C语言的while条件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (( a &lt;= LIMIT ))   <span class="comment">#  Double parentheses,</span></span><br><span class="line"><span class="keyword">do</span>                       <span class="comment"># + and no "$" preceding variables.</span></span><br><span class="line">  <span class="built_in">echo</span> -n <span class="string">"<span class="variable">$a</span> "</span></span><br><span class="line">  ((a += 1))             <span class="comment"># let "a+=1" 算数运算</span></span><br><span class="line">  <span class="comment"># Yes, indeed.</span></span><br><span class="line">  <span class="comment"># Double parentheses permit incrementing a variable with C-like syntax.</span></span><br><span class="line">  <span class="comment"># 双小括号允许递增一个变量使用类C的运算方式</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>同样的while后的条件可以是一个函数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">condition ()</span><br><span class="line">&#123;</span><br><span class="line">  ((t++))</span><br><span class="line">  <span class="keyword">if</span> [ <span class="variable">$t</span> -lt 5 ]</span><br><span class="line">  <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">return</span> 0  <span class="comment"># true</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">return</span> 1  <span class="comment"># false</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> condition</span><br><span class="line"><span class="comment">#     ^^^^^^^^^</span></span><br><span class="line"><span class="comment">#     Function call -- four loop iterations.</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"Still going: t = <span class="variable">$t</span>"</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>while可以和read命令进行结合，形成 <code>while read</code> 结构体，能够有效的读和处理文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> line</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$line</span> <span class="comment">#读取1.txt中的每一行</span></span><br><span class="line"><span class="keyword">done</span> &lt; 1.txt</span><br></pre></td></tr></table></figure><h3 id="until循环"><a href="#until循环" class="headerlink" title="until循环"></a>until循环</h3><p>until循环是和while循环正好相反，until会一直进行循环，直到条件变为false；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">until [ condition-is-true ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"> <span class="built_in">command</span>(s)...</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Bash </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bash </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bash学习记录（八）循环和分支（2）</title>
      <link href="/2018/06/12/2018-06-12-bash_08_bash%E4%B8%AD%E7%9A%84%E5%BE%AA%E7%8E%AF%E5%92%8C%E5%88%86%E6%94%AF%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2018/06/12/2018-06-12-bash_08_bash%E4%B8%AD%E7%9A%84%E5%BE%AA%E7%8E%AF%E5%92%8C%E5%88%86%E6%94%AF%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="循环和分支-二"><a href="#循环和分支-二" class="headerlink" title="循环和分支(二)"></a>循环和分支(二)</h1><h2 id="多重循环"><a href="#多重循环" class="headerlink" title="多重循环"></a>多重循环</h2><p>就像C，Java一样，bash同样可以实现多重循环,下面的例子简单的实现双重循环，如果加上循环控制可能就更难一些了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ((i=0;i&lt;5;i++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="keyword">for</span> bin <span class="keyword">in</span> 1 2 4</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$bin</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h2 id="循环控制"><a href="#循环控制" class="headerlink" title="循环控制"></a>循环控制</h2><p>影响循环行为的语句。有 <code>break</code> 和 <code>continue</code> 两个循环控制命令,break 命令可以终止循环，而continue可以跳过当前循环提前进入下一次循环，这里和C语言定义的类似。</p><p>下面举一个简单的break和continue的例子；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">LIMIT=9</span><br><span class="line">a=0</span><br><span class="line"><span class="comment">#while [[ $a -le $LIMIT ]]</span></span><br><span class="line"><span class="comment">#do</span></span><br><span class="line"><span class="comment">#let "a=a+1"</span></span><br><span class="line"><span class="comment">#if [ $a -eq 3 ] || [ $a -eq 11 ]</span></span><br><span class="line"><span class="comment">#then</span></span><br><span class="line"><span class="comment">#continue</span></span><br><span class="line"><span class="comment">#fi</span></span><br><span class="line"><span class="comment">#echo $a</span></span><br><span class="line"><span class="comment"># done</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> [[ <span class="variable">$a</span> -le <span class="variable">$LIMIT</span> ]]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">let</span> <span class="string">"a=a+1"</span></span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$a</span> -gt 2 ]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">break</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$a</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>简单的break循环只能跳出最内容的循环，而不能跳出多层的循环，可以使用 <code>break N</code> 来跳出多层循环。n为想要跳出循环的层数。</p><p>和break像似的continue，同样可以使用 <code>continue N</code> 来实现。这里使用到了一个非常简单明了的例子</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="keyword">for</span> outer <span class="keyword">in</span> I II III IV V           <span class="comment"># outer loop</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span>; <span class="built_in">echo</span> -n <span class="string">"Group <span class="variable">$outer</span>: "</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># --------------------------------------------------------------------</span></span><br><span class="line">  <span class="keyword">for</span> inner <span class="keyword">in</span> 1 2 3 4 5 6 7 8 9 10  <span class="comment"># inner loop</span></span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> [[ <span class="string">"<span class="variable">$inner</span>"</span> -eq 7 &amp;&amp; <span class="string">"<span class="variable">$outer</span>"</span> = <span class="string">"III"</span> ]]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">      <span class="built_in">continue</span> 2  <span class="comment"># Continue at loop on 2nd level, that is "outer loop".</span></span><br><span class="line">                  <span class="comment"># Replace above line with a simple "continue"</span></span><br><span class="line">                  <span class="comment"># to see normal loop behavior.</span></span><br><span class="line">    <span class="keyword">fi</span>  </span><br><span class="line">    <span class="built_in">echo</span> -n <span class="string">"<span class="variable">$inner</span> "</span>  <span class="comment"># 7 8 9 10 will not echo on "Group III."</span></span><br><span class="line">  <span class="keyword">done</span>  </span><br><span class="line">  <span class="comment"># --------------------------------------------------------------------</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span>; <span class="built_in">echo</span></span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure><h2 id="测试和分支"><a href="#测试和分支" class="headerlink" title="测试和分支"></a>测试和分支</h2><p>使用 <code>case</code> 和 <code>select</code> 结构体，不像一个循环，因为它没有一个迭代的一个过程，但是它们能够通过条件指导程序的流向。</p><h3 id="通过程序块控制程序流向"><a href="#通过程序块控制程序流向" class="headerlink" title="通过程序块控制程序流向"></a>通过程序块控制程序流向</h3><h4 id="Case-in-esac"><a href="#Case-in-esac" class="headerlink" title="Case (in) /esac"></a>Case (in) /esac</h4><p>在bash中的case结构类似C中的switch结构，是在拥有多种条件下可以使用到的代码块。case结构可以参见下面代码。 (其实是可以有condition的左边的括号的，嗯，可以加上的)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$variable</span>"</span> <span class="keyword">in</span> </span><br><span class="line"></span><br><span class="line"> <span class="string">"<span class="variable">$condition1</span>"</span> ) </span><br><span class="line"> <span class="built_in">command</span>... </span><br><span class="line"> ;; </span><br><span class="line"></span><br><span class="line"> <span class="string">"<span class="variable">$condition2</span>"</span> ) </span><br><span class="line"> <span class="built_in">command</span>... </span><br><span class="line"> ;;</span><br></pre></td></tr></table></figure><p>下面以后会非常有用处的例子</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="keyword">in</span></span><br><span class="line">  <span class="string">""</span>) <span class="built_in">echo</span> <span class="string">"Usage: <span class="variable">$&#123;0##*/&#125;</span> &lt;filename&gt;"</span>; <span class="built_in">exit</span> <span class="variable">$E_PARAM</span>;;</span><br><span class="line">                      <span class="comment"># No command-line parameters,</span></span><br><span class="line">                      <span class="comment"># or first parameter empty.</span></span><br><span class="line"><span class="comment"># Note that $&#123;0##*/&#125; is $&#123;var##pattern&#125; param substitution. </span></span><br><span class="line"><span class="comment"># 可以通过使用##partern把前面的./去掉</span></span><br><span class="line"></span><br><span class="line">  -*) FILENAME=./<span class="variable">$1</span>;;   <span class="comment">#  If filename passed as argument ($1)</span></span><br><span class="line">                      <span class="comment">#+ starts with a dash,</span></span><br><span class="line">                      <span class="comment">#+ replace it with ./$1</span></span><br><span class="line">                      <span class="comment">#+ so further commands don't interpret it</span></span><br><span class="line">                      <span class="comment">#+ as an option.</span></span><br><span class="line"></span><br><span class="line">  * ) FILENAME=<span class="variable">$1</span>;;     <span class="comment"># Otherwise, $1.</span></span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><h4 id="select"><a href="#select" class="headerlink" title="select"></a>select</h4><p>select是和case结构意义相同的结构体，可以使用自定义的PS3也就是选择提示符。格式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">select variable [<span class="keyword">in</span> list]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"> <span class="built_in">command</span>...</span><br><span class="line"> <span class="built_in">break</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">`</span><br></pre></td></tr></table></figure><p>简单实例，这个例子不完整需要再去考虑很多东西。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">PS3=<span class="string">"Choose your favorite vegetable:"</span></span><br><span class="line">select vegetable <span class="keyword">in</span> <span class="string">"beans"</span> <span class="string">"carrots"</span> <span class="string">"potatoes"</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$vegetable</span> = <span class="string">"beans"</span> ]] || [[ <span class="variable">$vegetable</span> = <span class="string">"carrots"</span> ]] || [[<span class="variable">$vegetable</span> = <span class="string">"potatoes"</span> ]]</span><br><span class="line"><span class="keyword">then</span> </span><br><span class="line"><span class="built_in">echo</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="string">"your favorite veggie is <span class="variable">$vegetable</span>"</span></span><br><span class="line"><span class="built_in">echo</span> </span><br><span class="line"><span class="built_in">continue</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"your vegetable not on this list"</span></span><br><span class="line"><span class="built_in">break</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Bash </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bash </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bash学习记录（九）命令置换和算数扩展</title>
      <link href="/2018/06/12/2018-06-16-bash_09_%E5%91%BD%E4%BB%A4%E7%BD%AE%E6%8D%A2/"/>
      <url>/2018/06/12/2018-06-16-bash_09_%E5%91%BD%E4%BB%A4%E7%BD%AE%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="命令置换"><a href="#命令置换" class="headerlink" title="命令置换"></a>命令置换</h1><p>命令置换可以输出一条或者多条命令的输出。可以让命令在不同语境下起作用，最常见的是使用  <code>\</code>`` 符号进行对命令的包裹，这样就能够输出使用命令得出的结果。可以成为另外一个命令的参数，也可以成为循环的参数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> `hostname`</span><br><span class="line"><span class="built_in">echo</span> $(<span class="string">"hostname"</span>)</span><br><span class="line"><span class="comment"># 两种使用都可以，都能够达到命令置换的目的</span></span><br></pre></td></tr></table></figure><h1 id="算数运算"><a href="#算数运算" class="headerlink" title="算数运算"></a>算数运算</h1><p>使用反引号，双括号，和let进行相对来说简单</p><h2 id="使用反引号"><a href="#使用反引号" class="headerlink" title="使用反引号"></a>使用反引号</h2><p>使用反引号内用expr命令进行整型数的运算。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">z=`expr <span class="variable">$z</span>+1`</span><br></pre></td></tr></table></figure><h2 id="使用双括号和let进行运算"><a href="#使用双括号和let进行运算" class="headerlink" title="使用双括号和let进行运算"></a>使用双括号和let进行运算</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">z=$((z+3))</span><br><span class="line"></span><br><span class="line"><span class="built_in">let</span> z=z+3</span><br><span class="line"><span class="built_in">let</span> <span class="string">"z += 3"</span>  <span class="comment">#  Quotes permit the use of spaces in variable assignment.</span></span><br></pre></td></tr></table></figure><p>今天的内容有点少。。。</p>]]></content>
      
      
      <categories>
          
          <category> Bash </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bash </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式的入门</title>
      <link href="/2018/06/07/2018-06-06-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2018/06/07/2018-06-06-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p>最近会时常遇到编写正则表达式，所以现在写一篇正则表达式的文章来简单记录一下学习正则的过程。</p><p>在这个网站有正则表达式的中文文档 -》 <a href="http://tool.oschina.net/uploads/apidocs/jquery/regexp.html" target="_blank" rel="noopener">正则表达式手册</a></p><h2 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h2><p>一般使用反斜杠 \ 来转义特殊字符 如在正则中有特殊意义的* 或者. 如果要使用原意则需要使用\来进行转义 如 \*。下面介绍几个具体的实例。</p><ol><li>^ 匹配输入字符串的开始位置</li><li>$ 匹配输入字符串的结束位置</li><li>. 匹配除去换行符之外的所有字符</li><li>* 匹配前面字符0次或者多次</li><li>? 匹配前面大的字符0次或者1次</li><li>+ 匹配前面字符一次或多次</li><li>\w 匹配字母或者数字</li><li>\s 匹配任意空白</li><li>\d 匹配数字</li><li>\b 匹配单词的开始或者结束</li></ol><p>一般使用 ^ 开头并且以 $ 结束，如验证5-12位数字的时候可以这样写 <code>^\d{5,12}$</code> 当字符串为 <code>&quot;hello world</code> 是，使用$时匹配到一处，而使用\b时会匹配到四处，分别为每个单词的开头和结尾。</p><p>特殊字符非常重要，是正则表达式的基本。在上面的例子中使用到了重复，也就是{m,n} m和n是重复的次数，如果n存在，那么就重复m到n次如果不存在，就重复m次。</p><h2 id="字符匹配"><a href="#字符匹配" class="headerlink" title="字符匹配"></a>字符匹配</h2><p><strong>当使用到非特殊字符的时候</strong>，可以使用中括号，如 [aeiou]用来表示其中的字符都可以匹配到。比如 字符串 <code>‘how hello’</code> 使用到正则表达式 <code>h[oe]</code> 这样可以提示匹配到两处</p><p><strong>当需要使用与特殊字符相反的含义的时候</strong> 使用反斜杠+大写字符的格式来进行匹配。比如匹配非字母和数字的字符就应该使用<code>\W</code>(因为使用匹配字母和数字的特殊字符是\w)。非特殊字符的反义使用^号。如[^aeiou]表示原因字符意外的任意字符。</p><p><strong>当想匹配多种情况的时候</strong>，比如我想匹配x或者y字符串那么就使用 x|y 来表示匹配x或者y。这样可以解决很多二义性的匹配串。</p><h2 id="分组的匹配"><a href="#分组的匹配" class="headerlink" title="分组的匹配"></a>分组的匹配</h2><p>当想对一个字符串进行重复，那么可以使用分组的功能。使用小括号来实现。典型的ip地址的匹配就可以这样使用(\d{1,3}.){3}\d{1,3}</p><p>使用 <code>\\+数字</code> 的形式 来实现重复那个分组的操作<br>如 <code>\b(\w+)\b\s+\1\b</code> 就可以匹配相同的字符串。</p><h2 id="贪婪模式"><a href="#贪婪模式" class="headerlink" title="贪婪模式"></a>贪婪模式</h2><p>当使用?紧跟其他任何一个其他限制符之后比如. * 之后，匹配模式是非贪婪的，尽可能少的匹配搜素的所有字符串。比如搜多ppppppp字符串，使用‘o+?’会匹配到单个o</p><h2 id="关于-的后续"><a href="#关于-的后续" class="headerlink" title="关于 的后续"></a>关于 的后续</h2><ul><li><p>(?:pattern) 匹配pattern但不获取结果。这在使用|来组合一个模式的各个部分非常有用，比如常规匹配两种字符串“username|userManner”可以使用user(?:name|Manner)来简写。</p></li><li><p>(?=pattern) 正向肯定预查。比如windows(?=95|03|NT)能够匹配到windows95中的windows而不能匹配到windowsxp中的windows</p></li><li><p>(?!pattern) 正向否定预查。与上面的意思相似，就是能够匹配到非的指定条件。比如windows(?!95|03|NT`能够匹配到windowsxp中的windows而不能匹配到windows95中的windows</p></li><li><p>(?&lt;=pattern) 反向肯定预查。和第一个很相近，只不过方向不同。</p></li><li><p>(?&lt;!) 反向否定预查 。</p></li></ul><p>这次的正则表达式就先总结到这里，以后肯定会遇到更多的关于正则的问题。有时间一定还要读读<a href="https://www.regular-expressions.info/" target="_blank" rel="noopener">英文的正则教程</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bash学习记录（五） bash中关于变量的更多的知识</title>
      <link href="/2018/05/02/2018-05-05-bash_05_%E6%93%8D%E4%BD%9C%E5%8F%98%E9%87%8F/"/>
      <url>/2018/05/02/2018-05-05-bash_05_%E6%93%8D%E4%BD%9C%E5%8F%98%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h1><p>bash支持很多关于字符串的操作，不过可惜的是，这些操作缺乏统一性，有一些是使用参数等，另外一些是通过内建命令<code>expr</code>命令来实现，这会导致不同的语法功能的重叠，会比较混乱，下面简单介绍一下使用参数和命令的实现字符串的操作。</p><ul><li><p>字符串长度（String Length）</p><ol><li><p>$(#string) 这里是和C语言中的strlen()是相同的。</p></li><li><p>expr length $string 同样表示string串的长度。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line">string=abcdefgHIGKL</span><br><span class="line"><span class="comment">#使用第一种方法$(#string)</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"string的长度是：<span class="variable">$&#123;#string&#125;</span>"</span></span><br><span class="line"><span class="comment">#使用第二种方法使用expr内建命令 优点简单易懂</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"string的长度是：`expr length <span class="variable">$string</span>`"</span></span><br><span class="line">`</span><br></pre></td></tr></table></figure></li></ol></li><li><p>字符串从开头匹配子字串的长度</p><p>  方法如下：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">stringZ=abcABC123ABCab </span><br><span class="line"><span class="built_in">echo</span> `expr match <span class="string">"<span class="variable">$stringZ</span>"</span> <span class="string">'abc[A-Z]*.2'</span>`</span><br><span class="line"><span class="built_in">echo</span> `expr <span class="variable">$stringZ</span> : <span class="string">'abc[A-Z]*.2'</span>`</span><br></pre></td></tr></table></figure></li><li><p>匹配到子串的位置 (index)</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> `expr index <span class="variable">$stringZ</span> <span class="string">'abc[A-Z]*.2'</span>`</span><br></pre></td></tr></table></figure></li><li><p>子字符串的截取</p><ol><li><p>${string:position} 从positon位置截取字符串string。</p></li><li><p>${string:positong:length} 从positon位置截取字符串string，并且限定截取长度为length。</p></li><li><p>expr substr $string $positon $length 意思同上。</p></li><li><p>expr match $string ‘\(substring \)’ 这里的substring是正则表达式。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#截取字符串</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;stringZ:5&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;stringZ:5:4&#125;</span></span><br><span class="line"><span class="built_in">echo</span> `expr substr <span class="variable">$stringZ</span> 5 4`</span><br><span class="line"><span class="built_in">echo</span> `expr match <span class="variable">$stringZ</span> <span class="string">'\(abc[A-Z]*.2\)'</span>`</span><br></pre></td></tr></table></figure></li></ol></li><li><p>从字符串中移除子字符串</p><ol><li><p>${string#substring} substring是子字符串。并且需要注意的是：<strong>该方法表示的是向后移除该子字符串最短匹配到的字符串。</strong></p></li><li><p>${string##substring} 与上面的正好相反。<strong>该方法表示的是向后移除该字符串最长匹配到的字符串。</strong></p></li><li><p>${string%substring} <strong>该方法表示的是由后向前移除该子字符串最短匹配到的字符串。</strong></p></li><li><p>${string%%substring} <strong>该方法表示的是由后向前移除该字符串最长匹配到的字符串。</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"移除字符串"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;stringZ#a*b&#125;</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;stringZ##a*b&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;stringZ%a*c&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;stringZ%%a*c&#125;</span></span><br><span class="line"><span class="comment">#结果：</span></span><br><span class="line"><span class="comment">#ABC123ABCabc</span></span><br><span class="line"><span class="comment">#c</span></span><br><span class="line"><span class="comment">#abcABC123ABC</span></span><br><span class="line"><span class="comment">#</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p>子字符串替换</p><ol><li><p>${string/substring/replacement}  替换第一个匹配到substring的字符串，替换为replacement。</p></li><li><p>${string//substring/replacement} 替换所有匹配到的字符。</p></li><li><p>${string/#substring/replacement} 替换由前向后匹配到的字符。</p></li><li><p>${string/%substring/replacement} 替换由后向前匹配到的字符。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"---------字符串替换---------"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;stringZ/abc/xyz&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;stringZ//abc/xyz&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;stringZ/#abc/xyz&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;stringZ/%abc/xyz&#125;</span></span><br><span class="line"><span class="comment">#结果：</span></span><br><span class="line"><span class="comment">#xyzABC123ABCabc</span></span><br><span class="line"><span class="comment">#xyzABC123ABCxyz</span></span><br><span class="line"><span class="comment">#xyzABC123ABCabc</span></span><br><span class="line"><span class="comment">#abcABC123ABCxyz</span></span><br></pre></td></tr></table></figure></li></ol></li></ul><h2 id="使用awk操作字符串"><a href="#使用awk操作字符串" class="headerlink" title="使用awk操作字符串"></a>使用awk操作字符串</h2><p>现学先卖，<a href="http://blog.jobbole.com/109089/" target="_blank" rel="noopener">三十分钟学会AWK</a>,快速了解和应用awk。</p><p>基于以上，使用awk练习。</p><p>工作流分为大致三部分， read-&gt;excute-&gt;repeat,实现对文本的处理。</p><h3 id="程序机构"><a href="#程序机构" class="headerlink" title="程序机构"></a>程序机构</h3><ul><li><p>BEGIN 语法：<code>BEGIN {awk-commands}</code> 是可以省略的部分块，主要作用是声明变量，初始化变量，</p></li><li><p>BODY块 ：<code>{commonds}</code>，是必须填写的部分，主要作用是处理文本，会对输入的每一行都执行body块中的命令，并且body是没有关键字的。</p></li></ul><p>-END ：<code>END {commands}</code>,同BEGIN，是可以省略的部分</p><h3 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h3><ul><li><p>awk命令行，可以通过执行<code>awk [-option] files</code>来实现对files文件的处理。 如 <code>awk {print} mark.txt</code> 这里就不具体举例了，开头的链接里讲的非常详细，这里只做简单的记录和查看。</p></li><li><p>使用命令文件方式 <code>awk -f command.awk marks.txt</code> 使用-f参数，可以使用文件中的命令。</p></li><li><p>awk基本选项 ： 这里不具体总结，linux环境下终端 <code>man awk</code>可以看到非常多的选项。</p></li></ul><h3 id="基本使用示例"><a href="#基本使用示例" class="headerlink" title="基本使用示例"></a>基本使用示例</h3><ol><li><p>基本打印文件内容</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ awk <span class="string">'&#123;print&#125;'</span> mark.txt </span><br><span class="line">1)  Amit    Physics  80</span><br><span class="line">2)  Rahul   Maths    90</span><br><span class="line">3)  Shyam   Biology  87</span><br><span class="line">4)  Kedar   English  85</span><br><span class="line">5)  Hari    History  89</span><br></pre></td></tr></table></figure></li><li><p>打印具体项内容</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ awk <span class="string">'&#123;print $1 "\t" $2 &#125;'</span> mark.txt</span><br><span class="line">1)      Amit</span><br><span class="line">2)      Rahul</span><br><span class="line">3)      Shyam</span><br><span class="line">4)      Kedar</span><br><span class="line">5)      Hari</span><br></pre></td></tr></table></figure></li><li><p>添加限定条件的打印内容</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ awk  <span class="string">'/a/  &#123;print $1 "\t" $2 &#125;'</span> mark.txt</span><br><span class="line">2)      Rahul</span><br><span class="line">3)      Shyam</span><br><span class="line">4)      Kedar</span><br><span class="line">5)      Hari</span><br></pre></td></tr></table></figure><p> 结果只显示匹配到a的行</p></li><li><p>打印匹配到的行数</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ awk <span class="string">'BEGIN&#123;count=0&#125; /a/ &#123; count++&#125; END&#123;print count&#125;'</span> mark.txt</span><br><span class="line">4</span><br></pre></td></tr></table></figure></li><li><p>打印字符数量超过16的行</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ awk <span class="string">'length($0) &gt; 18'</span> marks.txt</span><br><span class="line">3) Shyam   Biology   87</span><br><span class="line">4) Kedar   English   85</span><br></pre></td></tr></table></figure></li></ol><p>NOTE:在这里的参数和bash中的参数类似。$0当前行，$1之后表示对应文件的行的列。</p><h3 id="内建变量"><a href="#内建变量" class="headerlink" title="内建变量"></a>内建变量</h3><p>AWK提供了很多内建变量提供使用，能够起到很大的作用。</p><h4 id="标准awk变量"><a href="#标准awk变量" class="headerlink" title="标准awk变量"></a>标准awk变量</h4><ul><li><p>ARGC 命令行参数个数</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ awk <span class="string">'BEGIN&#123;print "argument=",ARGC&#125;'</span> one two three</span><br><span class="line">argument= 4</span><br></pre></td></tr></table></figure></li><li><p>ARGV  命令行参数数组 如 <code>ARGV[1]=...</code></p></li><li><p>CONVFMT  数字的约定格式，默认值是%.6g</p></li><li><p>ENVIRON 环境变量 </p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ awk <span class="string">'BEGIN &#123;print "User is",ENVIRON["USER"]&#125;'</span></span><br><span class="line">User is nanyin</span><br></pre></td></tr></table></figure></li><li><p>FILENAME 当前文件的名称</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ awk <span class="string">'END&#123;print "this file name is", FILENAME&#125;'</span> mark.txt</span><br><span class="line">this file name is mark.txt</span><br></pre></td></tr></table></figure></li><li><p>FS 分割符 默认是空格也可以使用-F设置分割符</p></li><li><p>NF 当前行的字段数目</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ awk <span class="string">'END&#123;print NF&#125;'</span> mark.txt</span><br><span class="line">4</span><br></pre></td></tr></table></figure></li><li><p>NR 行号 </p></li><li><p>FNR 当前文件的行号</p></li><li><p>OFS 输出字段分隔符</p></li><li><p>ORS 输出行分割符</p></li><li><p>RLENGTH 表示match函数匹配字符床的长度</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ awk <span class="string">'BEGIN &#123;if(match("One  Three","ree")) &#123;print RLENGTH&#125;&#125;'</span></span><br><span class="line">3</span><br></pre></td></tr></table></figure></li><li><p>RSTART 表示match函数第一次匹配到的位置</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ awk <span class="string">'BEGIN &#123;if(match("One  Three","ree")) &#123;print RSTART&#125;&#125;'</span> </span><br><span class="line">8</span><br></pre></td></tr></table></figure></li></ul><h3 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h3><p>与C语言的操作符基本相同，如数字的一元二元三元操作等，字符串的链接，数组元素等</p><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><p>AWK对正则的处理非常强大，通常你一个小小的正则表达式能够处理很复杂的问题。关于正则，有时间整理一篇专门关于正则的文章。</p><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>AWK支持关联数组，也就是说，不仅可以使用数字索引的数组，还可以使用字符串作为索引。删除数组元素使用delete语句</p><h3 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h3><p>流程控制if while for 与C相同</p><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>查手册吧。。一次性看不完。。。。<a href="https://www.gnu.org/software/gawk/manual/gawk.html#Built_002din" target="_blank" rel="noopener">内建函数手册</a>，这里有在这章比较重要的字符串函数。接下来就来看看有哪些函数比较重要。</p><h4 id="AWK对字符串操作的函数"><a href="#AWK对字符串操作的函数" class="headerlink" title="AWK对字符串操作的函数"></a>AWK对字符串操作的函数</h4><p> 整理出awk对字符串的几个具体函数操作。</p><ol><li><p>asort(source,dest,how) </p></li><li><p>asorti(source,dest,how)</p><p>以上两个函数的how先不解释，前两个参数分别为source数组和排序方式，第二个可以不写，默认使用第一位的进行排位。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">'BEGIN&#123;a[0]="xiaohong";a[1]="aiaolan";asort(a);for(i=2;i&gt;=0;i--) &#123;print a[i]&#125;&#125;'</span></span><br><span class="line">    xiaohong</span><br><span class="line">    aiaolan</span><br><span class="line">`</span><br></pre></td></tr></table></figure><p>asorti()函数会将顺序替换到数组的value处如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">'BEGIN&#123;a[0]="xiaohong";a[1]="aiaolan";asorti(a);for(i=2;i&gt;=0;i--) &#123;print a[i]&#125;&#125;'</span></span><br><span class="line">    1</span><br><span class="line">    0</span><br></pre></td></tr></table></figure></li><li><p>gensub(regexp,replacement,how[,target]) 类似gsub和sub</p><p>替换匹配到的正则<em>regexp</em>为replacement.如果how是g或者G(global的简写),则表示替换所有使用regexp匹配到的字符串,target是目标字符串</p><p>如果使用regexp未匹配到，则返回原始target的值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一个</span></span><br><span class="line"><span class="built_in">echo</span> a b c a d | gawk <span class="string">'&#123;print gensub(/a/,"AA",2)&#125;'</span> </span><br><span class="line">a b c AA d</span><br><span class="line"><span class="comment"># 第二个</span></span><br><span class="line">awk <span class="string">'</span></span><br><span class="line"><span class="string">BEGIN&#123;</span></span><br><span class="line"><span class="string">a="abc def"</span></span><br><span class="line"><span class="string">b = gensub(/(.+) (.+)/,"\\2 \\1","g",a)</span></span><br><span class="line"><span class="string">print b</span></span><br><span class="line"><span class="string">&#125;'</span></span><br><span class="line">def abc</span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li><p>gsub(regexp,replacement[,target]) </p><p> gsub中的‘g’其实是表示的是global,寻找目标的匹配到从左最长的，不重叠的,找到并且替换掉。</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; gsub(/Britain/, <span class="string">"United Kingdom"</span>); <span class="built_in">print</span> &#125;</span><br></pre></td></tr></table></figure><p> 返回的值为匹配到的次数</p></li><li><p>index(in,find)</p><p> 寻找in串内符合find匹配到的字符的index位置</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ awk <span class="string">'BEGIN&#123;</span></span><br><span class="line"><span class="string">quote&gt; print index("hello","lo")&#125;'</span></span><br><span class="line">4</span><br></pre></td></tr></table></figure></li><li><p>length([string]) 顾名思义，不解释了</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ awk <span class="string">'BEGIN&#123;print length("hello")&#125;'</span></span><br><span class="line">5</span><br></pre></td></tr></table></figure><p> NOTE: If no argument is supplied, length() returns the length of $0. </p></li><li><p>match(string,regexp,[,array]) </p><p> 使用正则匹配字符串，返回匹配到的位置，若未匹配到返回0</p></li><li><p>split(string,array[,fieldsep[,seps]])</p><p> 分割string字符串，使用array存放分割后产生的字符组，使用fieldsep组为分割符，seps存放每次分割产生的分割符。一个分割出来的存放到array[1]中，第二个存放到array[2]中，以此类推。如果分割符fieldsep不写，则默认分割符为空格。</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ awk <span class="string">'BEGIN&#123;print split("cul-de-sac",a,"-",seps);for(i=1;i&lt;4;i++)&#123;print a[i]&#125;&#125;'</span> </span><br><span class="line">3</span><br><span class="line">cul</span><br><span class="line">de</span><br><span class="line">sac</span><br></pre></td></tr></table></figure></li><li><p>sprintf(format,expression1,..)</p><p> 是printf的功能，并且能够返回字符串</p></li><li><p>strtonum (str)</p><p>类似java的parseInt()函数，由String字符串转成数字</p></li><li><p>sub（regexp,replacement[,target]）</p><p>最左最长匹配原则进行匹配，sub个gsub的作用相同，分割字符串，并进行替换</p></li><li><p>substr(string,start[,end])</p><p>分割字符串</p></li><li><p>tolower(string) &amp; toupper(string)</p><p>大小写转换</p></li></ol><p>关于awk的就总结到这了。。十分基础的总结。。推荐文档，清晰明了。下一篇打算先整理整理正则表达式。现在哪里都会用到正则，还是很有必要看看正则的。</p>]]></content>
      
      
      <categories>
          
          <category> Bash </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bash </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java设计模式学习记录（一）</title>
      <link href="/2018/04/17/2018-04-17-Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%AC%E4%B8%80%E7%AF%87/"/>
      <url>/2018/04/17/2018-04-17-Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%AC%E4%B8%80%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h1 id="Java设计模式学习记录（一）"><a href="#Java设计模式学习记录（一）" class="headerlink" title="Java设计模式学习记录（一）"></a>Java设计模式学习记录（一）</h1><p>每次学习完设计模式，过一阵就忘了，所以写几篇博客记录下，让自己的记忆更深刻一下。</p><p>推荐 <a href="https://www.cnblogs.com/malihe/p/6891920.html" target="_blank" rel="noopener">Java中23种设计模式–超快速入门及举例代码</a> 这篇博客。能快速了解设计模式。</p><p>推荐github上的项目<a href="https://github.com/iluwatar/java-design-patterns" target="_blank" rel="noopener">java-design-patterns</a> 有例子源码，可以通过具体例子了解设计模式。</p><h2 id="Java设计模式的基本分类"><a href="#Java设计模式的基本分类" class="headerlink" title="Java设计模式的基本分类"></a>Java设计模式的基本分类</h2><p>java的设计模式大体上分为三大类：</p><ul><li><p>创建型模式（5种）：工厂方法模式，抽象工厂模式，单例模式，建造者模式，原型模式。</p></li><li><p>结构型模式（7种）：适配器模式，装饰器模式，代理模式，外观模式，桥接模式，组合模式，享元模式。</p></li><li><p>行为型模式（11种）：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式</p></li></ul><h2 id="设计模式遵循的原则有六个"><a href="#设计模式遵循的原则有六个" class="headerlink" title="设计模式遵循的原则有六个"></a>设计模式遵循的原则有六个</h2><ul><li><p><strong>开闭原则（Open Close Principle）</strong></p><p>  　对扩展开放，对修改关闭。</p></li><li><p><strong>里氏代换原则（Liskov Substitution Principle）</strong></p><p>  只有当衍生类可以替换掉基类，软件单位的功能不受到影响时，基类才能真正被复用，而衍生类也能够在基类的基础上增加新的行为。</p></li><li><p><strong>依赖倒转原则（Dependence Inversion Principle）</strong></p><p>  　　这个是开闭原则的基础，对接口编程，依赖于抽象而不依赖于具体。</p></li><li><p><strong>接口隔离原则（Interface Segregation Principle）</strong></p><p>  使用多个隔离的接口来降低耦合度。</p></li><li><p><strong>迪米特法则（最少知道原则）（Demeter Principle）</strong></p><p>  一个实体应当尽量少的与其他实体之间发生相互作用，使得系统功能模块相对独立。</p></li><li><p><strong>合成复用原则（Composite Reuse Principle）</strong></p><p>  　原则是尽量使用合成/聚合的方式，而不是使用继承。继承实际上破坏了类的封装性，超类的方法可能会被子类修改。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bash学习记录（四） bash中的操作及相关话题</title>
      <link href="/2018/04/12/2018-04-16-bash_operationAndRelatedTopics/"/>
      <url>/2018/04/12/2018-04-16-bash_operationAndRelatedTopics/</url>
      
        <content type="html"><![CDATA[<h1 id="bash学习记录（四）-bash中的操作及相关话题"><a href="#bash学习记录（四）-bash中的操作及相关话题" class="headerlink" title="bash学习记录（四） bash中的操作及相关话题"></a>bash学习记录（四） bash中的操作及相关话题</h1><h2 id="计算符-Operators"><a href="#计算符-Operators" class="headerlink" title="计算符 Operators"></a>计算符 Operators</h2><h3 id="一-赋值（assignment）"><a href="#一-赋值（assignment）" class="headerlink" title="一.赋值（assignment）"></a>一.赋值（assignment）</h3><p><em>变量赋值</em>：初始化变量或者改变变量的值</p><p>在所有的赋值操作中，计算赋值和字符串复制都是可以的，并不存在差异。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var=27</span><br><span class="line">category=minerals  </span><br><span class="line"><span class="comment"># No spaces allowed after the "=".</span></span><br></pre></td></tr></table></figure><h3 id="二-计算操作符"><a href="#二-计算操作符" class="headerlink" title="二.计算操作符"></a>二.计算操作符</h3><p><code>+</code>，<code>-</code>，<code>*</code>，<code>/</code>,<code>%</code>（取模运算），<code>+=</code>，<code>-=</code>，<code>*=</code>,<code>/=</code>,<code>%=</code>这些操作符和其他语言（比如java）语义相同。唯一有个差异的是 <code>**</code> 是乘方操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#一般赋值</span></span><br><span class="line">i=1</span><br><span class="line">bash=<span class="string">"/bin/bash"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#一般操作符</span></span><br><span class="line"><span class="built_in">let</span> <span class="string">"z=i+1"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$z</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">let</span> <span class="string">"i+=2"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">let</span> <span class="string">"z=i**2"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$z</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>需要注意的是</strong>bash不能理解浮点数，他会默认把浮点数当作字符串来处理。</p></blockquote><blockquote><p>需要在脚本中使用 <code>bc</code>来计算浮点数</p></blockquote><h3 id="三-其他操作符"><a href="#三-其他操作符" class="headerlink" title="三.其他操作符"></a>三.其他操作符</h3><ul><li><p>按位操作：</p><p>  <code>&lt;&lt;</code> : bitwise left shift (multiplies by 2 for each shift position)</p><p>  <code>&gt;&gt;</code>: bitwise right shift (divides by 2 for each shift position)</p><p>  <code>&amp;,|，～，^</code> : 分别对应 位与，位或，位否,异或</p></li><li><p>逻辑操作</p><p>  <code>！</code> ：非</p><p>  <code>&amp;&amp;</code> ： AND</p><p>  <code>||</code>  ： OR</p></li><li><p>杂项</p><p>  <code>，</code> ：逗号操作符，连接多个计算表达式，但是需要注意的是，这样只能返回最后一个算式的值</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> <span class="string">"t1 = ((5 + 3, 7 - 1, 15 - 4))"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"t1 = <span class="variable">$t1</span>"</span>            <span class="comment"># t1 = 11</span></span><br><span class="line"><span class="comment"># Here t1 is set to the result of the last operation. Why?</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">let</span> <span class="string">"t2 = ((a = 9, 15 / 3))"</span>      <span class="comment"># Set "a" and calculate "t2".</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"t2 = <span class="variable">$t2</span>    a = <span class="variable">$a</span>"</span>         <span class="comment"># t2 = 5    a = 9</span></span><br><span class="line">`</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Bash </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bash </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bash学习记录（三） bash中的退出码和测试（Test）</title>
      <link href="/2018/04/12/2018-04-12-bash_exitCode/"/>
      <url>/2018/04/12/2018-04-12-bash_exitCode/</url>
      
        <content type="html"><![CDATA[<h1 id="bash学习记录（三）-bash退出码和测试"><a href="#bash学习记录（三）-bash退出码和测试" class="headerlink" title="bash学习记录（三） bash退出码和测试"></a>bash学习记录（三） bash退出码和测试</h1><h2 id="1-Bash退出码"><a href="#1-Bash退出码" class="headerlink" title="1. Bash退出码"></a>1. Bash退出码</h2><ul><li><p>脚本的退出命令，类似C语言中的 <code>return value</code> ，可以供脚本的父进程调用。</p></li><li><p>每条命令返回一条状态状态，命令执行成功返回<code>0</code>，执行失败返回<code>非0</code>状态码可以理解为一个错误码（<code>error code</code>）。</p></li><li><p>最后的命令返回的状态或者 exit nnn（这里的nnn必须是1～255之间的整数）传递给shell。</p></li></ul><p><code>exit nnn</code> <code>exit</code> <code>exit $?</code> 或者<code>空</code>。都可以，是bash <code>Return value</code>的方式。</p><ul><li>可以使用 <code>！</code>来反转状态。</li></ul><h2 id="2-Bash中的test"><a href="#2-Bash中的test" class="headerlink" title="2. Bash中的test"></a>2. Bash中的test</h2><p>每个编程语言都会有对一个情况下测试的功能，Bash也不例外，bash提供test命令，多种的括号操作，最终要的If/else结构语句来实现test功能。</p><h3 id="测试结构体-Test-Constructs"><a href="#测试结构体-Test-Constructs" class="headerlink" title="测试结构体(Test Constructs)"></a>测试结构体(Test Constructs)</h3><ul><li><p>一个if/else结构体会测试一系列命令的返回值是否是0也就是命令是否执行成功。如果成功执行另外一系列操作。</p></li><li><p>bash使用 <code>[</code> 来进行测试，但是在后来的版本里，bash引进了 <code>[[</code> 来拓展test命令，bash把<code>[[$a -lt $b]]</code>看作一个元素，他会返回一个状态码（成功0，不成功是非0）</p></li><li><p>当使用<code>let</code> 和 <code>(())</code> 的时候，对计算表达式进行运算的时候也会返回exit code，用于对算式的测试</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">(( 0 &amp;&amp; 1 ))                 <span class="comment"># Logical AND</span></span><br><span class="line"><span class="built_in">echo</span> $?     <span class="comment"># 1     ***</span></span><br><span class="line"><span class="comment"># And so ...</span></span><br><span class="line"><span class="built_in">let</span> <span class="string">"num = (( 0 &amp;&amp; 1 ))"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$num</span>   <span class="comment"># 0</span></span><br><span class="line"><span class="comment"># But ...</span></span><br><span class="line"><span class="built_in">let</span> <span class="string">"num = (( 0 &amp;&amp; 1 ))"</span></span><br><span class="line"><span class="built_in">echo</span> $?     <span class="comment"># 1     ***</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(( 200 || 11 ))              <span class="comment"># Logical OR</span></span><br><span class="line"><span class="built_in">echo</span> $?     <span class="comment"># 0     ***</span></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="built_in">let</span> <span class="string">"num = (( 200 || 11 ))"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$num</span>   <span class="comment"># 1</span></span><br><span class="line"><span class="built_in">let</span> <span class="string">"num = (( 200 || 11 ))"</span></span><br><span class="line"><span class="built_in">echo</span> $?     <span class="comment"># 0     ***</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(( 200 | 11 ))               <span class="comment"># Bitwise OR</span></span><br><span class="line"><span class="built_in">echo</span> $?                      <span class="comment"># 0     ***</span></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="built_in">let</span> <span class="string">"num = (( 200 | 11 ))"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$num</span>                    <span class="comment"># 203</span></span><br><span class="line"><span class="built_in">let</span> <span class="string">"num = (( 200 | 11 ))"</span></span><br><span class="line"><span class="built_in">echo</span> $?                      <span class="comment"># 0     ***</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The "let" construct returns the same exit status</span></span><br><span class="line"><span class="comment">#+ as the double-parentheses arithmetic expansion.</span></span><br></pre></td></tr></table></figure><ul><li><p>if可以测试任何条件 不仅仅是包在括号里面的条件。</p></li><li><p><strong>Else if and elif</strong></p><blockquote><p>elif相当与 else if，要请求分支需要用到elif</p></blockquote>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ condition1 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">command1</span><br><span class="line">command2</span><br><span class="line">command3</span><br><span class="line"><span class="keyword">elif</span> [ condition2 ]</span><br><span class="line"><span class="comment"># Same as else if</span></span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">command4</span><br><span class="line">command5</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">default-command</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></li><li><p>Equivalence of test, <code>/usr/bin/test</code>,<code>[ ]</code>, and <code>/usr/bin/[</code> 使用这几个做判断都是一样的。更复杂的表达式要使用<code>[[]]</code>来代替<code>[]</code>。</p><blockquote><p>Using the [[ … ]] test construct, rather than [ … ] can prevent many logic errors in scripts. 这是Advanced Bash-Scripting Guide给出的建议。</p></blockquote></li></ul><h3 id="文件测试操作（File）"><a href="#文件测试操作（File）" class="headerlink" title="文件测试操作（File）"></a>文件测试操作（File）</h3><ul><li><p>-e 文件是否存在</p></li><li><p>-a 文件是否存在（以弃用）</p></li><li><p>-f 是否是普通文件(不是目录文件或者设备文件)</p></li><li><p>-s 是否是空文件</p></li><li><p>-d 是否是目录</p></li><li><p>-b 是否是块设备(block device)</p></li><li><p>-c 是否是字符设备(character device)</p></li><li><p>-h 是否是链接文件(symbolic link)</p></li><li><p>-S file is socket</p></li><li><p>-r -w -x 分别对应文件的 读写执行权限</p></li><li><p>-O 是否是文件的拥有者</p></li><li><p>-G group-id是否和你自己的相同</p></li><li><p>-N 在最后一次被读之后文件已经更改</p></li><li><p>f1 <code>-nt</code> f2 f1比f2新 </p></li><li><p><code>-ot</code> f1比f2旧 </p></li><li><p><code>-ef</code> f1和f2 引用同一个文件</p></li><li><p>例子</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> directory <span class="keyword">in</span> <span class="variable">$directorys</span>; <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> [ -d <span class="variable">$directory</span> ]</span><br><span class="line">    <span class="keyword">then</span> linkchk <span class="variable">$directory</span></span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"<span class="variable">$directory</span> is not a directory"</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"Usage: <span class="variable">$0</span> dir1 dir2 ..."</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="其他比较操作（Integer，String）"><a href="#其他比较操作（Integer，String）" class="headerlink" title="其他比较操作（Integer，String）"></a>其他比较操作（Integer，String）</h3><p>整型和字符串类型使用两组不同的操作</p><h4 id="整形"><a href="#整形" class="headerlink" title="整形"></a>整形</h4><ul><li><p>-eq 相等比较 <code>if [ &quot;$a&quot; -eq &quot;$b&quot; ]</code></p></li><li><p>-ne 比较不相等 <code>if [ &quot;$a&quot; -ne &quot;$b&quot; ]</code></p></li><li><p>-gt 大于等于(is greater than or equal to) <code>if [ &quot;$a&quot; -ge &quot;$b&quot; ]</code></p></li><li><p>-lt 小于(is less than) <code>if [ &quot;$a&quot; -lt &quot;$b&quot; ]</code></p></li><li><p>-le 小于等于(is less than or equal to) `if [ “$a” -le “$b” ]</p></li><li><p><code>&lt;</code> <code>&gt;</code> <code>&lt;=</code> <code>&gt;=</code> 对应大于，小于，小于等于，大于等于这些相应的操作</p></li></ul><h4 id="String类型"><a href="#String类型" class="headerlink" title="String类型"></a>String类型</h4><ul><li><p>= 判断字符串是否相等</p></li><li><p>== 和 = 相同，同样是判断字符串是否相同 但 == 在 [] 和 [[]] 中定义不同，下面举例：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[[ <span class="variable">$a</span> == z* ]]   <span class="comment"># True if $a starts with an "z" (pattern matching).</span></span><br><span class="line">[[ <span class="variable">$a</span> == <span class="string">"z*"</span> ]] <span class="comment"># True if $a is equal to z* (literal matching).</span></span><br><span class="line"></span><br><span class="line">[ <span class="variable">$a</span> == z* ]     <span class="comment"># File globbing and word splitting take place.</span></span><br><span class="line">[ <span class="string">"<span class="variable">$a</span>"</span> == <span class="string">"z*"</span> ] <span class="comment"># True if $a is equal to z* (literal matching).</span></span><br></pre></td></tr></table></figure><ul><li><p>!= 不等于</p></li><li><p>&lt; and &gt; 大于小于 按照ASCII 码比较</p></li><li><p>-z 空字符串,因此，字符串长度为0</p></li><li><p>-n 字符串不为空</p></li></ul><h4 id="逻辑比较"><a href="#逻辑比较" class="headerlink" title="逻辑比较"></a>逻辑比较</h4><ul><li><p>-a 表示逻辑与</p></li><li><p>-o 表示逻辑或</p><p>  -a -o 要使用在单个中括号中<code>if [ &quot;$expr1&quot; -a &quot;$expr2&quot; ]</code></p><p>  &amp;&amp; and || 但是要在双中括号中使用<code>[[ condition1 &amp;&amp; condition2 ]]</code> </p></li></ul><h3 id="嵌套-if-else"><a href="#嵌套-if-else" class="headerlink" title="嵌套 if else"></a>嵌套 <code>if else</code></h3><p>如其他编程语言类似,if else结构能够嵌套，但是嵌套结构和使用 <code>&amp;&amp;</code> 比较符结果相同</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">a=3</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$a</span>"</span> -gt 0 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">  <span class="keyword">if</span> [ <span class="string">"<span class="variable">$a</span>"</span> -lt 5 ]</span><br><span class="line">  <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"The value of \"a\" lies somewhere between 0 and 5."</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Same result as:</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$a</span>"</span> -gt 0 ] &amp;&amp; [ <span class="string">"<span class="variable">$a</span>"</span> -lt 5 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"The value of \"a\" lies somewhere between 0 and 5."</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Bash </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bash </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bash学习记录（二） bash中的变量和参数</title>
      <link href="/2018/04/11/2018-4-11-bash_%E5%8F%98%E9%87%8F/"/>
      <url>/2018/04/11/2018-4-11-bash_%E5%8F%98%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="bash学习记录（二）-bash中的变量和参数"><a href="#bash学习记录（二）-bash中的变量和参数" class="headerlink" title="bash学习记录（二） bash中的变量和参数"></a>bash学习记录（二） bash中的变量和参数</h1><p>变量就是一个标签在脚本中代表数据，不过是给分配在电脑内存中的数据一个名字，经常会出现在数学计算和大量操作(manipulation of quantities)和字符串解析(string parsing)中。</p><h2 id="变量置换-Variable-Substitution"><a href="#变量置换-Variable-Substitution" class="headerlink" title="变量置换 (Variable Substitution) $"></a>变量置换 (Variable Substitution) $</h2><p>The name of a variable is a placeholder for its value, the data it holds. Referencing (retrieving) its value is called variable substitution. 大致意思就是变量引用具体的值。使用$来引用变量 如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">bash$ variable1=23</span><br><span class="line"></span><br><span class="line">bash$ <span class="built_in">echo</span> variable1</span><br><span class="line">//variable1</span><br><span class="line"></span><br><span class="line">bash$ <span class="built_in">echo</span> <span class="variable">$variable1</span></span><br><span class="line">//23</span><br></pre></td></tr></table></figure><p>在(“..”)里引用不会干涉变量的引用，这叫做局部引用(<code>partial quoting</code>),也叫弱引用.但使用(‘..’)单引号会直接把变量名打印出来，不会引用变量，叫做全引用(<code>full quoting</code>),也叫做强引用。</p><blockquote><p>注意：其实使用$variable1和使用${variable1}是一样的但是某些语境下前者可能会出问题。</p></blockquote><blockquote><p>未初始化的变量有一个默认的的值为”null“而不是‘0’，并且bash中的变量不分类型。</p></blockquote><h2 id="变量分配-Variable-Assignment"><a href="#变量分配-Variable-Assignment" class="headerlink" title="变量分配(Variable Assignment) ="></a>变量分配(Variable Assignment) =</h2><p>等号-&gt; the assignment operator (no space before and after) 前后不能有空格</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#举一个比较典型的小例子，之前不知道区别。。</span></span><br><span class="line">a=`ls -l`         <span class="comment"># Assigns result of 'ls -l' command to 'a'</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$a</span>           <span class="comment"># Unquoted, however, it removes tabs and newlines.</span></span><br><span class="line"><span class="built_in">echo</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$a</span>"</span>         <span class="comment"># The quoted variable preserves whitespace.</span></span><br></pre></td></tr></table></figure><p>使用双引号扩起来的$a有空格，而没有双引号的是去掉空格的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">R=$(cat /etc/redhat-release)</span><br><span class="line">arch=$(uname -m)</span><br></pre></td></tr></table></figure><p>可以看出使用$()的作用和使用``的作用相同，都可以对命令进行包裹。</p><h2 id="bash变量没有类型"><a href="#bash变量没有类型" class="headerlink" title="bash变量没有类型"></a>bash变量没有类型</h2><p>不像其他的很多编程语言，bash脚本中的变量是没有类型的。无类型的变量是把双刃剑，一方面更加灵活，另一方面会渗透一些小的问题。</p><p>所以bash提供声明变量，会在后面的章节对声明变量的参数等信息详细列出来。</p><h2 id="特殊的变量类型-Special-Variable-Types"><a href="#特殊的变量类型-Special-Variable-Types" class="headerlink" title="特殊的变量类型(Special Variable Types)"></a>特殊的变量类型(Special Variable Types)</h2><ul><li><p>本地变量：变量只能在代码块和函数中可见</p></li><li><p>系统变量：变量影响shell的行为和用户的接口（比如设置Java环境变量）</p><p>  如果脚本需要设置环境变量那么就去 <code>export ..</code></p></li><li><p>位置参数：</p><p>  $0是脚本名称，1-9等对应其位置，10之后要使用大括号扩起来。$#对应最后一个元素</p><p>  使用shift命令可以将位置参数重新排列，实际上就是向左移动一级。</p></li></ul><h3 id="这次篇幅较小，主要讲了讲bash中的变量和位置参数的含义和使用，属于非常基础，非常容易理解的部分。"><a href="#这次篇幅较小，主要讲了讲bash中的变量和位置参数的含义和使用，属于非常基础，非常容易理解的部分。" class="headerlink" title="这次篇幅较小，主要讲了讲bash中的变量和位置参数的含义和使用，属于非常基础，非常容易理解的部分。"></a>这次篇幅较小，主要讲了讲bash中的变量和位置参数的含义和使用，属于非常基础，非常容易理解的部分。</h3>]]></content>
      
      
      <categories>
          
          <category> Bash </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bash </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bash学习记录（一） 初识和bash中的特殊字符</title>
      <link href="/2018/04/10/2018-04-10-bash%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
      <url>/2018/04/10/2018-04-10-bash%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="bash学习记录（一）初识bash和特殊字符"><a href="#bash学习记录（一）初识bash和特殊字符" class="headerlink" title="bash学习记录（一）初识bash和特殊字符"></a>bash学习记录（一）初识bash和特殊字符</h1><h2 id="初识Bash"><a href="#初识Bash" class="headerlink" title="初识Bash"></a>初识Bash</h2><p>鉴于本人的表达能力，不适合想要去系统学习bash的人来查看，提前分享两个不同阶段，不同人群学习的资料。</p><ol><li><p>想要学习bash但是不想学习太深的人:       <a href="https://github.com/denysdovhan/bash-handbook/blob/master/translations/zh-CN/README.md#%E5%89%8D%E8%A8%80" target="_blank" rel="noopener">bash-handbook</a></p></li><li><p>想要系统学习bash的人：<a href="http://tldp.org/LDP/abs/html/index.html" target="_blank" rel="noopener">Advanced Bash-Scripting Guide</a></p></li></ol><p>其实bash很难，要考虑的东西很多，但现在学到的只是皮毛，希望能够多看多实践，才能更进一步。</p><h3 id="Starting-Off-With-a-Sha-Bang"><a href="#Starting-Off-With-a-Sha-Bang" class="headerlink" title="Starting Off With a Sha-Bang"></a>Starting Off With a Sha-Bang</h3><p>sha-bang(#!)在起始的位置来告诉你的系统这个文件是命令的集合，能够使用哪个命令解释器来执行（/bin/bash）-&gt;path,这个命令路径必须正确</p><p>如果系统默认解释器是/bin/bash 或者其他 则不用使用 #! /bin/bash 来放到开头</p><h2 id="Special-Characters"><a href="#Special-Characters" class="headerlink" title="Special Characters"></a>Special Characters</h2><p>下面来简单总结一下有特殊意义的字符</p><ol><li><p><strong>‘#‘</strong>  跟在#号后面的相当与是注释，不会被解释器执行,可以出现单行，也可以出现在命令后作注释用</p></li><li><p><strong>; 分号</strong> 允许将多条命令放到单行用</p></li><li><p><strong>;;  两个分号</strong>，在<code>case</code>的场景下使用 如</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$variable</span>"</span> <span class="keyword">in</span></span><br><span class="line"></span><br><span class="line">abc)  <span class="built_in">echo</span> <span class="string">"\$variable = abc"</span> ;;</span><br><span class="line"></span><br><span class="line">xyz)  <span class="built_in">echo</span> <span class="string">"\$variable = xyz"</span> ;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure></li><li><p><strong>. dot</strong></p><p>  相当与linux的内建命令source</p><p>  作为文件名的一部分 如 .vimrc等</p><p>  作为目录导向 如 ./表示当前目录 ../相当与父目录</p><p>  正则表达式中可以表示为1个字符</p></li><li><p><strong>“ 双引号</strong> 部分引用字符串，大部分还是字符串，但是能够引用变量 ‘$value’，并且特殊字符需要转义</p></li><li><p><strong>‘ 单引号</strong> 可以保存全部特殊字符，不能引用变量</p></li><li><p><strong>, 逗号</strong> 表示连接多个计算表达式,多个表达式都会执行，但是只有最后一个计算式会返回值 。也做链接字符串</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> <span class="string">"t2 = ((a = 9, 15 / 3))"</span></span><br><span class="line"><span class="comment"># Set "a = 9" and "t2 = 15 / 3"</span></span><br></pre></td></tr></table></figure></li><li><p><strong>\ 反斜杠</strong> <code>escape [backslash]</code> 可是实现对单个字符的转义</p></li><li><p><strong>/ 斜杠</strong> <code>Filename path separator [forward slash]</code>本身就叫做文件分割符可以明了做什么用的了</p></li><li><p><strong>` <code>command substitution</code></strong> 命令替换 如 a=`echo “hello world” `;echo $a 等 或者 a=`date` ; echo $a</p></li><li><p><strong>: 冒号</strong> 空命令等价与‘NOP’ <code>do-nothing operation</code> 也是有状态的相当与内建函数 <code>true</code> 比如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> :</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">operation-1</span><br><span class="line">operation-2</span><br><span class="line">...</span><br><span class="line">operation-n</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Same as:</span></span><br><span class="line"><span class="comment">#    while true</span></span><br><span class="line"><span class="comment">#    do</span></span><br><span class="line"><span class="comment">#      ...</span></span><br><span class="line"><span class="comment">#    done</span></span><br></pre></td></tr></table></figure><p>作if判断的分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> condition</span><br><span class="line"><span class="keyword">then</span> :   <span class="comment"># Do nothing and branch ahead</span></span><br><span class="line"><span class="keyword">else</span>     <span class="comment"># Or else ...</span></span><br><span class="line">take-some-action</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>放在必须要有两元操作的地方作为分隔符，如：: ${username=`whoami`}</p><p>配合管道命令 <code>:&gt;</code> <code>:&gt;&gt;</code>如果文件没有存在则创建</p><p>做分割符 如 echo $PATH 会出现很多以：作为分割符的字符串</p><p>在函数里可以作为站位符防止函数提为空</p></li><li><p><strong>!叹号</strong>  作为 <code>非</code>出现 如 ！null 或者退出码 exit code。在不同的语境下可以作为间接变量引用。</p></li><li><p><strong>* 星号</strong> 可以作为全匹配来使用 如 echo * 。 表示乘法 1*2</p></li><li><p><strong>? 问号</strong> <code>test operator</code>. Within certain expressions, the ? indicates a test for a condition. 还可以作为匹配任意单个字符。</p></li><li><p><strong>$</strong> 变量引用  正则表达式中表示行尾</p></li><li><p><strong>${}</strong> 变量引用</p></li><li><p><strong>$(…)</strong> 多个变量同时引用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">file1=<span class="string">"file"</span></span><br><span class="line">file2=<span class="string">"nofile"</span></span><br><span class="line"><span class="built_in">echo</span> $<span class="string">'file1,file2'</span></span><br></pre></td></tr></table></figure><p>输出内容：file1,file2</p></li><li><p><strong><code>$* $@</code></strong>  位置参数 $*是将所有参数作为一个整体返回（字符串），而$@是将每个参数作为单元返回一个参数列表</p></li><li><p><strong>() 小括号</strong></p></li></ol><ul><li>操作组<code>(a=hello; echo $a)</code></li><li>数组初始化</li></ul><ol start="20"><li><p><strong>{} 花括号扩展</strong> 用来扩展参数 如 abou{t,y,u}</p></li><li><p><strong>[] 中括号</strong></p></li></ol><ul><li>shell内建测试的一部分</li><li>表达数组的部分如array[1]</li><li>表示字符集的范围，在正表达式中，方括号表示该位置可以匹配的字符集范围。</li></ul><ol start="22"><li><p><strong>[[]] 双中括号</strong>(double brackets)。</p><blockquote><p>这个结构也是测试，测试[[]]之中的表达式(Shell的关键字)。这个比单中括号更能防止脚本里面的逻辑错误</p></blockquote></li><li><p>$[ … ] and (()) 都表示Integer计算 integer expansion.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a=3</span><br><span class="line">b=7</span><br><span class="line"><span class="built_in">echo</span> $[<span class="variable">$a</span>+<span class="variable">$b</span>]</span><br><span class="line"><span class="built_in">echo</span> ((<span class="variable">$a</span>+<span class="variable">$b</span>))</span><br></pre></td></tr></table></figure></li><li><p><strong>| 管道</strong> 非常基础的概念 如 ls|grep .. 。</p></li><li><p>&amp;：后台执行  &amp;&amp; 和 || ：逻辑操作符</p></li><li><p>+ - * % 各自意义就不详细解释了</p></li></ol><p>资料引用 <a href="http://tldp.org/LDP/abs/html/index.html" target="_blank" rel="noopener">Advanced Bash-Scripting Guide</a> 文章特别详尽，有兴趣非常鼓励看原文。这里我只做了部分比较常用的比较容易理解的部分做了精简（原谅我英文不好 :) 破产版总结 - - ）。</p><p>作为bash学习总结的第一篇文章，篇幅不大，尽量做到简单，详尽易懂。当遇到问题能够回头看一看，希望能够起到好的作用！！</p>]]></content>
      
      
      <categories>
          
          <category> Bash </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bash </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MarkDown基本语法</title>
      <link href="/2018/04/04/2018-04-08-markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
      <url>/2018/04/04/2018-04-08-markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="Markdown语法总结"><a href="#Markdown语法总结" class="headerlink" title="Markdown语法总结"></a>Markdown语法总结</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>其实markdown语法很简洁，并且相当多的博客，还有重要的github上的readme也是用markdown进行编辑。所以有必要整理一下。废话不多说，进入正文</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>一个 Markdown 段落是由一个或多个连续的文本行组成，它的前后要有一个以上的空行（空行的定义是显示上看起来像是空的，便会被视为空行。比方说，若某一行只包含空格和制表符，则该行也会被视为空行）。普通段落不该用空格或制表符来缩进。</p><p>在编辑的过程当中每编辑一块的内容，就要空一行，否则会出问题。。。</p><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a><strong>标题</strong></h3><p>markdown支持两种标题的语法，类 Setext 和类 atx 形式。<br>类 Setext 形式是用底线的形式，利用 = （最高阶标题）和 - （第二阶标题），例如：</p><blockquote><p>This is an H1</p><p>=============</p><p>This is an H2</p><p>-————</p></blockquote><p>效果</p><blockquote><h1 id="This-is-an-H1"><a href="#This-is-an-H1" class="headerlink" title="This is an H1"></a>This is an H1</h1><h2 id="This-is-an-H2"><a href="#This-is-an-H2" class="headerlink" title="This is an H2"></a>This is an H2</h2></blockquote><p>也能使用atx 使用 # 来进行1-6阶的划分 如：</p><blockquote><p># This is an H1</p><p>## This is an H2</p></blockquote><p>效果</p><blockquote><h1 id="This-is-an-H1-1"><a href="#This-is-an-H1-1" class="headerlink" title="This is an H1"></a>This is an H1</h1><h2 id="This-is-an-H2-1"><a href="#This-is-an-H2-1" class="headerlink" title="This is an H2"></a>This is an H2</h2></blockquote><h3 id="区块引用"><a href="#区块引用" class="headerlink" title="区块引用"></a><strong>区块引用</strong></h3><blockquote><p>区块应用 使用 &gt; 符号进行标识 。<br>能每行都使用 &gt; 进行标识，也能只在第一行标识效果相同</p></blockquote><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a><strong>列表</strong></h3><ol><li>无序列表 可以使用*号或者+号或者-号都是一样的</li><li>有序列表 可以使用数字加英文.加空格使用有序列表</li></ol><h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><p>三个以上的* 就是分割线</p><hr><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>Markdown 支持两种形式的链接语法： 行内式和参考式两种形式。</p><p>不管是哪一种，链接文字都是用 [方括号] 来标记。</p><p>要建立一个行内式的链接，只要在方块括号后面紧接着圆括号并插入网址链接即可，如果你还想要加上链接的 title 文字，只要在网址后面，用双引号把 title 文字包起来即可，例如：</p><blockquote><p>This is [an example](<a href="http://example.com/" target="_blank" rel="noopener">http://example.com/</a> “Title”) inline link.</p></blockquote><blockquote><p>[This link](<a href="http://example.net/" target="_blank" rel="noopener">http://example.net/</a>) has no title attribute.</p></blockquote><p> 效果</p><p> This is <a href="http://example.com/" title="Title" target="_blank" rel="noopener">an example</a> inline link.</p><p><a href="http://example.net/" target="_blank" rel="noopener">This link</a> has no title attribute.</p><p>下面是一个参考式链接的范例：</p><p>I get 10 times more traffic from [Google] [1] than from<br>[Yahoo] [2] or [MSN] [3].</p><p>[1]: <a href="http://google.com/" target="_blank" rel="noopener">http://google.com/</a>        “Google”</p><p>[2]: <a href="http://search.yahoo.com/" target="_blank" rel="noopener">http://search.yahoo.com/</a>  “Yahoo Search”</p><p>[3]: <a href="http://search.msn.com/" target="_blank" rel="noopener">http://search.msn.com/</a>    “MSN Search”</p><p>I get 10 times more traffic from <a href="http://google.com/" title="Google" target="_blank" rel="noopener">Google</a> than from<br><a href="http://search.yahoo.com/" title="Yahoo Search" target="_blank" rel="noopener">Yahoo</a> or <a href="http://search.msn.com/" title="MSN Search" target="_blank" rel="noopener">MSN</a>.</p><h3 id="强调"><a href="#强调" class="headerlink" title="强调"></a><strong>强调</strong></h3><p>使用两个<em>*或者_表示强调 使用一个</em>或者一个_表示斜体</p><p>如： <strong>helloworld</strong> <em>helloworld</em></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h3><p>使用`符号来使用代码块<br>行内代码使用`包起来 如 <code>print()</code></p><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a><strong>图片</strong></h3><p>同样的图片也有行内式和参考式<br>向链接一样只不过在前面多个 !</p><h3 id="大概语法就是这么多-markdown简单方便，推荐使用。。"><a href="#大概语法就是这么多-markdown简单方便，推荐使用。。" class="headerlink" title="大概语法就是这么多 markdown简单方便，推荐使用。。"></a>大概语法就是这么多 markdown简单方便，推荐使用。。</h3><p>自己写这种东西自己感觉写的都好菜，可能没有什么写博客的习惯，慢慢写吧，总有一天会整体清晰的。算了，自己看吧  :)</p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
            <tag> 语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql中出现Invalid default value for CREATE_TIME 错误</title>
      <link href="/2018/01/01/2019-01-01-Mysql%E4%B8%AD%E5%87%BA%E7%8E%B0Invalid_default_value_for_CREATE_TIME%E7%9A%84%E9%94%99%E8%AF%AF/"/>
      <url>/2018/01/01/2019-01-01-Mysql%E4%B8%AD%E5%87%BA%E7%8E%B0Invalid_default_value_for_CREATE_TIME%E7%9A%84%E9%94%99%E8%AF%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="Mysql中出现Invalid-default-value-for-‘CREATE-TIME’错误"><a href="#Mysql中出现Invalid-default-value-for-‘CREATE-TIME’错误" class="headerlink" title="Mysql中出现Invalid default value for ‘CREATE_TIME’错误"></a>Mysql中出现Invalid default value for ‘CREATE_TIME’错误</h1><p>最近做了新的系统，并把mysql升级到了5.7版本，在倒入sql时候，出现如题的错误‘Mysql中出现Invalid default value for ‘CREATE_TIME’错误’,找到了解决方法。</p><p>是因为在5.7版本中的sql_mode有NO_ZERO_IN_DATE,NO_ZERO_DATE这两个东西，去掉就好了。如何去掉？</p><ol><li>临时方法</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; set session</span><br><span class="line"> -&gt; sql_mode=&apos;ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION&apos;;</span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.00 sec)</span><br></pre></td></tr></table></figure><ol start="2"><li>永久性修改</li></ol><p>直接修改配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/mysql/mysql.conf.d</span><br><span class="line">vim mysqld.cnf</span><br><span class="line"><span class="comment"># 找到【mysqld】在下面插入</span></span><br><span class="line">sql_mode=<span class="string">'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION'</span></span><br></pre></td></tr></table></figure><p>我使用第二种方法解决了问题。</p>]]></content>
      
      
      <categories>
          
          <category> MYSQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MYSQL </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
